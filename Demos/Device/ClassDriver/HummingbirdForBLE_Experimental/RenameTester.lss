
RenameTester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000009c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000954  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000237  00800100  00800100  000009c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  00000a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000030ab  00000000  00000000  00000c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d6e  00000000  00000000  00003cfb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002007  00000000  00000000  00004a69  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004dc  00000000  00000000  00006a70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001513  00000000  00000000  00006f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ec9  00000000  00000000  0000845f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  00009328  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
   2:	00 00       	nop
   4:	6e c0       	rjmp	.+220    	; 0xe2 <__bad_interrupt>
   6:	00 00       	nop
   8:	6c c0       	rjmp	.+216    	; 0xe2 <__bad_interrupt>
   a:	00 00       	nop
   c:	6a c0       	rjmp	.+212    	; 0xe2 <__bad_interrupt>
   e:	00 00       	nop
  10:	68 c0       	rjmp	.+208    	; 0xe2 <__bad_interrupt>
  12:	00 00       	nop
  14:	66 c0       	rjmp	.+204    	; 0xe2 <__bad_interrupt>
  16:	00 00       	nop
  18:	64 c0       	rjmp	.+200    	; 0xe2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	62 c0       	rjmp	.+196    	; 0xe2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	60 c0       	rjmp	.+192    	; 0xe2 <__bad_interrupt>
  22:	00 00       	nop
  24:	5e c0       	rjmp	.+188    	; 0xe2 <__bad_interrupt>
  26:	00 00       	nop
  28:	cc c3       	rjmp	.+1944   	; 0x7c2 <__vector_10>
  2a:	00 00       	nop
  2c:	5a c0       	rjmp	.+180    	; 0xe2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	58 c0       	rjmp	.+176    	; 0xe2 <__bad_interrupt>
  32:	00 00       	nop
  34:	56 c0       	rjmp	.+172    	; 0xe2 <__bad_interrupt>
  36:	00 00       	nop
  38:	54 c0       	rjmp	.+168    	; 0xe2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	52 c0       	rjmp	.+164    	; 0xe2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	50 c0       	rjmp	.+160    	; 0xe2 <__bad_interrupt>
  42:	00 00       	nop
  44:	4e c0       	rjmp	.+156    	; 0xe2 <__bad_interrupt>
  46:	00 00       	nop
  48:	4c c0       	rjmp	.+152    	; 0xe2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4a c0       	rjmp	.+148    	; 0xe2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	48 c0       	rjmp	.+144    	; 0xe2 <__bad_interrupt>
  52:	00 00       	nop
  54:	a2 c1       	rjmp	.+836    	; 0x39a <__vector_21>
  56:	00 00       	nop
  58:	44 c0       	rjmp	.+136    	; 0xe2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	ce c0       	rjmp	.+412    	; 0x1fa <__vector_23>
  5e:	00 00       	nop
  60:	40 c0       	rjmp	.+128    	; 0xe2 <__bad_interrupt>
  62:	00 00       	nop
  64:	90 c0       	rjmp	.+288    	; 0x186 <__vector_25>
  66:	00 00       	nop
  68:	3c c0       	rjmp	.+120    	; 0xe2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3a c0       	rjmp	.+116    	; 0xe2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	38 c0       	rjmp	.+112    	; 0xe2 <__bad_interrupt>
  72:	00 00       	nop
  74:	36 c0       	rjmp	.+108    	; 0xe2 <__bad_interrupt>
  76:	00 00       	nop
  78:	34 c0       	rjmp	.+104    	; 0xe2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	32 c0       	rjmp	.+100    	; 0xe2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	30 c0       	rjmp	.+96     	; 0xe2 <__bad_interrupt>
  82:	00 00       	nop
  84:	2e c0       	rjmp	.+92     	; 0xe2 <__bad_interrupt>
  86:	00 00       	nop
  88:	2c c0       	rjmp	.+88     	; 0xe2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	2a c0       	rjmp	.+84     	; 0xe2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	28 c0       	rjmp	.+80     	; 0xe2 <__bad_interrupt>
  92:	00 00       	nop
  94:	26 c0       	rjmp	.+76     	; 0xe2 <__bad_interrupt>
  96:	00 00       	nop
  98:	24 c0       	rjmp	.+72     	; 0xe2 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	22 c0       	rjmp	.+68     	; 0xe2 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	20 c0       	rjmp	.+64     	; 0xe2 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	1e c0       	rjmp	.+60     	; 0xe2 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	1c c0       	rjmp	.+56     	; 0xe2 <__bad_interrupt>
  aa:	00 00       	nop

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e4 e5       	ldi	r30, 0x54	; 84
  c0:	f9 e0       	ldi	r31, 0x09	; 9
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a0 30       	cpi	r26, 0x00	; 0
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	23 e0       	ldi	r18, 0x03	; 3
  d0:	a0 e0       	ldi	r26, 0x00	; 0
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a7 33       	cpi	r26, 0x37	; 55
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	23 d2       	rcall	.+1094   	; 0x526 <main>
  e0:	37 c4       	rjmp	.+2158   	; 0x950 <_exit>

000000e2 <__bad_interrupt>:
  e2:	8e cf       	rjmp	.-228    	; 0x0 <__vectors>

000000e4 <init_analog>:
	led_values_temp[8] = user;
}

void set_led3(unsigned int user)
{
	led_values_temp[9] = user;
  e4:	80 e6       	ldi	r24, 0x60	; 96
  e6:	80 93 7c 00 	sts	0x007C, r24
  ea:	84 e8       	ldi	r24, 0x84	; 132
  ec:	80 93 7a 00 	sts	0x007A, r24
  f0:	10 92 7b 00 	sts	0x007B, r1
  f4:	83 e7       	ldi	r24, 0x73	; 115
  f6:	80 93 7e 00 	sts	0x007E, r24
  fa:	08 95       	ret

000000fc <init_tiny_comm>:
  fc:	84 b1       	in	r24, 0x04	; 4
  fe:	86 61       	ori	r24, 0x16	; 22
 100:	84 b9       	out	0x04, r24	; 4
 102:	85 e5       	ldi	r24, 0x55	; 85
 104:	8c bd       	out	0x2c, r24	; 44
 106:	2c 9a       	sbi	0x05, 4	; 5
 108:	08 95       	ret

0000010a <serial_init>:
 10a:	82 e0       	ldi	r24, 0x02	; 2
 10c:	80 93 c8 00 	sts	0x00C8, r24
 110:	88 e9       	ldi	r24, 0x98	; 152
 112:	80 93 c9 00 	sts	0x00C9, r24
 116:	86 e0       	ldi	r24, 0x06	; 6
 118:	80 93 ca 00 	sts	0x00CA, r24
 11c:	10 92 28 03 	sts	0x0328, r1
 120:	10 92 29 03 	sts	0x0329, r1
 124:	8f ec       	ldi	r24, 0xCF	; 207
 126:	80 93 cc 00 	sts	0x00CC, r24
 12a:	08 95       	ret

0000012c <send_char>:
 12c:	90 91 c8 00 	lds	r25, 0x00C8
 130:	95 ff       	sbrs	r25, 5
 132:	fc cf       	rjmp	.-8      	; 0x12c <send_char>
 134:	80 93 ce 00 	sts	0x00CE, r24
 138:	08 95       	ret

0000013a <received_data_available>:
 13a:	20 91 28 03 	lds	r18, 0x0328
 13e:	90 91 29 03 	lds	r25, 0x0329
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	29 13       	cpse	r18, r25
 146:	01 c0       	rjmp	.+2      	; 0x14a <received_data_available+0x10>
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	08 95       	ret

0000014c <receive_char>:
 14c:	a9 e2       	ldi	r26, 0x29	; 41
 14e:	b3 e0       	ldi	r27, 0x03	; 3
 150:	ec 91       	ld	r30, X
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	e8 5d       	subi	r30, 0xD8	; 216
 156:	fd 4f       	sbci	r31, 0xFD	; 253
 158:	80 81       	ld	r24, Z
 15a:	9c 91       	ld	r25, X
 15c:	9f 5f       	subi	r25, 0xFF	; 255
 15e:	9c 93       	st	X, r25
 160:	08 95       	ret

00000162 <store_received_serial_data>:
 162:	80 91 28 03 	lds	r24, 0x0328
 166:	8f 5f       	subi	r24, 0xFF	; 255
 168:	20 91 29 03 	lds	r18, 0x0329
 16c:	90 91 ce 00 	lds	r25, 0x00CE
 170:	82 17       	cp	r24, r18
 172:	41 f0       	breq	.+16     	; 0x184 <store_received_serial_data+0x22>
 174:	e0 91 28 03 	lds	r30, 0x0328
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	e8 5d       	subi	r30, 0xD8	; 216
 17c:	fd 4f       	sbci	r31, 0xFD	; 253
 17e:	90 83       	st	Z, r25
 180:	80 93 28 03 	sts	0x0328, r24
 184:	08 95       	ret

00000186 <__vector_25>:
 186:	1f 92       	push	r1
 188:	0f 92       	push	r0
 18a:	0f b6       	in	r0, 0x3f	; 63
 18c:	0f 92       	push	r0
 18e:	11 24       	eor	r1, r1
 190:	2f 93       	push	r18
 192:	3f 93       	push	r19
 194:	4f 93       	push	r20
 196:	5f 93       	push	r21
 198:	6f 93       	push	r22
 19a:	7f 93       	push	r23
 19c:	8f 93       	push	r24
 19e:	9f 93       	push	r25
 1a0:	af 93       	push	r26
 1a2:	bf 93       	push	r27
 1a4:	ef 93       	push	r30
 1a6:	ff 93       	push	r31
 1a8:	dc df       	rcall	.-72     	; 0x162 <store_received_serial_data>
 1aa:	ff 91       	pop	r31
 1ac:	ef 91       	pop	r30
 1ae:	bf 91       	pop	r27
 1b0:	af 91       	pop	r26
 1b2:	9f 91       	pop	r25
 1b4:	8f 91       	pop	r24
 1b6:	7f 91       	pop	r23
 1b8:	6f 91       	pop	r22
 1ba:	5f 91       	pop	r21
 1bc:	4f 91       	pop	r20
 1be:	3f 91       	pop	r19
 1c0:	2f 91       	pop	r18
 1c2:	0f 90       	pop	r0
 1c4:	0f be       	out	0x3f, r0	; 63
 1c6:	0f 90       	pop	r0
 1c8:	1f 90       	pop	r1
 1ca:	18 95       	reti

000001cc <disable_vibration_motors>:
 1cc:	10 92 89 00 	sts	0x0089, r1
 1d0:	10 92 88 00 	sts	0x0088, r1
 1d4:	10 92 8b 00 	sts	0x008B, r1
 1d8:	10 92 8a 00 	sts	0x008A, r1
 1dc:	ec e1       	ldi	r30, 0x1C	; 28
 1de:	f1 e0       	ldi	r31, 0x01	; 1
 1e0:	10 82       	st	Z, r1
 1e2:	11 82       	std	Z+1, r1	; 0x01
 1e4:	08 95       	ret

000001e6 <init_vbr>:
 1e6:	81 ea       	ldi	r24, 0xA1	; 161
 1e8:	80 93 80 00 	sts	0x0080, r24
 1ec:	89 e0       	ldi	r24, 0x09	; 9
 1ee:	80 93 81 00 	sts	0x0081, r24
 1f2:	84 b1       	in	r24, 0x04	; 4
 1f4:	80 66       	ori	r24, 0x60	; 96
 1f6:	84 b9       	out	0x04, r24	; 4
 1f8:	e9 cf       	rjmp	.-46     	; 0x1cc <disable_vibration_motors>

000001fa <__vector_23>:
 1fa:	1f 92       	push	r1
 1fc:	0f 92       	push	r0
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	0f 92       	push	r0
 202:	11 24       	eor	r1, r1
 204:	8f 93       	push	r24
 206:	9f 93       	push	r25
 208:	af 93       	push	r26
 20a:	bf 93       	push	r27
 20c:	cf 93       	push	r28
 20e:	df 93       	push	r29
 210:	ef 93       	push	r30
 212:	ff 93       	push	r31
 214:	80 91 04 01 	lds	r24, 0x0104
 218:	81 11       	cpse	r24, r1
 21a:	24 c0       	rjmp	.+72     	; 0x264 <__vector_23+0x6a>
 21c:	80 91 03 01 	lds	r24, 0x0103
 220:	85 31       	cpi	r24, 0x15	; 21
 222:	18 f0       	brcs	.+6      	; 0x22a <__vector_23+0x30>
 224:	80 93 10 01 	sts	0x0110, r24
 228:	02 c0       	rjmp	.+4      	; 0x22e <__vector_23+0x34>
 22a:	10 92 10 01 	sts	0x0110, r1
 22e:	90 91 02 01 	lds	r25, 0x0102
 232:	91 11       	cpse	r25, r1
 234:	02 c0       	rjmp	.+4      	; 0x23a <__vector_23+0x40>
 236:	8f 5f       	subi	r24, 0xFF	; 255
 238:	01 c0       	rjmp	.+2      	; 0x23c <__vector_23+0x42>
 23a:	81 50       	subi	r24, 0x01	; 1
 23c:	80 93 03 01 	sts	0x0103, r24
 240:	80 91 03 01 	lds	r24, 0x0103
 244:	8e 3f       	cpi	r24, 0xFE	; 254
 246:	20 f0       	brcs	.+8      	; 0x250 <__vector_23+0x56>
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	80 93 02 01 	sts	0x0102, r24
 24e:	04 c0       	rjmp	.+8      	; 0x258 <__vector_23+0x5e>
 250:	83 30       	cpi	r24, 0x03	; 3
 252:	10 f4       	brcc	.+4      	; 0x258 <__vector_23+0x5e>
 254:	10 92 02 01 	sts	0x0102, r1
 258:	a6 e0       	ldi	r26, 0x06	; 6
 25a:	b1 e0       	ldi	r27, 0x01	; 1
 25c:	e1 e1       	ldi	r30, 0x11	; 17
 25e:	f1 e0       	ldi	r31, 0x01	; 1
 260:	ef 01       	movw	r28, r30
 262:	06 c0       	rjmp	.+12     	; 0x270 <__vector_23+0x76>
 264:	81 30       	cpi	r24, 0x01	; 1
 266:	c1 f7       	brne	.-16     	; 0x258 <__vector_23+0x5e>
 268:	8f ef       	ldi	r24, 0xFF	; 255
 26a:	80 93 10 01 	sts	0x0110, r24
 26e:	f4 cf       	rjmp	.-24     	; 0x258 <__vector_23+0x5e>
 270:	8d 91       	ld	r24, X+
 272:	89 93       	st	Y+, r24
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	a1 31       	cpi	r26, 0x11	; 17
 278:	b8 07       	cpc	r27, r24
 27a:	d1 f7       	brne	.-12     	; 0x270 <__vector_23+0x76>
 27c:	80 91 11 01 	lds	r24, 0x0111
 280:	88 23       	and	r24, r24
 282:	11 f0       	breq	.+4      	; 0x288 <__vector_23+0x8e>
 284:	76 9a       	sbi	0x0e, 6	; 14
 286:	04 c0       	rjmp	.+8      	; 0x290 <__vector_23+0x96>
 288:	76 98       	cbi	0x0e, 6	; 14
 28a:	8f ef       	ldi	r24, 0xFF	; 255
 28c:	80 93 11 01 	sts	0x0111, r24
 290:	80 91 12 01 	lds	r24, 0x0112
 294:	88 23       	and	r24, r24
 296:	11 f0       	breq	.+4      	; 0x29c <__vector_23+0xa2>
 298:	5c 9a       	sbi	0x0b, 4	; 11
 29a:	04 c0       	rjmp	.+8      	; 0x2a4 <__vector_23+0xaa>
 29c:	5c 98       	cbi	0x0b, 4	; 11
 29e:	8f ef       	ldi	r24, 0xFF	; 255
 2a0:	80 93 12 01 	sts	0x0112, r24
 2a4:	80 91 13 01 	lds	r24, 0x0113
 2a8:	88 23       	and	r24, r24
 2aa:	11 f0       	breq	.+4      	; 0x2b0 <__vector_23+0xb6>
 2ac:	5e 9a       	sbi	0x0b, 6	; 11
 2ae:	04 c0       	rjmp	.+8      	; 0x2b8 <__vector_23+0xbe>
 2b0:	5e 98       	cbi	0x0b, 6	; 11
 2b2:	8f ef       	ldi	r24, 0xFF	; 255
 2b4:	80 93 13 01 	sts	0x0113, r24
 2b8:	80 91 14 01 	lds	r24, 0x0114
 2bc:	88 23       	and	r24, r24
 2be:	11 f0       	breq	.+4      	; 0x2c4 <__vector_23+0xca>
 2c0:	46 9a       	sbi	0x08, 6	; 8
 2c2:	04 c0       	rjmp	.+8      	; 0x2cc <__vector_23+0xd2>
 2c4:	46 98       	cbi	0x08, 6	; 8
 2c6:	8f ef       	ldi	r24, 0xFF	; 255
 2c8:	80 93 14 01 	sts	0x0114, r24
 2cc:	80 91 15 01 	lds	r24, 0x0115
 2d0:	88 23       	and	r24, r24
 2d2:	11 f0       	breq	.+4      	; 0x2d8 <__vector_23+0xde>
 2d4:	5f 9a       	sbi	0x0b, 7	; 11
 2d6:	04 c0       	rjmp	.+8      	; 0x2e0 <__vector_23+0xe6>
 2d8:	5f 98       	cbi	0x0b, 7	; 11
 2da:	8f ef       	ldi	r24, 0xFF	; 255
 2dc:	80 93 15 01 	sts	0x0115, r24
 2e0:	80 91 16 01 	lds	r24, 0x0116
 2e4:	88 23       	and	r24, r24
 2e6:	11 f0       	breq	.+4      	; 0x2ec <__vector_23+0xf2>
 2e8:	2f 9a       	sbi	0x05, 7	; 5
 2ea:	04 c0       	rjmp	.+8      	; 0x2f4 <__vector_23+0xfa>
 2ec:	2f 98       	cbi	0x05, 7	; 5
 2ee:	8f ef       	ldi	r24, 0xFF	; 255
 2f0:	80 93 16 01 	sts	0x0116, r24
 2f4:	80 91 17 01 	lds	r24, 0x0117
 2f8:	88 23       	and	r24, r24
 2fa:	11 f0       	breq	.+4      	; 0x300 <__vector_23+0x106>
 2fc:	58 9a       	sbi	0x0b, 0	; 11
 2fe:	04 c0       	rjmp	.+8      	; 0x308 <__vector_23+0x10e>
 300:	58 98       	cbi	0x0b, 0	; 11
 302:	8f ef       	ldi	r24, 0xFF	; 255
 304:	80 93 17 01 	sts	0x0117, r24
 308:	80 91 18 01 	lds	r24, 0x0118
 30c:	88 23       	and	r24, r24
 30e:	11 f0       	breq	.+4      	; 0x314 <__vector_23+0x11a>
 310:	59 9a       	sbi	0x0b, 1	; 11
 312:	04 c0       	rjmp	.+8      	; 0x31c <__vector_23+0x122>
 314:	59 98       	cbi	0x0b, 1	; 11
 316:	8f ef       	ldi	r24, 0xFF	; 255
 318:	80 93 18 01 	sts	0x0118, r24
 31c:	80 91 19 01 	lds	r24, 0x0119
 320:	88 23       	and	r24, r24
 322:	11 f0       	breq	.+4      	; 0x328 <__vector_23+0x12e>
 324:	72 9a       	sbi	0x0e, 2	; 14
 326:	04 c0       	rjmp	.+8      	; 0x330 <__vector_23+0x136>
 328:	72 98       	cbi	0x0e, 2	; 14
 32a:	8f ef       	ldi	r24, 0xFF	; 255
 32c:	80 93 19 01 	sts	0x0119, r24
 330:	80 91 1a 01 	lds	r24, 0x011A
 334:	88 23       	and	r24, r24
 336:	11 f0       	breq	.+4      	; 0x33c <__vector_23+0x142>
 338:	8f 9a       	sbi	0x11, 7	; 17
 33a:	04 c0       	rjmp	.+8      	; 0x344 <__vector_23+0x14a>
 33c:	8f 98       	cbi	0x11, 7	; 17
 33e:	8f ef       	ldi	r24, 0xFF	; 255
 340:	80 93 1a 01 	sts	0x011A, r24
 344:	80 91 1b 01 	lds	r24, 0x011B
 348:	88 23       	and	r24, r24
 34a:	11 f0       	breq	.+4      	; 0x350 <__vector_23+0x156>
 34c:	47 9a       	sbi	0x08, 7	; 8
 34e:	04 c0       	rjmp	.+8      	; 0x358 <__vector_23+0x15e>
 350:	47 98       	cbi	0x08, 7	; 8
 352:	8f ef       	ldi	r24, 0xFF	; 255
 354:	80 93 1b 01 	sts	0x011B, r24
 358:	80 91 05 01 	lds	r24, 0x0105
 35c:	91 91       	ld	r25, Z+
 35e:	98 17       	cp	r25, r24
 360:	08 f4       	brcc	.+2      	; 0x364 <__vector_23+0x16a>
 362:	89 2f       	mov	r24, r25
 364:	91 e0       	ldi	r25, 0x01	; 1
 366:	ec 31       	cpi	r30, 0x1C	; 28
 368:	f9 07       	cpc	r31, r25
 36a:	c1 f7       	brne	.-16     	; 0x35c <__vector_23+0x162>
 36c:	80 93 05 01 	sts	0x0105, r24
 370:	87 bd       	out	0x27, r24	; 39
 372:	90 91 00 01 	lds	r25, 0x0100
 376:	80 91 01 01 	lds	r24, 0x0101
 37a:	89 0f       	add	r24, r25
 37c:	80 93 00 01 	sts	0x0100, r24
 380:	ff 91       	pop	r31
 382:	ef 91       	pop	r30
 384:	df 91       	pop	r29
 386:	cf 91       	pop	r28
 388:	bf 91       	pop	r27
 38a:	af 91       	pop	r26
 38c:	9f 91       	pop	r25
 38e:	8f 91       	pop	r24
 390:	0f 90       	pop	r0
 392:	0f be       	out	0x3f, r0	; 63
 394:	0f 90       	pop	r0
 396:	1f 90       	pop	r1
 398:	18 95       	reti

0000039a <__vector_21>:
 39a:	1f 92       	push	r1
 39c:	0f 92       	push	r0
 39e:	0f b6       	in	r0, 0x3f	; 63
 3a0:	0f 92       	push	r0
 3a2:	11 24       	eor	r1, r1
 3a4:	8f 93       	push	r24
 3a6:	9f 93       	push	r25
 3a8:	ef 93       	push	r30
 3aa:	ff 93       	push	r31
 3ac:	80 91 05 01 	lds	r24, 0x0105
 3b0:	8f 3f       	cpi	r24, 0xFF	; 255
 3b2:	09 f4       	brne	.+2      	; 0x3b6 <__vector_21+0x1c>
 3b4:	7a c0       	rjmp	.+244    	; 0x4aa <__vector_21+0x110>
 3b6:	90 91 11 01 	lds	r25, 0x0111
 3ba:	98 13       	cpse	r25, r24
 3bc:	04 c0       	rjmp	.+8      	; 0x3c6 <__vector_21+0x2c>
 3be:	76 98       	cbi	0x0e, 6	; 14
 3c0:	8f ef       	ldi	r24, 0xFF	; 255
 3c2:	80 93 11 01 	sts	0x0111, r24
 3c6:	90 91 12 01 	lds	r25, 0x0112
 3ca:	80 91 05 01 	lds	r24, 0x0105
 3ce:	98 13       	cpse	r25, r24
 3d0:	04 c0       	rjmp	.+8      	; 0x3da <__vector_21+0x40>
 3d2:	5c 98       	cbi	0x0b, 4	; 11
 3d4:	8f ef       	ldi	r24, 0xFF	; 255
 3d6:	80 93 12 01 	sts	0x0112, r24
 3da:	90 91 13 01 	lds	r25, 0x0113
 3de:	80 91 05 01 	lds	r24, 0x0105
 3e2:	98 13       	cpse	r25, r24
 3e4:	04 c0       	rjmp	.+8      	; 0x3ee <__vector_21+0x54>
 3e6:	5e 98       	cbi	0x0b, 6	; 11
 3e8:	8f ef       	ldi	r24, 0xFF	; 255
 3ea:	80 93 13 01 	sts	0x0113, r24
 3ee:	90 91 14 01 	lds	r25, 0x0114
 3f2:	80 91 05 01 	lds	r24, 0x0105
 3f6:	98 13       	cpse	r25, r24
 3f8:	04 c0       	rjmp	.+8      	; 0x402 <__vector_21+0x68>
 3fa:	46 98       	cbi	0x08, 6	; 8
 3fc:	8f ef       	ldi	r24, 0xFF	; 255
 3fe:	80 93 14 01 	sts	0x0114, r24
 402:	90 91 15 01 	lds	r25, 0x0115
 406:	80 91 05 01 	lds	r24, 0x0105
 40a:	98 13       	cpse	r25, r24
 40c:	04 c0       	rjmp	.+8      	; 0x416 <__vector_21+0x7c>
 40e:	5f 98       	cbi	0x0b, 7	; 11
 410:	8f ef       	ldi	r24, 0xFF	; 255
 412:	80 93 15 01 	sts	0x0115, r24
 416:	90 91 16 01 	lds	r25, 0x0116
 41a:	80 91 05 01 	lds	r24, 0x0105
 41e:	98 13       	cpse	r25, r24
 420:	04 c0       	rjmp	.+8      	; 0x42a <__vector_21+0x90>
 422:	2f 98       	cbi	0x05, 7	; 5
 424:	8f ef       	ldi	r24, 0xFF	; 255
 426:	80 93 16 01 	sts	0x0116, r24
 42a:	90 91 17 01 	lds	r25, 0x0117
 42e:	80 91 05 01 	lds	r24, 0x0105
 432:	98 13       	cpse	r25, r24
 434:	04 c0       	rjmp	.+8      	; 0x43e <__vector_21+0xa4>
 436:	58 98       	cbi	0x0b, 0	; 11
 438:	8f ef       	ldi	r24, 0xFF	; 255
 43a:	80 93 17 01 	sts	0x0117, r24
 43e:	90 91 18 01 	lds	r25, 0x0118
 442:	80 91 05 01 	lds	r24, 0x0105
 446:	98 13       	cpse	r25, r24
 448:	04 c0       	rjmp	.+8      	; 0x452 <__vector_21+0xb8>
 44a:	59 98       	cbi	0x0b, 1	; 11
 44c:	8f ef       	ldi	r24, 0xFF	; 255
 44e:	80 93 18 01 	sts	0x0118, r24
 452:	90 91 19 01 	lds	r25, 0x0119
 456:	80 91 05 01 	lds	r24, 0x0105
 45a:	98 13       	cpse	r25, r24
 45c:	04 c0       	rjmp	.+8      	; 0x466 <__vector_21+0xcc>
 45e:	72 98       	cbi	0x0e, 2	; 14
 460:	8f ef       	ldi	r24, 0xFF	; 255
 462:	80 93 19 01 	sts	0x0119, r24
 466:	90 91 1a 01 	lds	r25, 0x011A
 46a:	80 91 05 01 	lds	r24, 0x0105
 46e:	98 13       	cpse	r25, r24
 470:	04 c0       	rjmp	.+8      	; 0x47a <__vector_21+0xe0>
 472:	8f 98       	cbi	0x11, 7	; 17
 474:	8f ef       	ldi	r24, 0xFF	; 255
 476:	80 93 1a 01 	sts	0x011A, r24
 47a:	90 91 1b 01 	lds	r25, 0x011B
 47e:	80 91 05 01 	lds	r24, 0x0105
 482:	98 13       	cpse	r25, r24
 484:	04 c0       	rjmp	.+8      	; 0x48e <__vector_21+0xf4>
 486:	47 98       	cbi	0x08, 7	; 8
 488:	8f ef       	ldi	r24, 0xFF	; 255
 48a:	80 93 1b 01 	sts	0x011B, r24
 48e:	e1 e1       	ldi	r30, 0x11	; 17
 490:	f1 e0       	ldi	r31, 0x01	; 1
 492:	8f ef       	ldi	r24, 0xFF	; 255
 494:	91 91       	ld	r25, Z+
 496:	98 17       	cp	r25, r24
 498:	08 f4       	brcc	.+2      	; 0x49c <__vector_21+0x102>
 49a:	89 2f       	mov	r24, r25
 49c:	91 e0       	ldi	r25, 0x01	; 1
 49e:	ec 31       	cpi	r30, 0x1C	; 28
 4a0:	f9 07       	cpc	r31, r25
 4a2:	c1 f7       	brne	.-16     	; 0x494 <__vector_21+0xfa>
 4a4:	80 93 05 01 	sts	0x0105, r24
 4a8:	87 bd       	out	0x27, r24	; 39
 4aa:	ff 91       	pop	r31
 4ac:	ef 91       	pop	r30
 4ae:	9f 91       	pop	r25
 4b0:	8f 91       	pop	r24
 4b2:	0f 90       	pop	r0
 4b4:	0f be       	out	0x3f, r0	; 63
 4b6:	0f 90       	pop	r0
 4b8:	1f 90       	pop	r1
 4ba:	18 95       	reti

000004bc <init_orb>:
 4bc:	14 bc       	out	0x24, r1	; 36
 4be:	84 e0       	ldi	r24, 0x04	; 4
 4c0:	85 bd       	out	0x25, r24	; 37
 4c2:	83 e0       	ldi	r24, 0x03	; 3
 4c4:	80 93 6e 00 	sts	0x006E, r24
 4c8:	27 9a       	sbi	0x04, 7	; 4
 4ca:	87 b1       	in	r24, 0x07	; 7
 4cc:	80 6c       	ori	r24, 0xC0	; 192
 4ce:	87 b9       	out	0x07, r24	; 7
 4d0:	8a b1       	in	r24, 0x0a	; 10
 4d2:	83 6d       	ori	r24, 0xD3	; 211
 4d4:	8a b9       	out	0x0a, r24	; 10
 4d6:	8d b1       	in	r24, 0x0d	; 13
 4d8:	84 64       	ori	r24, 0x44	; 68
 4da:	8d b9       	out	0x0d, r24	; 13
 4dc:	87 9a       	sbi	0x10, 7	; 16
 4de:	08 95       	ret

000004e0 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 4e0:	84 b7       	in	r24, 0x34	; 52
 4e2:	87 7f       	andi	r24, 0xF7	; 247
 4e4:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 4e6:	0f b6       	in	r0, 0x3f	; 63
 4e8:	f8 94       	cli
 4ea:	a8 95       	wdr
 4ec:	80 91 60 00 	lds	r24, 0x0060
 4f0:	88 61       	ori	r24, 0x18	; 24
 4f2:	80 93 60 00 	sts	0x0060, r24
 4f6:	10 92 60 00 	sts	0x0060, r1
 4fa:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	80 e8       	ldi	r24, 0x80	; 128
 500:	0f b6       	in	r0, 0x3f	; 63
 502:	f8 94       	cli
 504:	80 93 61 00 	sts	0x0061, r24
 508:	90 93 61 00 	sts	0x0061, r25
 50c:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRB  |=  LEDS_PORTB_LEDS;
 50e:	20 9a       	sbi	0x04, 0	; 4
				PORTB |=  LEDS_PORTB_LEDS;
 510:	28 9a       	sbi	0x05, 0	; 5
				DDRD  |=  LEDS_PORTD_LEDS;
 512:	55 9a       	sbi	0x0a, 5	; 10
				PORTD |=  LEDS_PORTD_LEDS;
 514:	5d 9a       	sbi	0x0b, 5	; 11
				DDRC  |=  LEDS_PORTC_LEDS;
 516:	3f 9a       	sbi	0x07, 7	; 7
				PORTC &= ~LEDS_PORTC_LEDS;
 518:	47 98       	cbi	0x08, 7	; 8
	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	LEDs_Init();
	init_analog();
 51a:	e4 dd       	rcall	.-1080   	; 0xe4 <init_analog>
	init_orb();
 51c:	cf df       	rcall	.-98     	; 0x4bc <init_orb>
	init_vbr();
 51e:	63 de       	rcall	.-826    	; 0x1e6 <init_vbr>
	init_tiny_comm();
 520:	ed dd       	rcall	.-1062   	; 0xfc <init_tiny_comm>
	USB_Init();
 522:	32 d1       	rcall	.+612    	; 0x788 <USB_Init>
	serial_init();
 524:	f2 cd       	rjmp	.-1052   	; 0x10a <serial_init>

00000526 <main>:
#include <HummingbirdForBLE.h>


int main(void)
{
 526:	cf 93       	push	r28
 528:	df 93       	push	r29
 52a:	cd b7       	in	r28, 0x3d	; 61
 52c:	de b7       	in	r29, 0x3e	; 62
 52e:	69 97       	sbiw	r28, 0x19	; 25
 530:	0f b6       	in	r0, 0x3f	; 63
 532:	f8 94       	cli
 534:	de bf       	out	0x3e, r29	; 62
 536:	0f be       	out	0x3f, r0	; 63
 538:	cd bf       	out	0x3d, r28	; 61
	char response[25];
	int i = 0;
	SetupHardware();
 53a:	d2 df       	rcall	.-92     	; 0x4e0 <SetupHardware>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 53c:	78 94       	sei

	GlobalInterruptEnable();
	
	send_char('+');
 53e:	8b e2       	ldi	r24, 0x2B	; 43
 540:	f5 dd       	rcall	.-1046   	; 0x12c <send_char>
	send_char('+');
 542:	8b e2       	ldi	r24, 0x2B	; 43
 544:	f3 dd       	rcall	.-1050   	; 0x12c <send_char>
	send_char('+');
 546:	8b e2       	ldi	r24, 0x2B	; 43
 548:	f1 dd       	rcall	.-1054   	; 0x12c <send_char>
	send_char('\n');
 54a:	8a e0       	ldi	r24, 0x0A	; 10
 54c:	ef dd       	rcall	.-1058   	; 0x12c <send_char>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 54e:	2f ef       	ldi	r18, 0xFF	; 255
 550:	89 e6       	ldi	r24, 0x69	; 105
 552:	98 e1       	ldi	r25, 0x18	; 24
 554:	21 50       	subi	r18, 0x01	; 1
 556:	80 40       	sbci	r24, 0x00	; 0
 558:	90 40       	sbci	r25, 0x00	; 0
 55a:	e1 f7       	brne	.-8      	; 0x554 <main+0x2e>
 55c:	00 c0       	rjmp	.+0      	; 0x55e <main+0x38>
 55e:	00 00       	nop
	
	_delay_ms(500);
	
	while(received_data_available())
 560:	ec dd       	rcall	.-1064   	; 0x13a <received_data_available>
 562:	88 23       	and	r24, r24
 564:	19 f0       	breq	.+6      	; 0x56c <main+0x46>
	{
		response[0] = receive_char();
 566:	f2 dd       	rcall	.-1052   	; 0x14c <receive_char>
 568:	89 83       	std	Y+1, r24	; 0x01
 56a:	fa cf       	rjmp	.-12     	; 0x560 <main+0x3a>
	}
	
	// send AT+BLEGETADDR
	send_char('A');
 56c:	81 e4       	ldi	r24, 0x41	; 65
 56e:	de dd       	rcall	.-1092   	; 0x12c <send_char>
	send_char('T');
 570:	84 e5       	ldi	r24, 0x54	; 84
 572:	dc dd       	rcall	.-1096   	; 0x12c <send_char>
	send_char('+');
 574:	8b e2       	ldi	r24, 0x2B	; 43
 576:	da dd       	rcall	.-1100   	; 0x12c <send_char>
	send_char('B');
 578:	82 e4       	ldi	r24, 0x42	; 66
 57a:	d8 dd       	rcall	.-1104   	; 0x12c <send_char>
	send_char('L');
 57c:	8c e4       	ldi	r24, 0x4C	; 76
 57e:	d6 dd       	rcall	.-1108   	; 0x12c <send_char>
	send_char('E');
 580:	85 e4       	ldi	r24, 0x45	; 69
 582:	d4 dd       	rcall	.-1112   	; 0x12c <send_char>
	send_char('G');
 584:	87 e4       	ldi	r24, 0x47	; 71
 586:	d2 dd       	rcall	.-1116   	; 0x12c <send_char>
	send_char('E');
 588:	85 e4       	ldi	r24, 0x45	; 69
 58a:	d0 dd       	rcall	.-1120   	; 0x12c <send_char>
	send_char('T');
 58c:	84 e5       	ldi	r24, 0x54	; 84
 58e:	ce dd       	rcall	.-1124   	; 0x12c <send_char>
	send_char('A');
 590:	81 e4       	ldi	r24, 0x41	; 65
 592:	cc dd       	rcall	.-1128   	; 0x12c <send_char>
	send_char('D');
 594:	84 e4       	ldi	r24, 0x44	; 68
 596:	ca dd       	rcall	.-1132   	; 0x12c <send_char>
	send_char('D');
 598:	84 e4       	ldi	r24, 0x44	; 68
 59a:	c8 dd       	rcall	.-1136   	; 0x12c <send_char>
	send_char('R');
 59c:	82 e5       	ldi	r24, 0x52	; 82
 59e:	c6 dd       	rcall	.-1140   	; 0x12c <send_char>
	send_char('\n');
 5a0:	8a e0       	ldi	r24, 0x0A	; 10
 5a2:	c4 dd       	rcall	.-1144   	; 0x12c <send_char>
 5a4:	ef ef       	ldi	r30, 0xFF	; 255
 5a6:	f9 e6       	ldi	r31, 0x69	; 105
 5a8:	28 e1       	ldi	r18, 0x18	; 24
 5aa:	e1 50       	subi	r30, 0x01	; 1
 5ac:	f0 40       	sbci	r31, 0x00	; 0
 5ae:	20 40       	sbci	r18, 0x00	; 0
 5b0:	e1 f7       	brne	.-8      	; 0x5aa <main+0x84>
 5b2:	00 c0       	rjmp	.+0      	; 0x5b4 <main+0x8e>
 5b4:	00 00       	nop
 5b6:	8e 01       	movw	r16, r28
 5b8:	0f 5f       	subi	r16, 0xFF	; 255
 5ba:	1f 4f       	sbci	r17, 0xFF	; 255
 5bc:	6e 01       	movw	r12, r28
 5be:	80 e1       	ldi	r24, 0x10	; 16
 5c0:	c8 0e       	add	r12, r24
 5c2:	d1 1c       	adc	r13, r1
 5c4:	78 01       	movw	r14, r16
	
	_delay_ms(500);
	while(received_data_available() && i < 15)
 5c6:	b9 dd       	rcall	.-1166   	; 0x13a <received_data_available>
 5c8:	88 23       	and	r24, r24
 5ca:	41 f0       	breq	.+16     	; 0x5dc <main+0xb6>
 5cc:	ec 14       	cp	r14, r12
 5ce:	fd 04       	cpc	r15, r13
 5d0:	29 f0       	breq	.+10     	; 0x5dc <main+0xb6>
	{
		response[i] = receive_char();
 5d2:	bc dd       	rcall	.-1160   	; 0x14c <receive_char>
 5d4:	f7 01       	movw	r30, r14
 5d6:	81 93       	st	Z+, r24
 5d8:	7f 01       	movw	r14, r30
 5da:	f5 cf       	rjmp	.-22     	; 0x5c6 <main+0xa0>
 5dc:	78 01       	movw	r14, r16
		i++;
	}
	i=0;
	while(received_data_available())
 5de:	ad dd       	rcall	.-1190   	; 0x13a <received_data_available>
 5e0:	88 23       	and	r24, r24
 5e2:	29 f0       	breq	.+10     	; 0x5ee <main+0xc8>
	{
		response[i] = receive_char();
 5e4:	b3 dd       	rcall	.-1178   	; 0x14c <receive_char>
 5e6:	f7 01       	movw	r30, r14
 5e8:	81 93       	st	Z+, r24
 5ea:	7f 01       	movw	r14, r30
 5ec:	f8 cf       	rjmp	.-16     	; 0x5de <main+0xb8>
		i++;
	}

	// send AT+GAPDEVNAME=HBXXXXX
	send_char('A');
 5ee:	81 e4       	ldi	r24, 0x41	; 65
 5f0:	9d dd       	rcall	.-1222   	; 0x12c <send_char>
	send_char('T');
 5f2:	84 e5       	ldi	r24, 0x54	; 84
 5f4:	9b dd       	rcall	.-1226   	; 0x12c <send_char>
	send_char('+');
 5f6:	8b e2       	ldi	r24, 0x2B	; 43
 5f8:	99 dd       	rcall	.-1230   	; 0x12c <send_char>
	send_char('G');
 5fa:	87 e4       	ldi	r24, 0x47	; 71
 5fc:	97 dd       	rcall	.-1234   	; 0x12c <send_char>
	send_char('A');
 5fe:	81 e4       	ldi	r24, 0x41	; 65
 600:	95 dd       	rcall	.-1238   	; 0x12c <send_char>
	send_char('P');
 602:	80 e5       	ldi	r24, 0x50	; 80
 604:	93 dd       	rcall	.-1242   	; 0x12c <send_char>
	send_char('D');
 606:	84 e4       	ldi	r24, 0x44	; 68
 608:	91 dd       	rcall	.-1246   	; 0x12c <send_char>
	send_char('E');
 60a:	85 e4       	ldi	r24, 0x45	; 69
 60c:	8f dd       	rcall	.-1250   	; 0x12c <send_char>
	send_char('V');
 60e:	86 e5       	ldi	r24, 0x56	; 86
 610:	8d dd       	rcall	.-1254   	; 0x12c <send_char>
	send_char('N');
 612:	8e e4       	ldi	r24, 0x4E	; 78
 614:	8b dd       	rcall	.-1258   	; 0x12c <send_char>
	send_char('A');
 616:	81 e4       	ldi	r24, 0x41	; 65
 618:	89 dd       	rcall	.-1262   	; 0x12c <send_char>
	send_char('M');
 61a:	8d e4       	ldi	r24, 0x4D	; 77
 61c:	87 dd       	rcall	.-1266   	; 0x12c <send_char>
	send_char('E');
 61e:	85 e4       	ldi	r24, 0x45	; 69
 620:	85 dd       	rcall	.-1270   	; 0x12c <send_char>
	send_char('=');
 622:	8d e3       	ldi	r24, 0x3D	; 61
 624:	83 dd       	rcall	.-1274   	; 0x12c <send_char>
	send_char('t');
 626:	84 e7       	ldi	r24, 0x74	; 116
 628:	81 dd       	rcall	.-1278   	; 0x12c <send_char>
	send_char('l');
 62a:	8c e6       	ldi	r24, 0x6C	; 108
 62c:	7f dd       	rcall	.-1282   	; 0x12c <send_char>
	send_char(response[10]);
 62e:	8b 85       	ldd	r24, Y+11	; 0x0b
 630:	7d dd       	rcall	.-1286   	; 0x12c <send_char>
	send_char(response[12]);
 632:	8d 85       	ldd	r24, Y+13	; 0x0d
 634:	7b dd       	rcall	.-1290   	; 0x12c <send_char>
	send_char(response[13]);
 636:	8e 85       	ldd	r24, Y+14	; 0x0e
 638:	79 dd       	rcall	.-1294   	; 0x12c <send_char>
	send_char(response[15]);
 63a:	88 89       	ldd	r24, Y+16	; 0x10
 63c:	77 dd       	rcall	.-1298   	; 0x12c <send_char>
	send_char(response[16]);
 63e:	89 89       	ldd	r24, Y+17	; 0x11
 640:	75 dd       	rcall	.-1302   	; 0x12c <send_char>
	send_char('\n');
 642:	8a e0       	ldi	r24, 0x0A	; 10
 644:	73 dd       	rcall	.-1306   	; 0x12c <send_char>
 646:	ff ef       	ldi	r31, 0xFF	; 255
 648:	29 e6       	ldi	r18, 0x69	; 105
 64a:	88 e1       	ldi	r24, 0x18	; 24
 64c:	f1 50       	subi	r31, 0x01	; 1
 64e:	20 40       	sbci	r18, 0x00	; 0
 650:	80 40       	sbci	r24, 0x00	; 0
 652:	e1 f7       	brne	.-8      	; 0x64c <main+0x126>
 654:	00 c0       	rjmp	.+0      	; 0x656 <main+0x130>
 656:	00 00       	nop
	i = 0;
	_delay_ms(500);
	while(received_data_available())
 658:	70 dd       	rcall	.-1312   	; 0x13a <received_data_available>
 65a:	88 23       	and	r24, r24
 65c:	29 f0       	breq	.+10     	; 0x668 <main+0x142>
	{
		response[i] = receive_char();
 65e:	76 dd       	rcall	.-1300   	; 0x14c <receive_char>
 660:	f8 01       	movw	r30, r16
 662:	81 93       	st	Z+, r24
 664:	8f 01       	movw	r16, r30
 666:	f8 cf       	rjmp	.-16     	; 0x658 <main+0x132>
		i++;
	}
	if(response[0] == 'O' && response[1] == 'K')
 668:	89 81       	ldd	r24, Y+1	; 0x01
 66a:	8f 34       	cpi	r24, 0x4F	; 79
 66c:	39 f4       	brne	.+14     	; 0x67c <main+0x156>
 66e:	8a 81       	ldd	r24, Y+2	; 0x02
 670:	8b 34       	cpi	r24, 0x4B	; 75
 672:	61 f4       	brne	.+24     	; 0x68c <main+0x166>
	}
}

void set_led0(unsigned int user)
{
	led_values_temp[6] = user;
 674:	8f ef       	ldi	r24, 0xFF	; 255
 676:	80 93 0c 01 	sts	0x010C, r24
 67a:	08 c0       	rjmp	.+16     	; 0x68c <main+0x166>
	{	
		set_led('0', 255);
	}
	if(response[0] == 'A' && response[1] == 'T')
 67c:	81 34       	cpi	r24, 0x41	; 65
 67e:	31 f4       	brne	.+12     	; 0x68c <main+0x166>
 680:	8a 81       	ldd	r24, Y+2	; 0x02
 682:	84 35       	cpi	r24, 0x54	; 84
 684:	19 f4       	brne	.+6      	; 0x68c <main+0x166>
}

void set_led1(unsigned int user)
{
	led_values_temp[7] = user;
 686:	8f ef       	ldi	r24, 0xFF	; 255
 688:	80 93 0d 01 	sts	0x010D, r24
	{	
		set_led('1', 255);
	}
	send_char('A');
 68c:	81 e4       	ldi	r24, 0x41	; 65
 68e:	4e dd       	rcall	.-1380   	; 0x12c <send_char>
	send_char('T');
 690:	84 e5       	ldi	r24, 0x54	; 84
 692:	4c dd       	rcall	.-1384   	; 0x12c <send_char>
	send_char('Z');
 694:	8a e5       	ldi	r24, 0x5A	; 90
 696:	4a dd       	rcall	.-1388   	; 0x12c <send_char>
	send_char('\n');
 698:	8a e0       	ldi	r24, 0x0A	; 10
 69a:	48 dd       	rcall	.-1392   	; 0x12c <send_char>
	
	while(1);
 69c:	ff cf       	rjmp	.-2      	; 0x69c <main+0x176>

0000069e <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 69e:	98 2f       	mov	r25, r24
 6a0:	97 30       	cpi	r25, 0x07	; 7
 6a2:	58 f5       	brcc	.+86     	; 0x6fa <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 6a4:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
 6a8:	98 17       	cp	r25, r24
 6aa:	39 f0       	breq	.+14     	; 0x6ba <Endpoint_ConfigureEndpoint_Prv+0x1c>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
 6ac:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
 6b0:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
 6b4:	50 91 f0 00 	lds	r21, 0x00F0
 6b8:	03 c0       	rjmp	.+6      	; 0x6c0 <Endpoint_ConfigureEndpoint_Prv+0x22>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
 6ba:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
 6bc:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
 6be:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
 6c0:	21 ff       	sbrs	r18, 1
 6c2:	19 c0       	rjmp	.+50     	; 0x6f6 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
 6c4:	30 91 eb 00 	lds	r19, 0x00EB
 6c8:	3e 7f       	andi	r19, 0xFE	; 254
 6ca:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
 6ce:	30 91 ed 00 	lds	r19, 0x00ED
 6d2:	3d 7f       	andi	r19, 0xFD	; 253
 6d4:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 6d8:	30 91 eb 00 	lds	r19, 0x00EB
 6dc:	31 60       	ori	r19, 0x01	; 1
 6de:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
 6e2:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
 6e6:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
 6ea:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 6ee:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
 6f2:	27 ff       	sbrs	r18, 7
 6f4:	07 c0       	rjmp	.+14     	; 0x704 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 6f6:	9f 5f       	subi	r25, 0xFF	; 255
 6f8:	d3 cf       	rjmp	.-90     	; 0x6a0 <Endpoint_ConfigureEndpoint_Prv+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 6fa:	8f 70       	andi	r24, 0x0F	; 15
 6fc:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
 700:	81 e0       	ldi	r24, 0x01	; 1
 702:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
 704:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
 706:	08 95       	ret

00000708 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 708:	0f 93       	push	r16
 70a:	1f 93       	push	r17
 70c:	cf 93       	push	r28
 70e:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 710:	4b d0       	rcall	.+150    	; 0x7a8 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 712:	52 d0       	rcall	.+164    	; 0x7b8 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 714:	c8 ed       	ldi	r28, 0xD8	; 216
 716:	d0 e0       	ldi	r29, 0x00	; 0
 718:	88 81       	ld	r24, Y
 71a:	8f 77       	andi	r24, 0x7F	; 127
 71c:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
 71e:	88 81       	ld	r24, Y
 720:	80 68       	ori	r24, 0x80	; 128
 722:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 724:	88 81       	ld	r24, Y
 726:	8f 7d       	andi	r24, 0xDF	; 223
 728:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 72a:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 72c:	10 92 2e 03 	sts	0x032E, r1
	USB_Device_ConfigurationNumber  = 0;
 730:	10 92 2a 03 	sts	0x032A, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 734:	10 92 2c 03 	sts	0x032C, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 738:	10 92 2b 03 	sts	0x032B, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 73c:	00 ee       	ldi	r16, 0xE0	; 224
 73e:	10 e0       	ldi	r17, 0x00	; 0
 740:	f8 01       	movw	r30, r16
 742:	80 81       	ld	r24, Z
 744:	8b 7f       	andi	r24, 0xFB	; 251
 746:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 748:	88 81       	ld	r24, Y
 74a:	81 60       	ori	r24, 0x01	; 1
 74c:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 74e:	42 e0       	ldi	r20, 0x02	; 2
 750:	60 e0       	ldi	r22, 0x00	; 0
 752:	80 e0       	ldi	r24, 0x00	; 0
 754:	a4 df       	rcall	.-184    	; 0x69e <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 756:	e1 ee       	ldi	r30, 0xE1	; 225
 758:	f0 e0       	ldi	r31, 0x00	; 0
 75a:	80 81       	ld	r24, Z
 75c:	8e 7f       	andi	r24, 0xFE	; 254
 75e:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 760:	e2 ee       	ldi	r30, 0xE2	; 226
 762:	f0 e0       	ldi	r31, 0x00	; 0
 764:	80 81       	ld	r24, Z
 766:	81 60       	ori	r24, 0x01	; 1
 768:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 76a:	80 81       	ld	r24, Z
 76c:	88 60       	ori	r24, 0x08	; 8
 76e:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 770:	f8 01       	movw	r30, r16
 772:	80 81       	ld	r24, Z
 774:	8e 7f       	andi	r24, 0xFE	; 254
 776:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
 778:	88 81       	ld	r24, Y
 77a:	80 61       	ori	r24, 0x10	; 16
 77c:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 77e:	df 91       	pop	r29
 780:	cf 91       	pop	r28
 782:	1f 91       	pop	r17
 784:	0f 91       	pop	r16
 786:	08 95       	ret

00000788 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
 788:	e8 ed       	ldi	r30, 0xD8	; 216
 78a:	f0 e0       	ldi	r31, 0x00	; 0
 78c:	80 81       	ld	r24, Z
 78e:	8f 7e       	andi	r24, 0xEF	; 239
 790:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
 792:	e7 ed       	ldi	r30, 0xD7	; 215
 794:	f0 e0       	ldi	r31, 0x00	; 0
 796:	80 81       	ld	r24, Z
 798:	81 60       	ori	r24, 0x01	; 1
 79a:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
 79c:	84 e0       	ldi	r24, 0x04	; 4
 79e:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 7a0:	81 e0       	ldi	r24, 0x01	; 1
 7a2:	80 93 2d 03 	sts	0x032D, r24

	USB_ResetInterface();
 7a6:	b0 cf       	rjmp	.-160    	; 0x708 <USB_ResetInterface>

000007a8 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
 7a8:	e8 ed       	ldi	r30, 0xD8	; 216
 7aa:	f0 e0       	ldi	r31, 0x00	; 0
 7ac:	80 81       	ld	r24, Z
 7ae:	8e 7f       	andi	r24, 0xFE	; 254
 7b0:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 7b2:	10 92 e2 00 	sts	0x00E2, r1
 7b6:	08 95       	ret

000007b8 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 7b8:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 7bc:	10 92 e1 00 	sts	0x00E1, r1
 7c0:	08 95       	ret

000007c2 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 7c2:	1f 92       	push	r1
 7c4:	0f 92       	push	r0
 7c6:	0f b6       	in	r0, 0x3f	; 63
 7c8:	0f 92       	push	r0
 7ca:	11 24       	eor	r1, r1
 7cc:	2f 93       	push	r18
 7ce:	3f 93       	push	r19
 7d0:	4f 93       	push	r20
 7d2:	5f 93       	push	r21
 7d4:	6f 93       	push	r22
 7d6:	7f 93       	push	r23
 7d8:	8f 93       	push	r24
 7da:	9f 93       	push	r25
 7dc:	af 93       	push	r26
 7de:	bf 93       	push	r27
 7e0:	ef 93       	push	r30
 7e2:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 7e4:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 7e8:	82 ff       	sbrs	r24, 2
 7ea:	0a c0       	rjmp	.+20     	; 0x800 <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 7ec:	80 91 e2 00 	lds	r24, 0x00E2
 7f0:	82 ff       	sbrs	r24, 2
 7f2:	06 c0       	rjmp	.+12     	; 0x800 <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 7f4:	80 91 e1 00 	lds	r24, 0x00E1
 7f8:	8b 7f       	andi	r24, 0xFB	; 251
 7fa:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 7fe:	a7 d0       	rcall	.+334    	; 0x94e <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 800:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 804:	80 ff       	sbrs	r24, 0
 806:	1d c0       	rjmp	.+58     	; 0x842 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 808:	80 91 d8 00 	lds	r24, 0x00D8
 80c:	80 ff       	sbrs	r24, 0
 80e:	19 c0       	rjmp	.+50     	; 0x842 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 810:	80 91 da 00 	lds	r24, 0x00DA
 814:	8e 7f       	andi	r24, 0xFE	; 254
 816:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 81a:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 81e:	80 ff       	sbrs	r24, 0
 820:	0c c0       	rjmp	.+24     	; 0x83a <__vector_10+0x78>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 822:	80 e1       	ldi	r24, 0x10	; 16
 824:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 826:	82 e1       	ldi	r24, 0x12	; 18
 828:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 82a:	09 b4       	in	r0, 0x29	; 41
 82c:	00 fe       	sbrs	r0, 0
 82e:	fd cf       	rjmp	.-6      	; 0x82a <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 830:	81 e0       	ldi	r24, 0x01	; 1
 832:	80 93 2e 03 	sts	0x032E, r24
			EVENT_USB_Device_Connect();
 836:	8b d0       	rcall	.+278    	; 0x94e <USB_Event_Stub>
 838:	04 c0       	rjmp	.+8      	; 0x842 <__vector_10+0x80>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 83a:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 83c:	10 92 2e 03 	sts	0x032E, r1
			EVENT_USB_Device_Disconnect();
 840:	86 d0       	rcall	.+268    	; 0x94e <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 842:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 846:	80 ff       	sbrs	r24, 0
 848:	18 c0       	rjmp	.+48     	; 0x87a <__vector_10+0xb8>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 84a:	80 91 e2 00 	lds	r24, 0x00E2
 84e:	80 ff       	sbrs	r24, 0
 850:	14 c0       	rjmp	.+40     	; 0x87a <__vector_10+0xb8>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 852:	80 91 e2 00 	lds	r24, 0x00E2
 856:	8e 7f       	andi	r24, 0xFE	; 254
 858:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 85c:	80 91 e2 00 	lds	r24, 0x00E2
 860:	80 61       	ori	r24, 0x10	; 16
 862:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 866:	80 91 d8 00 	lds	r24, 0x00D8
 86a:	80 62       	ori	r24, 0x20	; 32
 86c:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 870:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 872:	85 e0       	ldi	r24, 0x05	; 5
 874:	80 93 2e 03 	sts	0x032E, r24
		EVENT_USB_Device_Suspend();
 878:	6a d0       	rcall	.+212    	; 0x94e <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 87a:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 87e:	84 ff       	sbrs	r24, 4
 880:	2f c0       	rjmp	.+94     	; 0x8e0 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 882:	80 91 e2 00 	lds	r24, 0x00E2
 886:	84 ff       	sbrs	r24, 4
 888:	2b c0       	rjmp	.+86     	; 0x8e0 <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 88a:	80 e1       	ldi	r24, 0x10	; 16
 88c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 88e:	82 e1       	ldi	r24, 0x12	; 18
 890:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 892:	09 b4       	in	r0, 0x29	; 41
 894:	00 fe       	sbrs	r0, 0
 896:	fd cf       	rjmp	.-6      	; 0x892 <__vector_10+0xd0>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 898:	80 91 d8 00 	lds	r24, 0x00D8
 89c:	8f 7d       	andi	r24, 0xDF	; 223
 89e:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 8a2:	80 91 e1 00 	lds	r24, 0x00E1
 8a6:	8f 7e       	andi	r24, 0xEF	; 239
 8a8:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 8ac:	80 91 e2 00 	lds	r24, 0x00E2
 8b0:	8f 7e       	andi	r24, 0xEF	; 239
 8b2:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 8b6:	80 91 e2 00 	lds	r24, 0x00E2
 8ba:	81 60       	ori	r24, 0x01	; 1
 8bc:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 8c0:	80 91 2a 03 	lds	r24, 0x032A
 8c4:	88 23       	and	r24, r24
 8c6:	11 f0       	breq	.+4      	; 0x8cc <__vector_10+0x10a>
		  USB_DeviceState = DEVICE_STATE_Configured;
 8c8:	84 e0       	ldi	r24, 0x04	; 4
 8ca:	07 c0       	rjmp	.+14     	; 0x8da <__vector_10+0x118>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 8cc:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 8d0:	87 fd       	sbrc	r24, 7
 8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <__vector_10+0x116>
 8d4:	81 e0       	ldi	r24, 0x01	; 1
 8d6:	01 c0       	rjmp	.+2      	; 0x8da <__vector_10+0x118>
 8d8:	83 e0       	ldi	r24, 0x03	; 3
 8da:	80 93 2e 03 	sts	0x032E, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 8de:	37 d0       	rcall	.+110    	; 0x94e <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 8e0:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 8e4:	83 ff       	sbrs	r24, 3
 8e6:	22 c0       	rjmp	.+68     	; 0x92c <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 8e8:	80 91 e2 00 	lds	r24, 0x00E2
 8ec:	83 ff       	sbrs	r24, 3
 8ee:	1e c0       	rjmp	.+60     	; 0x92c <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 8f0:	80 91 e1 00 	lds	r24, 0x00E1
 8f4:	87 7f       	andi	r24, 0xF7	; 247
 8f6:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 8fa:	82 e0       	ldi	r24, 0x02	; 2
 8fc:	80 93 2e 03 	sts	0x032E, r24
		USB_Device_ConfigurationNumber = 0;
 900:	10 92 2a 03 	sts	0x032A, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 904:	80 91 e1 00 	lds	r24, 0x00E1
 908:	8e 7f       	andi	r24, 0xFE	; 254
 90a:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 90e:	80 91 e2 00 	lds	r24, 0x00E2
 912:	8e 7f       	andi	r24, 0xFE	; 254
 914:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 918:	80 91 e2 00 	lds	r24, 0x00E2
 91c:	80 61       	ori	r24, 0x10	; 16
 91e:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 922:	42 e0       	ldi	r20, 0x02	; 2
 924:	60 e0       	ldi	r22, 0x00	; 0
 926:	80 e0       	ldi	r24, 0x00	; 0
 928:	ba de       	rcall	.-652    	; 0x69e <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 92a:	11 d0       	rcall	.+34     	; 0x94e <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 92c:	ff 91       	pop	r31
 92e:	ef 91       	pop	r30
 930:	bf 91       	pop	r27
 932:	af 91       	pop	r26
 934:	9f 91       	pop	r25
 936:	8f 91       	pop	r24
 938:	7f 91       	pop	r23
 93a:	6f 91       	pop	r22
 93c:	5f 91       	pop	r21
 93e:	4f 91       	pop	r20
 940:	3f 91       	pop	r19
 942:	2f 91       	pop	r18
 944:	0f 90       	pop	r0
 946:	0f be       	out	0x3f, r0	; 63
 948:	0f 90       	pop	r0
 94a:	1f 90       	pop	r1
 94c:	18 95       	reti

0000094e <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 94e:	08 95       	ret

00000950 <_exit>:
 950:	f8 94       	cli

00000952 <__stop_program>:
 952:	ff cf       	rjmp	.-2      	; 0x952 <__stop_program>
