
HummingbirdForBLE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00001dc4  00001e58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001dc4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000255  00800110  00800110  00001e68  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001e68  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e98  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000368  00000000  00000000  00001ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000062d7  00000000  00000000  00002240  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014a0  00000000  00000000  00008517  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000433b  00000000  00000000  000099b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a2c  00000000  00000000  0000dcf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000236e  00000000  00000000  0000e720  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003ded  00000000  00000000  00010a8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004e0  00000000  00000000  0001487b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b4 c0       	rjmp	.+360    	; 0x16a <__ctors_end>
       2:	00 00       	nop
       4:	ce c0       	rjmp	.+412    	; 0x1a2 <__bad_interrupt>
       6:	00 00       	nop
       8:	cc c0       	rjmp	.+408    	; 0x1a2 <__bad_interrupt>
       a:	00 00       	nop
       c:	ca c0       	rjmp	.+404    	; 0x1a2 <__bad_interrupt>
       e:	00 00       	nop
      10:	c8 c0       	rjmp	.+400    	; 0x1a2 <__bad_interrupt>
      12:	00 00       	nop
      14:	c6 c0       	rjmp	.+396    	; 0x1a2 <__bad_interrupt>
      16:	00 00       	nop
      18:	c4 c0       	rjmp	.+392    	; 0x1a2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c2 c0       	rjmp	.+388    	; 0x1a2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c0 c0       	rjmp	.+384    	; 0x1a2 <__bad_interrupt>
      22:	00 00       	nop
      24:	be c0       	rjmp	.+380    	; 0x1a2 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 8b 0a 	jmp	0x1516	; 0x1516 <__vector_10>
      2c:	ba c0       	rjmp	.+372    	; 0x1a2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b8 c0       	rjmp	.+368    	; 0x1a2 <__bad_interrupt>
      32:	00 00       	nop
      34:	b6 c0       	rjmp	.+364    	; 0x1a2 <__bad_interrupt>
      36:	00 00       	nop
      38:	b4 c0       	rjmp	.+360    	; 0x1a2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b2 c0       	rjmp	.+356    	; 0x1a2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b0 c0       	rjmp	.+352    	; 0x1a2 <__bad_interrupt>
      42:	00 00       	nop
      44:	ae c0       	rjmp	.+348    	; 0x1a2 <__bad_interrupt>
      46:	00 00       	nop
      48:	ac c0       	rjmp	.+344    	; 0x1a2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	aa c0       	rjmp	.+340    	; 0x1a2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	a8 c0       	rjmp	.+336    	; 0x1a2 <__bad_interrupt>
      52:	00 00       	nop
      54:	91 c2       	rjmp	.+1314   	; 0x578 <__vector_21>
      56:	00 00       	nop
      58:	a4 c0       	rjmp	.+328    	; 0x1a2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	bd c1       	rjmp	.+890    	; 0x3d8 <__vector_23>
      5e:	00 00       	nop
      60:	a0 c0       	rjmp	.+320    	; 0x1a2 <__bad_interrupt>
      62:	00 00       	nop
      64:	6d c1       	rjmp	.+730    	; 0x340 <__vector_25>
      66:	00 00       	nop
      68:	9c c0       	rjmp	.+312    	; 0x1a2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	9a c0       	rjmp	.+308    	; 0x1a2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	98 c0       	rjmp	.+304    	; 0x1a2 <__bad_interrupt>
      72:	00 00       	nop
      74:	96 c0       	rjmp	.+300    	; 0x1a2 <__bad_interrupt>
      76:	00 00       	nop
      78:	94 c0       	rjmp	.+296    	; 0x1a2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	92 c0       	rjmp	.+292    	; 0x1a2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	90 c0       	rjmp	.+288    	; 0x1a2 <__bad_interrupt>
      82:	00 00       	nop
      84:	8e c0       	rjmp	.+284    	; 0x1a2 <__bad_interrupt>
      86:	00 00       	nop
      88:	8c c0       	rjmp	.+280    	; 0x1a2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8a c0       	rjmp	.+276    	; 0x1a2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	88 c0       	rjmp	.+272    	; 0x1a2 <__bad_interrupt>
      92:	00 00       	nop
      94:	86 c0       	rjmp	.+268    	; 0x1a2 <__bad_interrupt>
      96:	00 00       	nop
      98:	84 c0       	rjmp	.+264    	; 0x1a2 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	82 c0       	rjmp	.+260    	; 0x1a2 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	80 c0       	rjmp	.+256    	; 0x1a2 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	7e c0       	rjmp	.+252    	; 0x1a2 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	7c c0       	rjmp	.+248    	; 0x1a2 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	78 0b       	sbc	r23, r24
      ae:	9a 0b       	sbc	r25, r26
      b0:	81 0c       	add	r8, r1
      b2:	9a 0b       	sbc	r25, r26
      b4:	81 0c       	add	r8, r1
      b6:	df 0b       	sbc	r29, r31
      b8:	01 0c       	add	r0, r1
      ba:	81 0c       	add	r8, r1
      bc:	53 0c       	add	r5, r3
      be:	65 0c       	add	r6, r5

000000c0 <ProductString>:
      c0:	20 03 48 00 75 00 6d 00 6d 00 69 00 6e 00 67 00      .H.u.m.m.i.n.g.
      d0:	62 00 69 00 72 00 64 00 20 00 44 00 75 00 6f 00     b.i.r.d. .D.u.o.
      e0:	00 00                                               ..

000000e2 <ManufacturerString>:
      e2:	2e 03 42 00 69 00 72 00 64 00 42 00 72 00 61 00     ..B.i.r.d.B.r.a.
      f2:	69 00 6e 00 20 00 54 00 65 00 63 00 68 00 6e 00     i.n. .T.e.c.h.n.
     102:	6f 00 6c 00 6f 00 67 00 69 00 65 00 73 00 00 00     o.l.o.g.i.e.s...

00000112 <LanguageString>:
     112:	04 03 09 04                                         ....

00000116 <ConfigurationDescriptor>:
     116:	09 02 22 00 01 01 00 c0 fa 09 04 00 00 01 03 00     ..".............
     126:	00 00 09 21 11 01 00 01 22 20 00 07 05 81 03 08     ...!...." ......
     136:	00 01                                               ..

00000138 <DeviceDescriptor>:
     138:	12 01 10 01 00 00 00 08 54 23 22 22 00 02 01 02     ........T#""....
     148:	00 01                                               ..

0000014a <GenericReport>:
     14a:	06 00 ff 09 01 a1 01 09 02 15 00 25 ff 75 08 95     ...........%.u..
     15a:	08 81 02 09 03 15 00 25 ff 75 08 95 08 91 02 c0     .......%.u......

0000016a <__ctors_end>:
     16a:	11 24       	eor	r1, r1
     16c:	1f be       	out	0x3f, r1	; 63
     16e:	cf ef       	ldi	r28, 0xFF	; 255
     170:	da e0       	ldi	r29, 0x0A	; 10
     172:	de bf       	out	0x3e, r29	; 62
     174:	cd bf       	out	0x3d, r28	; 61

00000176 <__do_copy_data>:
     176:	11 e0       	ldi	r17, 0x01	; 1
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b1 e0       	ldi	r27, 0x01	; 1
     17c:	e4 ec       	ldi	r30, 0xC4	; 196
     17e:	fd e1       	ldi	r31, 0x1D	; 29
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x10>
     182:	05 90       	lpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	a0 31       	cpi	r26, 0x10	; 16
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0xc>

0000018c <__do_clear_bss>:
     18c:	23 e0       	ldi	r18, 0x03	; 3
     18e:	a0 e1       	ldi	r26, 0x10	; 16
     190:	b1 e0       	ldi	r27, 0x01	; 1
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	a5 36       	cpi	r26, 0x65	; 101
     198:	b2 07       	cpc	r27, r18
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	e7 d2       	rcall	.+1486   	; 0x76c <main>
     19e:	0c 94 e0 0e 	jmp	0x1dc0	; 0x1dc0 <_exit>

000001a2 <__bad_interrupt>:
     1a2:	2e cf       	rjmp	.-420    	; 0x0 <__vectors>

000001a4 <init_analog>:
	led_values_temp[8] = user;
}

void set_led3(unsigned int user)
{
	led_values_temp[9] = user;
     1a4:	80 e6       	ldi	r24, 0x60	; 96
     1a6:	80 93 7c 00 	sts	0x007C, r24
     1aa:	84 e8       	ldi	r24, 0x84	; 132
     1ac:	80 93 7a 00 	sts	0x007A, r24
     1b0:	10 92 7b 00 	sts	0x007B, r1
     1b4:	83 e7       	ldi	r24, 0x73	; 115
     1b6:	80 93 7e 00 	sts	0x007E, r24
     1ba:	08 95       	ret

000001bc <read_sensor>:
     1bc:	80 93 7c 00 	sts	0x007C, r24
     1c0:	80 91 7a 00 	lds	r24, 0x007A
     1c4:	80 64       	ori	r24, 0x40	; 64
     1c6:	80 93 7a 00 	sts	0x007A, r24
     1ca:	80 91 7a 00 	lds	r24, 0x007A
     1ce:	86 fd       	sbrc	r24, 6
     1d0:	fc cf       	rjmp	.-8      	; 0x1ca <read_sensor+0xe>
     1d2:	80 91 7a 00 	lds	r24, 0x007A
     1d6:	80 61       	ori	r24, 0x10	; 16
     1d8:	80 93 7a 00 	sts	0x007A, r24
     1dc:	80 91 79 00 	lds	r24, 0x0079
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	08 95       	ret

000001e4 <init_tiny_comm>:
     1e4:	84 b1       	in	r24, 0x04	; 4
     1e6:	86 61       	ori	r24, 0x16	; 22
     1e8:	84 b9       	out	0x04, r24	; 4
     1ea:	85 e5       	ldi	r24, 0x55	; 85
     1ec:	8c bd       	out	0x2c, r24	; 44
     1ee:	2c 9a       	sbi	0x05, 4	; 5
     1f0:	08 95       	ret

000001f2 <transmitByteToTiny>:
     1f2:	2c 98       	cbi	0x05, 4	; 5
     1f4:	9a e6       	ldi	r25, 0x6A	; 106
     1f6:	9a 95       	dec	r25
     1f8:	f1 f7       	brne	.-4      	; 0x1f6 <transmitByteToTiny+0x4>
     1fa:	00 c0       	rjmp	.+0      	; 0x1fc <transmitByteToTiny+0xa>
     1fc:	8e bd       	out	0x2e, r24	; 46
     1fe:	0d b4       	in	r0, 0x2d	; 45
     200:	07 fe       	sbrs	r0, 7
     202:	fd cf       	rjmp	.-6      	; 0x1fe <transmitByteToTiny+0xc>
     204:	85 ed       	ldi	r24, 0xD5	; 213
     206:	8a 95       	dec	r24
     208:	f1 f7       	brne	.-4      	; 0x206 <transmitByteToTiny+0x14>
     20a:	00 00       	nop
     20c:	2c 9a       	sbi	0x05, 4	; 5
     20e:	08 95       	ret

00000210 <turn_off_motors>:
     210:	8e ef       	ldi	r24, 0xFE	; 254
     212:	ef cf       	rjmp	.-34     	; 0x1f2 <transmitByteToTiny>

00000214 <set_motor>:
     214:	0f 93       	push	r16
     216:	1f 93       	push	r17
     218:	cf 93       	push	r28
     21a:	df 93       	push	r29
     21c:	1f 92       	push	r1
     21e:	cd b7       	in	r28, 0x3d	; 61
     220:	de b7       	in	r29, 0x3e	; 62
     222:	18 2f       	mov	r17, r24
     224:	04 2f       	mov	r16, r20
     226:	94 e0       	ldi	r25, 0x04	; 4
     228:	98 0f       	add	r25, r24
     22a:	86 2f       	mov	r24, r22
     22c:	88 0f       	add	r24, r24
     22e:	89 0f       	add	r24, r25
     230:	69 83       	std	Y+1, r22	; 0x01
     232:	df df       	rcall	.-66     	; 0x1f2 <transmitByteToTiny>
     234:	87 ec       	ldi	r24, 0xC7	; 199
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	01 97       	sbiw	r24, 0x01	; 1
     23a:	f1 f7       	brne	.-4      	; 0x238 <set_motor+0x24>
     23c:	00 c0       	rjmp	.+0      	; 0x23e <set_motor+0x2a>
     23e:	00 00       	nop
     240:	80 2f       	mov	r24, r16
     242:	d7 df       	rcall	.-82     	; 0x1f2 <transmitByteToTiny>
     244:	e1 2f       	mov	r30, r17
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	df 01       	movw	r26, r30
     24a:	aa 0f       	add	r26, r26
     24c:	bb 1f       	adc	r27, r27
     24e:	ac 5c       	subi	r26, 0xCC	; 204
     250:	be 4f       	sbci	r27, 0xFE	; 254
     252:	69 81       	ldd	r22, Y+1	; 0x01
     254:	6c 93       	st	X, r22
     256:	11 96       	adiw	r26, 0x01	; 1
     258:	0c 93       	st	X, r16
     25a:	ee 5c       	subi	r30, 0xCE	; 206
     25c:	fe 4f       	sbci	r31, 0xFE	; 254
     25e:	80 2f       	mov	r24, r16
     260:	86 95       	lsr	r24
     262:	61 11       	cpse	r22, r1
     264:	80 58       	subi	r24, 0x80	; 128
     266:	80 83       	st	Z, r24
     268:	0f 90       	pop	r0
     26a:	df 91       	pop	r29
     26c:	cf 91       	pop	r28
     26e:	1f 91       	pop	r17
     270:	0f 91       	pop	r16
     272:	08 95       	ret

00000274 <disable_servos>:
     274:	8f ef       	ldi	r24, 0xFF	; 255
     276:	bd cf       	rjmp	.-134    	; 0x1f2 <transmitByteToTiny>

00000278 <set_servo>:
     278:	cf 93       	push	r28
     27a:	df 93       	push	r29
     27c:	c8 2f       	mov	r28, r24
     27e:	d6 2f       	mov	r29, r22
     280:	b8 df       	rcall	.-144    	; 0x1f2 <transmitByteToTiny>
     282:	87 ec       	ldi	r24, 0xC7	; 199
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	01 97       	sbiw	r24, 0x01	; 1
     288:	f1 f7       	brne	.-4      	; 0x286 <set_servo+0xe>
     28a:	00 c0       	rjmp	.+0      	; 0x28c <set_servo+0x14>
     28c:	00 00       	nop
     28e:	8d 2f       	mov	r24, r29
     290:	b0 df       	rcall	.-160    	; 0x1f2 <transmitByteToTiny>
     292:	ec 2f       	mov	r30, r28
     294:	f0 e0       	ldi	r31, 0x00	; 0
     296:	e2 5d       	subi	r30, 0xD2	; 210
     298:	fe 4f       	sbci	r31, 0xFE	; 254
     29a:	d0 83       	st	Z, r29
     29c:	df 91       	pop	r29
     29e:	cf 91       	pop	r28
     2a0:	08 95       	ret

000002a2 <serial_init>:
     2a2:	82 e0       	ldi	r24, 0x02	; 2
     2a4:	80 93 c8 00 	sts	0x00C8, r24
     2a8:	88 e9       	ldi	r24, 0x98	; 152
     2aa:	80 93 c9 00 	sts	0x00C9, r24
     2ae:	86 e0       	ldi	r24, 0x06	; 6
     2b0:	80 93 ca 00 	sts	0x00CA, r24
     2b4:	10 92 56 03 	sts	0x0356, r1
     2b8:	10 92 57 03 	sts	0x0357, r1
     2bc:	80 e1       	ldi	r24, 0x10	; 16
     2be:	80 93 cc 00 	sts	0x00CC, r24
     2c2:	08 95       	ret

000002c4 <send_char>:
     2c4:	90 91 c8 00 	lds	r25, 0x00C8
     2c8:	95 ff       	sbrs	r25, 5
     2ca:	fc cf       	rjmp	.-8      	; 0x2c4 <send_char>
     2cc:	80 93 ce 00 	sts	0x00CE, r24
     2d0:	08 95       	ret

000002d2 <received_data_available>:
     2d2:	20 91 56 03 	lds	r18, 0x0356
     2d6:	90 91 57 03 	lds	r25, 0x0357
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	29 13       	cpse	r18, r25
     2de:	01 c0       	rjmp	.+2      	; 0x2e2 <received_data_available+0x10>
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	08 95       	ret

000002e4 <send_sensors>:
     2e4:	85 e0       	ldi	r24, 0x05	; 5
     2e6:	ee df       	rcall	.-36     	; 0x2c4 <send_char>
     2e8:	86 e6       	ldi	r24, 0x66	; 102
     2ea:	68 df       	rcall	.-304    	; 0x1bc <read_sensor>
     2ec:	eb df       	rcall	.-42     	; 0x2c4 <send_char>
     2ee:	85 e6       	ldi	r24, 0x65	; 101
     2f0:	65 df       	rcall	.-310    	; 0x1bc <read_sensor>
     2f2:	e8 df       	rcall	.-48     	; 0x2c4 <send_char>
     2f4:	84 e6       	ldi	r24, 0x64	; 100
     2f6:	62 df       	rcall	.-316    	; 0x1bc <read_sensor>
     2f8:	e5 df       	rcall	.-54     	; 0x2c4 <send_char>
     2fa:	81 e6       	ldi	r24, 0x61	; 97
     2fc:	5f df       	rcall	.-322    	; 0x1bc <read_sensor>
     2fe:	e2 df       	rcall	.-60     	; 0x2c4 <send_char>
     300:	80 e6       	ldi	r24, 0x60	; 96
     302:	5c df       	rcall	.-328    	; 0x1bc <read_sensor>
     304:	df cf       	rjmp	.-66     	; 0x2c4 <send_char>

00000306 <receive_char>:
     306:	a7 e5       	ldi	r26, 0x57	; 87
     308:	b3 e0       	ldi	r27, 0x03	; 3
     30a:	ec 91       	ld	r30, X
     30c:	f0 e0       	ldi	r31, 0x00	; 0
     30e:	ea 5a       	subi	r30, 0xAA	; 170
     310:	fd 4f       	sbci	r31, 0xFD	; 253
     312:	80 81       	ld	r24, Z
     314:	9c 91       	ld	r25, X
     316:	9f 5f       	subi	r25, 0xFF	; 255
     318:	9c 93       	st	X, r25
     31a:	08 95       	ret

0000031c <store_received_serial_data>:
     31c:	80 91 56 03 	lds	r24, 0x0356
     320:	8f 5f       	subi	r24, 0xFF	; 255
     322:	20 91 57 03 	lds	r18, 0x0357
     326:	90 91 ce 00 	lds	r25, 0x00CE
     32a:	82 17       	cp	r24, r18
     32c:	41 f0       	breq	.+16     	; 0x33e <store_received_serial_data+0x22>
     32e:	e0 91 56 03 	lds	r30, 0x0356
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	ea 5a       	subi	r30, 0xAA	; 170
     336:	fd 4f       	sbci	r31, 0xFD	; 253
     338:	90 83       	st	Z, r25
     33a:	80 93 56 03 	sts	0x0356, r24
     33e:	08 95       	ret

00000340 <__vector_25>:
     340:	1f 92       	push	r1
     342:	0f 92       	push	r0
     344:	0f b6       	in	r0, 0x3f	; 63
     346:	0f 92       	push	r0
     348:	11 24       	eor	r1, r1
     34a:	2f 93       	push	r18
     34c:	3f 93       	push	r19
     34e:	4f 93       	push	r20
     350:	5f 93       	push	r21
     352:	6f 93       	push	r22
     354:	7f 93       	push	r23
     356:	8f 93       	push	r24
     358:	9f 93       	push	r25
     35a:	af 93       	push	r26
     35c:	bf 93       	push	r27
     35e:	ef 93       	push	r30
     360:	ff 93       	push	r31
     362:	dc df       	rcall	.-72     	; 0x31c <store_received_serial_data>
     364:	ff 91       	pop	r31
     366:	ef 91       	pop	r30
     368:	bf 91       	pop	r27
     36a:	af 91       	pop	r26
     36c:	9f 91       	pop	r25
     36e:	8f 91       	pop	r24
     370:	7f 91       	pop	r23
     372:	6f 91       	pop	r22
     374:	5f 91       	pop	r21
     376:	4f 91       	pop	r20
     378:	3f 91       	pop	r19
     37a:	2f 91       	pop	r18
     37c:	0f 90       	pop	r0
     37e:	0f be       	out	0x3f, r0	; 63
     380:	0f 90       	pop	r0
     382:	1f 90       	pop	r1
     384:	18 95       	reti

00000386 <set_vibration_motor>:
     386:	26 2f       	mov	r18, r22
     388:	30 e0       	ldi	r19, 0x00	; 0
     38a:	80 33       	cpi	r24, 0x30	; 48
     38c:	39 f4       	brne	.+14     	; 0x39c <set_vibration_motor+0x16>
     38e:	30 93 89 00 	sts	0x0089, r19
     392:	20 93 88 00 	sts	0x0088, r18
     396:	60 93 2c 01 	sts	0x012C, r22
     39a:	08 95       	ret
     39c:	30 93 8b 00 	sts	0x008B, r19
     3a0:	20 93 8a 00 	sts	0x008A, r18
     3a4:	60 93 2d 01 	sts	0x012D, r22
     3a8:	08 95       	ret

000003aa <disable_vibration_motors>:
     3aa:	10 92 89 00 	sts	0x0089, r1
     3ae:	10 92 88 00 	sts	0x0088, r1
     3b2:	10 92 8b 00 	sts	0x008B, r1
     3b6:	10 92 8a 00 	sts	0x008A, r1
     3ba:	ec e2       	ldi	r30, 0x2C	; 44
     3bc:	f1 e0       	ldi	r31, 0x01	; 1
     3be:	10 82       	st	Z, r1
     3c0:	11 82       	std	Z+1, r1	; 0x01
     3c2:	08 95       	ret

000003c4 <init_vbr>:
     3c4:	81 ea       	ldi	r24, 0xA1	; 161
     3c6:	80 93 80 00 	sts	0x0080, r24
     3ca:	89 e0       	ldi	r24, 0x09	; 9
     3cc:	80 93 81 00 	sts	0x0081, r24
     3d0:	84 b1       	in	r24, 0x04	; 4
     3d2:	80 66       	ori	r24, 0x60	; 96
     3d4:	84 b9       	out	0x04, r24	; 4
     3d6:	e9 cf       	rjmp	.-46     	; 0x3aa <disable_vibration_motors>

000003d8 <__vector_23>:
     3d8:	1f 92       	push	r1
     3da:	0f 92       	push	r0
     3dc:	0f b6       	in	r0, 0x3f	; 63
     3de:	0f 92       	push	r0
     3e0:	11 24       	eor	r1, r1
     3e2:	8f 93       	push	r24
     3e4:	9f 93       	push	r25
     3e6:	af 93       	push	r26
     3e8:	bf 93       	push	r27
     3ea:	cf 93       	push	r28
     3ec:	df 93       	push	r29
     3ee:	ef 93       	push	r30
     3f0:	ff 93       	push	r31
     3f2:	80 91 14 01 	lds	r24, 0x0114
     3f6:	81 11       	cpse	r24, r1
     3f8:	24 c0       	rjmp	.+72     	; 0x442 <__vector_23+0x6a>
     3fa:	80 91 13 01 	lds	r24, 0x0113
     3fe:	85 31       	cpi	r24, 0x15	; 21
     400:	18 f0       	brcs	.+6      	; 0x408 <__vector_23+0x30>
     402:	80 93 20 01 	sts	0x0120, r24
     406:	02 c0       	rjmp	.+4      	; 0x40c <__vector_23+0x34>
     408:	10 92 20 01 	sts	0x0120, r1
     40c:	90 91 12 01 	lds	r25, 0x0112
     410:	91 11       	cpse	r25, r1
     412:	02 c0       	rjmp	.+4      	; 0x418 <__vector_23+0x40>
     414:	8f 5f       	subi	r24, 0xFF	; 255
     416:	01 c0       	rjmp	.+2      	; 0x41a <__vector_23+0x42>
     418:	81 50       	subi	r24, 0x01	; 1
     41a:	80 93 13 01 	sts	0x0113, r24
     41e:	80 91 13 01 	lds	r24, 0x0113
     422:	8e 3f       	cpi	r24, 0xFE	; 254
     424:	20 f0       	brcs	.+8      	; 0x42e <__vector_23+0x56>
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	80 93 12 01 	sts	0x0112, r24
     42c:	04 c0       	rjmp	.+8      	; 0x436 <__vector_23+0x5e>
     42e:	83 30       	cpi	r24, 0x03	; 3
     430:	10 f4       	brcc	.+4      	; 0x436 <__vector_23+0x5e>
     432:	10 92 12 01 	sts	0x0112, r1
     436:	a6 e1       	ldi	r26, 0x16	; 22
     438:	b1 e0       	ldi	r27, 0x01	; 1
     43a:	e1 e2       	ldi	r30, 0x21	; 33
     43c:	f1 e0       	ldi	r31, 0x01	; 1
     43e:	ef 01       	movw	r28, r30
     440:	06 c0       	rjmp	.+12     	; 0x44e <__vector_23+0x76>
     442:	81 30       	cpi	r24, 0x01	; 1
     444:	c1 f7       	brne	.-16     	; 0x436 <__vector_23+0x5e>
     446:	8f ef       	ldi	r24, 0xFF	; 255
     448:	80 93 20 01 	sts	0x0120, r24
     44c:	f4 cf       	rjmp	.-24     	; 0x436 <__vector_23+0x5e>
     44e:	8d 91       	ld	r24, X+
     450:	89 93       	st	Y+, r24
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	a1 32       	cpi	r26, 0x21	; 33
     456:	b8 07       	cpc	r27, r24
     458:	d1 f7       	brne	.-12     	; 0x44e <__vector_23+0x76>
     45a:	80 91 21 01 	lds	r24, 0x0121
     45e:	88 23       	and	r24, r24
     460:	11 f0       	breq	.+4      	; 0x466 <__vector_23+0x8e>
     462:	76 9a       	sbi	0x0e, 6	; 14
     464:	04 c0       	rjmp	.+8      	; 0x46e <__vector_23+0x96>
     466:	76 98       	cbi	0x0e, 6	; 14
     468:	8f ef       	ldi	r24, 0xFF	; 255
     46a:	80 93 21 01 	sts	0x0121, r24
     46e:	80 91 22 01 	lds	r24, 0x0122
     472:	88 23       	and	r24, r24
     474:	11 f0       	breq	.+4      	; 0x47a <__vector_23+0xa2>
     476:	5c 9a       	sbi	0x0b, 4	; 11
     478:	04 c0       	rjmp	.+8      	; 0x482 <__vector_23+0xaa>
     47a:	5c 98       	cbi	0x0b, 4	; 11
     47c:	8f ef       	ldi	r24, 0xFF	; 255
     47e:	80 93 22 01 	sts	0x0122, r24
     482:	80 91 23 01 	lds	r24, 0x0123
     486:	88 23       	and	r24, r24
     488:	11 f0       	breq	.+4      	; 0x48e <__vector_23+0xb6>
     48a:	5e 9a       	sbi	0x0b, 6	; 11
     48c:	04 c0       	rjmp	.+8      	; 0x496 <__vector_23+0xbe>
     48e:	5e 98       	cbi	0x0b, 6	; 11
     490:	8f ef       	ldi	r24, 0xFF	; 255
     492:	80 93 23 01 	sts	0x0123, r24
     496:	80 91 24 01 	lds	r24, 0x0124
     49a:	88 23       	and	r24, r24
     49c:	11 f0       	breq	.+4      	; 0x4a2 <__vector_23+0xca>
     49e:	46 9a       	sbi	0x08, 6	; 8
     4a0:	04 c0       	rjmp	.+8      	; 0x4aa <__vector_23+0xd2>
     4a2:	46 98       	cbi	0x08, 6	; 8
     4a4:	8f ef       	ldi	r24, 0xFF	; 255
     4a6:	80 93 24 01 	sts	0x0124, r24
     4aa:	80 91 25 01 	lds	r24, 0x0125
     4ae:	88 23       	and	r24, r24
     4b0:	11 f0       	breq	.+4      	; 0x4b6 <__vector_23+0xde>
     4b2:	5f 9a       	sbi	0x0b, 7	; 11
     4b4:	04 c0       	rjmp	.+8      	; 0x4be <__vector_23+0xe6>
     4b6:	5f 98       	cbi	0x0b, 7	; 11
     4b8:	8f ef       	ldi	r24, 0xFF	; 255
     4ba:	80 93 25 01 	sts	0x0125, r24
     4be:	80 91 26 01 	lds	r24, 0x0126
     4c2:	88 23       	and	r24, r24
     4c4:	11 f0       	breq	.+4      	; 0x4ca <__vector_23+0xf2>
     4c6:	2f 9a       	sbi	0x05, 7	; 5
     4c8:	04 c0       	rjmp	.+8      	; 0x4d2 <__vector_23+0xfa>
     4ca:	2f 98       	cbi	0x05, 7	; 5
     4cc:	8f ef       	ldi	r24, 0xFF	; 255
     4ce:	80 93 26 01 	sts	0x0126, r24
     4d2:	80 91 27 01 	lds	r24, 0x0127
     4d6:	88 23       	and	r24, r24
     4d8:	11 f0       	breq	.+4      	; 0x4de <__vector_23+0x106>
     4da:	58 9a       	sbi	0x0b, 0	; 11
     4dc:	04 c0       	rjmp	.+8      	; 0x4e6 <__vector_23+0x10e>
     4de:	58 98       	cbi	0x0b, 0	; 11
     4e0:	8f ef       	ldi	r24, 0xFF	; 255
     4e2:	80 93 27 01 	sts	0x0127, r24
     4e6:	80 91 28 01 	lds	r24, 0x0128
     4ea:	88 23       	and	r24, r24
     4ec:	11 f0       	breq	.+4      	; 0x4f2 <__vector_23+0x11a>
     4ee:	59 9a       	sbi	0x0b, 1	; 11
     4f0:	04 c0       	rjmp	.+8      	; 0x4fa <__vector_23+0x122>
     4f2:	59 98       	cbi	0x0b, 1	; 11
     4f4:	8f ef       	ldi	r24, 0xFF	; 255
     4f6:	80 93 28 01 	sts	0x0128, r24
     4fa:	80 91 29 01 	lds	r24, 0x0129
     4fe:	88 23       	and	r24, r24
     500:	11 f0       	breq	.+4      	; 0x506 <__vector_23+0x12e>
     502:	72 9a       	sbi	0x0e, 2	; 14
     504:	04 c0       	rjmp	.+8      	; 0x50e <__vector_23+0x136>
     506:	72 98       	cbi	0x0e, 2	; 14
     508:	8f ef       	ldi	r24, 0xFF	; 255
     50a:	80 93 29 01 	sts	0x0129, r24
     50e:	80 91 2a 01 	lds	r24, 0x012A
     512:	88 23       	and	r24, r24
     514:	11 f0       	breq	.+4      	; 0x51a <__vector_23+0x142>
     516:	8f 9a       	sbi	0x11, 7	; 17
     518:	04 c0       	rjmp	.+8      	; 0x522 <__vector_23+0x14a>
     51a:	8f 98       	cbi	0x11, 7	; 17
     51c:	8f ef       	ldi	r24, 0xFF	; 255
     51e:	80 93 2a 01 	sts	0x012A, r24
     522:	80 91 2b 01 	lds	r24, 0x012B
     526:	88 23       	and	r24, r24
     528:	11 f0       	breq	.+4      	; 0x52e <__vector_23+0x156>
     52a:	47 9a       	sbi	0x08, 7	; 8
     52c:	04 c0       	rjmp	.+8      	; 0x536 <__vector_23+0x15e>
     52e:	47 98       	cbi	0x08, 7	; 8
     530:	8f ef       	ldi	r24, 0xFF	; 255
     532:	80 93 2b 01 	sts	0x012B, r24
     536:	80 91 15 01 	lds	r24, 0x0115
     53a:	91 91       	ld	r25, Z+
     53c:	98 17       	cp	r25, r24
     53e:	08 f4       	brcc	.+2      	; 0x542 <__vector_23+0x16a>
     540:	89 2f       	mov	r24, r25
     542:	91 e0       	ldi	r25, 0x01	; 1
     544:	ec 32       	cpi	r30, 0x2C	; 44
     546:	f9 07       	cpc	r31, r25
     548:	c1 f7       	brne	.-16     	; 0x53a <__vector_23+0x162>
     54a:	80 93 15 01 	sts	0x0115, r24
     54e:	87 bd       	out	0x27, r24	; 39
     550:	90 91 10 01 	lds	r25, 0x0110
     554:	80 91 11 01 	lds	r24, 0x0111
     558:	89 0f       	add	r24, r25
     55a:	80 93 10 01 	sts	0x0110, r24
     55e:	ff 91       	pop	r31
     560:	ef 91       	pop	r30
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	bf 91       	pop	r27
     568:	af 91       	pop	r26
     56a:	9f 91       	pop	r25
     56c:	8f 91       	pop	r24
     56e:	0f 90       	pop	r0
     570:	0f be       	out	0x3f, r0	; 63
     572:	0f 90       	pop	r0
     574:	1f 90       	pop	r1
     576:	18 95       	reti

00000578 <__vector_21>:
     578:	1f 92       	push	r1
     57a:	0f 92       	push	r0
     57c:	0f b6       	in	r0, 0x3f	; 63
     57e:	0f 92       	push	r0
     580:	11 24       	eor	r1, r1
     582:	8f 93       	push	r24
     584:	9f 93       	push	r25
     586:	ef 93       	push	r30
     588:	ff 93       	push	r31
     58a:	80 91 15 01 	lds	r24, 0x0115
     58e:	8f 3f       	cpi	r24, 0xFF	; 255
     590:	09 f4       	brne	.+2      	; 0x594 <__vector_21+0x1c>
     592:	7a c0       	rjmp	.+244    	; 0x688 <__vector_21+0x110>
     594:	90 91 21 01 	lds	r25, 0x0121
     598:	98 13       	cpse	r25, r24
     59a:	04 c0       	rjmp	.+8      	; 0x5a4 <__vector_21+0x2c>
     59c:	76 98       	cbi	0x0e, 6	; 14
     59e:	8f ef       	ldi	r24, 0xFF	; 255
     5a0:	80 93 21 01 	sts	0x0121, r24
     5a4:	90 91 22 01 	lds	r25, 0x0122
     5a8:	80 91 15 01 	lds	r24, 0x0115
     5ac:	98 13       	cpse	r25, r24
     5ae:	04 c0       	rjmp	.+8      	; 0x5b8 <__vector_21+0x40>
     5b0:	5c 98       	cbi	0x0b, 4	; 11
     5b2:	8f ef       	ldi	r24, 0xFF	; 255
     5b4:	80 93 22 01 	sts	0x0122, r24
     5b8:	90 91 23 01 	lds	r25, 0x0123
     5bc:	80 91 15 01 	lds	r24, 0x0115
     5c0:	98 13       	cpse	r25, r24
     5c2:	04 c0       	rjmp	.+8      	; 0x5cc <__vector_21+0x54>
     5c4:	5e 98       	cbi	0x0b, 6	; 11
     5c6:	8f ef       	ldi	r24, 0xFF	; 255
     5c8:	80 93 23 01 	sts	0x0123, r24
     5cc:	90 91 24 01 	lds	r25, 0x0124
     5d0:	80 91 15 01 	lds	r24, 0x0115
     5d4:	98 13       	cpse	r25, r24
     5d6:	04 c0       	rjmp	.+8      	; 0x5e0 <__vector_21+0x68>
     5d8:	46 98       	cbi	0x08, 6	; 8
     5da:	8f ef       	ldi	r24, 0xFF	; 255
     5dc:	80 93 24 01 	sts	0x0124, r24
     5e0:	90 91 25 01 	lds	r25, 0x0125
     5e4:	80 91 15 01 	lds	r24, 0x0115
     5e8:	98 13       	cpse	r25, r24
     5ea:	04 c0       	rjmp	.+8      	; 0x5f4 <__vector_21+0x7c>
     5ec:	5f 98       	cbi	0x0b, 7	; 11
     5ee:	8f ef       	ldi	r24, 0xFF	; 255
     5f0:	80 93 25 01 	sts	0x0125, r24
     5f4:	90 91 26 01 	lds	r25, 0x0126
     5f8:	80 91 15 01 	lds	r24, 0x0115
     5fc:	98 13       	cpse	r25, r24
     5fe:	04 c0       	rjmp	.+8      	; 0x608 <__vector_21+0x90>
     600:	2f 98       	cbi	0x05, 7	; 5
     602:	8f ef       	ldi	r24, 0xFF	; 255
     604:	80 93 26 01 	sts	0x0126, r24
     608:	90 91 27 01 	lds	r25, 0x0127
     60c:	80 91 15 01 	lds	r24, 0x0115
     610:	98 13       	cpse	r25, r24
     612:	04 c0       	rjmp	.+8      	; 0x61c <__vector_21+0xa4>
     614:	58 98       	cbi	0x0b, 0	; 11
     616:	8f ef       	ldi	r24, 0xFF	; 255
     618:	80 93 27 01 	sts	0x0127, r24
     61c:	90 91 28 01 	lds	r25, 0x0128
     620:	80 91 15 01 	lds	r24, 0x0115
     624:	98 13       	cpse	r25, r24
     626:	04 c0       	rjmp	.+8      	; 0x630 <__vector_21+0xb8>
     628:	59 98       	cbi	0x0b, 1	; 11
     62a:	8f ef       	ldi	r24, 0xFF	; 255
     62c:	80 93 28 01 	sts	0x0128, r24
     630:	90 91 29 01 	lds	r25, 0x0129
     634:	80 91 15 01 	lds	r24, 0x0115
     638:	98 13       	cpse	r25, r24
     63a:	04 c0       	rjmp	.+8      	; 0x644 <__vector_21+0xcc>
     63c:	72 98       	cbi	0x0e, 2	; 14
     63e:	8f ef       	ldi	r24, 0xFF	; 255
     640:	80 93 29 01 	sts	0x0129, r24
     644:	90 91 2a 01 	lds	r25, 0x012A
     648:	80 91 15 01 	lds	r24, 0x0115
     64c:	98 13       	cpse	r25, r24
     64e:	04 c0       	rjmp	.+8      	; 0x658 <__vector_21+0xe0>
     650:	8f 98       	cbi	0x11, 7	; 17
     652:	8f ef       	ldi	r24, 0xFF	; 255
     654:	80 93 2a 01 	sts	0x012A, r24
     658:	90 91 2b 01 	lds	r25, 0x012B
     65c:	80 91 15 01 	lds	r24, 0x0115
     660:	98 13       	cpse	r25, r24
     662:	04 c0       	rjmp	.+8      	; 0x66c <__vector_21+0xf4>
     664:	47 98       	cbi	0x08, 7	; 8
     666:	8f ef       	ldi	r24, 0xFF	; 255
     668:	80 93 2b 01 	sts	0x012B, r24
     66c:	e1 e2       	ldi	r30, 0x21	; 33
     66e:	f1 e0       	ldi	r31, 0x01	; 1
     670:	8f ef       	ldi	r24, 0xFF	; 255
     672:	91 91       	ld	r25, Z+
     674:	98 17       	cp	r25, r24
     676:	08 f4       	brcc	.+2      	; 0x67a <__vector_21+0x102>
     678:	89 2f       	mov	r24, r25
     67a:	91 e0       	ldi	r25, 0x01	; 1
     67c:	ec 32       	cpi	r30, 0x2C	; 44
     67e:	f9 07       	cpc	r31, r25
     680:	c1 f7       	brne	.-16     	; 0x672 <__vector_21+0xfa>
     682:	80 93 15 01 	sts	0x0115, r24
     686:	87 bd       	out	0x27, r24	; 39
     688:	ff 91       	pop	r31
     68a:	ef 91       	pop	r30
     68c:	9f 91       	pop	r25
     68e:	8f 91       	pop	r24
     690:	0f 90       	pop	r0
     692:	0f be       	out	0x3f, r0	; 63
     694:	0f 90       	pop	r0
     696:	1f 90       	pop	r1
     698:	18 95       	reti

0000069a <init_orb>:
     69a:	14 bc       	out	0x24, r1	; 36
     69c:	84 e0       	ldi	r24, 0x04	; 4
     69e:	85 bd       	out	0x25, r24	; 37
     6a0:	83 e0       	ldi	r24, 0x03	; 3
     6a2:	80 93 6e 00 	sts	0x006E, r24
     6a6:	27 9a       	sbi	0x04, 7	; 4
     6a8:	87 b1       	in	r24, 0x07	; 7
     6aa:	80 6c       	ori	r24, 0xC0	; 192
     6ac:	87 b9       	out	0x07, r24	; 7
     6ae:	8a b1       	in	r24, 0x0a	; 10
     6b0:	83 6d       	ori	r24, 0xD3	; 211
     6b2:	8a b9       	out	0x0a, r24	; 10
     6b4:	8d b1       	in	r24, 0x0d	; 13
     6b6:	84 64       	ori	r24, 0x44	; 68
     6b8:	8d b9       	out	0x0d, r24	; 13
     6ba:	87 9a       	sbi	0x10, 7	; 16
     6bc:	08 95       	ret

000006be <set_orb>:
     6be:	81 33       	cpi	r24, 0x31	; 49
     6c0:	39 f4       	brne	.+14     	; 0x6d0 <set_orb+0x12>
     6c2:	60 93 19 01 	sts	0x0119, r22
     6c6:	40 93 1a 01 	sts	0x011A, r20
     6ca:	20 93 1b 01 	sts	0x011B, r18
     6ce:	08 95       	ret
     6d0:	60 93 16 01 	sts	0x0116, r22
     6d4:	40 93 17 01 	sts	0x0117, r20
     6d8:	20 93 18 01 	sts	0x0118, r18
     6dc:	08 95       	ret

000006de <set_led>:
     6de:	81 33       	cpi	r24, 0x31	; 49
     6e0:	61 f0       	breq	.+24     	; 0x6fa <set_led+0x1c>
     6e2:	18 f4       	brcc	.+6      	; 0x6ea <set_led+0xc>
     6e4:	80 33       	cpi	r24, 0x30	; 48
     6e6:	31 f0       	breq	.+12     	; 0x6f4 <set_led+0x16>
     6e8:	08 95       	ret
     6ea:	82 33       	cpi	r24, 0x32	; 50
     6ec:	49 f0       	breq	.+18     	; 0x700 <set_led+0x22>
     6ee:	83 33       	cpi	r24, 0x33	; 51
     6f0:	51 f0       	breq	.+20     	; 0x706 <set_led+0x28>
     6f2:	08 95       	ret
     6f4:	60 93 1c 01 	sts	0x011C, r22
     6f8:	08 95       	ret
     6fa:	60 93 1d 01 	sts	0x011D, r22
     6fe:	08 95       	ret
     700:	60 93 1e 01 	sts	0x011E, r22
     704:	08 95       	ret
     706:	60 93 1f 01 	sts	0x011F, r22
     70a:	08 95       	ret

0000070c <turn_off_leds>:
}

// Sets the red, green and blue elements of the first LED with 8-bit resolution
void set_orb0(unsigned int red_led, unsigned int green_led, unsigned int blue_led)
{
	led_values_temp[0] = red_led;
     70c:	e6 e1       	ldi	r30, 0x16	; 22
     70e:	f1 e0       	ldi	r31, 0x01	; 1
     710:	10 82       	st	Z, r1
	led_values_temp[1] = green_led;
     712:	11 82       	std	Z+1, r1	; 0x01
	led_values_temp[2] = blue_led;
     714:	12 82       	std	Z+2, r1	; 0x02
}

// Sets the red, green and blue elements of the second LED with 8-bit resolution
void set_orb1(unsigned int red_led, unsigned int green_led, unsigned int blue_led)
{
	led_values_temp[3] = red_led;
     716:	13 82       	std	Z+3, r1	; 0x03
	led_values_temp[4] = green_led;
     718:	14 82       	std	Z+4, r1	; 0x04
	led_values_temp[5] = blue_led;
     71a:	15 82       	std	Z+5, r1	; 0x05
	}
}

void set_led0(unsigned int user)
{
	led_values_temp[6] = user;
     71c:	16 82       	std	Z+6, r1	; 0x06
}

void set_led1(unsigned int user)
{
	led_values_temp[7] = user;
     71e:	17 82       	std	Z+7, r1	; 0x07
}

void set_led2(unsigned int user)
{
	led_values_temp[8] = user;
     720:	10 86       	std	Z+8, r1	; 0x08
}

void set_led3(unsigned int user)
{
	led_values_temp[9] = user;
     722:	11 86       	std	Z+9, r1	; 0x09
     724:	08 95       	ret

00000726 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     726:	84 b7       	in	r24, 0x34	; 52
     728:	87 7f       	andi	r24, 0xF7	; 247
     72a:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     72c:	0f b6       	in	r0, 0x3f	; 63
     72e:	f8 94       	cli
     730:	a8 95       	wdr
     732:	80 91 60 00 	lds	r24, 0x0060
     736:	88 61       	ori	r24, 0x18	; 24
     738:	80 93 60 00 	sts	0x0060, r24
     73c:	10 92 60 00 	sts	0x0060, r1
     740:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	80 e8       	ldi	r24, 0x80	; 128
     746:	0f b6       	in	r0, 0x3f	; 63
     748:	f8 94       	cli
     74a:	80 93 61 00 	sts	0x0061, r24
     74e:	90 93 61 00 	sts	0x0061, r25
     752:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRB  |=  LEDS_PORTB_LEDS;
     754:	20 9a       	sbi	0x04, 0	; 4
				PORTB |=  LEDS_PORTB_LEDS;
     756:	28 9a       	sbi	0x05, 0	; 5
				DDRD  |=  LEDS_PORTD_LEDS;
     758:	55 9a       	sbi	0x0a, 5	; 10
				PORTD |=  LEDS_PORTD_LEDS;
     75a:	5d 9a       	sbi	0x0b, 5	; 11
				DDRC  |=  LEDS_PORTC_LEDS;
     75c:	3f 9a       	sbi	0x07, 7	; 7
				PORTC &= ~LEDS_PORTC_LEDS;
     75e:	47 98       	cbi	0x08, 7	; 8
	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	LEDs_Init();
	init_analog();
     760:	21 dd       	rcall	.-1470   	; 0x1a4 <init_analog>
	init_orb();
     762:	9b df       	rcall	.-202    	; 0x69a <init_orb>
	init_vbr();
     764:	2f de       	rcall	.-930    	; 0x3c4 <init_vbr>
	init_tiny_comm();
     766:	3e dd       	rcall	.-1412   	; 0x1e4 <init_tiny_comm>
	serial_init();
     768:	9c dd       	rcall	.-1224   	; 0x2a2 <serial_init>
	USB_Init();
     76a:	b8 c6       	rjmp	.+3440   	; 0x14dc <USB_Init>

0000076c <main>:

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
     76c:	cf 93       	push	r28
     76e:	df 93       	push	r29
     770:	cd b7       	in	r28, 0x3d	; 61
     772:	de b7       	in	r29, 0x3e	; 62
     774:	6a 97       	sbiw	r28, 0x1a	; 26
     776:	0f b6       	in	r0, 0x3f	; 63
     778:	f8 94       	cli
     77a:	de bf       	out	0x3e, r29	; 62
     77c:	0f be       	out	0x3f, r0	; 63
     77e:	cd bf       	out	0x3d, r28	; 61
	unsigned long int exit_count = 0;
	unsigned long int max_count = 500000;
	uint8_t timeout = 0;
	char usb_data; // Flag that marks if usb_data is received

	SetupHardware();
     780:	d2 df       	rcall	.-92     	; 0x726 <SetupHardware>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     782:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     784:	2f ef       	ldi	r18, 0xFF	; 255
     786:	84 e3       	ldi	r24, 0x34	; 52
     788:	9c e0       	ldi	r25, 0x0C	; 12
     78a:	21 50       	subi	r18, 0x01	; 1
     78c:	80 40       	sbci	r24, 0x00	; 0
     78e:	90 40       	sbci	r25, 0x00	; 0
     790:	e1 f7       	brne	.-8      	; 0x78a <main+0x1e>
     792:	00 c0       	rjmp	.+0      	; 0x794 <main+0x28>
     794:	00 00       	nop
	char serial_data[20]; // Buffer to hold serial commands send over TTL serial port

	// Counter to set a time-out after which Hummingbird reverts to idle state (indicated by status LED fading on and off)
	unsigned long int exit_count = 0;
	unsigned long int max_count = 500000;
	uint8_t timeout = 0;
     796:	10 e0       	ldi	r17, 0x00	; 0
	int count = 0; // Counter variable
	char serial_data[20]; // Buffer to hold serial commands send over TTL serial port

	// Counter to set a time-out after which Hummingbird reverts to idle state (indicated by status LED fading on and off)
	unsigned long int exit_count = 0;
	unsigned long int max_count = 500000;
     798:	a0 e2       	ldi	r26, 0x20	; 32
     79a:	4a 2e       	mov	r4, r26
     79c:	a1 ea       	ldi	r26, 0xA1	; 161
     79e:	5a 2e       	mov	r5, r26
     7a0:	a7 e0       	ldi	r26, 0x07	; 7
     7a2:	6a 2e       	mov	r6, r26
     7a4:	71 2c       	mov	r7, r1
{
	int count = 0; // Counter variable
	char serial_data[20]; // Buffer to hold serial commands send over TTL serial port

	// Counter to set a time-out after which Hummingbird reverts to idle state (indicated by status LED fading on and off)
	unsigned long int exit_count = 0;
     7a6:	c1 2c       	mov	r12, r1
     7a8:	d1 2c       	mov	r13, r1
     7aa:	76 01       	movw	r14, r12
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	int count = 0; // Counter variable
     7ac:	a1 2c       	mov	r10, r1
     7ae:	b1 2c       	mov	r11, r1
     7b0:	fe 01       	movw	r30, r28
     7b2:	34 96       	adiw	r30, 0x04	; 4
     7b4:	fe 8b       	std	Y+22, r31	; 0x16
     7b6:	ed 8b       	std	Y+21, r30	; 0x15
     7b8:	ce 01       	movw	r24, r28
     7ba:	05 96       	adiw	r24, 0x05	; 5
     7bc:	98 8f       	std	Y+24, r25	; 0x18
     7be:	8f 8b       	std	Y+23, r24	; 0x17
     7c0:	1e 01       	movw	r2, r28
     7c2:	96 e0       	ldi	r25, 0x06	; 6
     7c4:	29 0e       	add	r2, r25
     7c6:	31 1c       	adc	r3, r1
     7c8:	70 96       	adiw	r30, 0x10	; 16
     7ca:	fa 8f       	std	Y+26, r31	; 0x1a
     7cc:	e9 8f       	std	Y+25, r30	; 0x19
	//init_BLE_name();

	for (;;)
	{
		// Necessary LUFA library calls that need be run periodically to check USB for data
		HID_Device_USBTask(&Generic_HID_Interface);
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	91 e0       	ldi	r25, 0x01	; 1
     7d2:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <HID_Device_USBTask>
		USB_USBTask();
     7d6:	0e 94 9a 0c 	call	0x1934	; 0x1934 <USB_USBTask>

		if(sensor_broadcast_count > 30)
     7da:	80 91 10 01 	lds	r24, 0x0110
     7de:	8f 31       	cpi	r24, 0x1F	; 31
     7e0:	18 f0       	brcs	.+6      	; 0x7e8 <main+0x7c>
		{
			sensor_broadcast_count = 0;
     7e2:	10 92 10 01 	sts	0x0110, r1
			send_sensors();
     7e6:	7e dd       	rcall	.-1284   	; 0x2e4 <send_sensors>
		}

		// If we reach an idle timer count of 500,000 (in USB mode) or 5 million (in serial mode), ~5 (or 50) seconds has elapsed and we turn everything off and go back to idle mode
		if(exit_count == max_count && exit_count <= max_count+5) {
     7e8:	c4 14       	cp	r12, r4
     7ea:	d5 04       	cpc	r13, r5
     7ec:	e6 04       	cpc	r14, r6
     7ee:	f7 04       	cpc	r15, r7
     7f0:	99 f4       	brne	.+38     	; 0x818 <main+0xac>
     7f2:	fb ef       	ldi	r31, 0xFB	; 251
     7f4:	cf 16       	cp	r12, r31
     7f6:	ff ef       	ldi	r31, 0xFF	; 255
     7f8:	df 06       	cpc	r13, r31
     7fa:	ef 06       	cpc	r14, r31
     7fc:	ff 06       	cpc	r15, r31
     7fe:	b0 f4       	brcc	.+44     	; 0x82c <main+0xc0>
			turn_off_motors();
     800:	07 dd       	rcall	.-1522   	; 0x210 <turn_off_motors>
			turn_off_leds();
     802:	84 df       	rcall	.-248    	; 0x70c <turn_off_leds>
			disable_servos();
     804:	37 dd       	rcall	.-1426   	; 0x274 <disable_servos>
			disable_vibration_motors();
     806:	d1 dd       	rcall	.-1118   	; 0x3aa <disable_vibration_motors>
			activity_state = 0; // Idle mode flag
     808:	10 92 14 01 	sts	0x0114, r1
			exit_count++;
     80c:	2f ef       	ldi	r18, 0xFF	; 255
     80e:	c2 1a       	sub	r12, r18
     810:	d2 0a       	sbc	r13, r18
     812:	e2 0a       	sbc	r14, r18
     814:	f2 0a       	sbc	r15, r18
     816:	0a c0       	rjmp	.+20     	; 0x82c <main+0xc0>
		}
		// Otherwise count up!
		else if(exit_count < max_count) {
     818:	c4 14       	cp	r12, r4
     81a:	d5 04       	cpc	r13, r5
     81c:	e6 04       	cpc	r14, r6
     81e:	f7 04       	cpc	r15, r7
     820:	28 f4       	brcc	.+10     	; 0x82c <main+0xc0>
			exit_count++;
     822:	8f ef       	ldi	r24, 0xFF	; 255
     824:	c8 1a       	sub	r12, r24
     826:	d8 0a       	sbc	r13, r24
     828:	e8 0a       	sbc	r14, r24
     82a:	f8 0a       	sbc	r15, r24
		}

		// Check if we've received data over serial, this is experimental
		if(received_data_available()!=0)
     82c:	52 dd       	rcall	.-1372   	; 0x2d2 <received_data_available>
     82e:	88 23       	and	r24, r24
     830:	09 f4       	brne	.+2      	; 0x834 <main+0xc8>
     832:	71 c2       	rjmp	.+1250   	; 0xd16 <__stack+0x217>
		{
			max_count = 5000000; // Set the time out to 5,000,000, so now we time out in 50 seconds instead of 5
			serial_data[0] = receive_char();
     834:	68 dd       	rcall	.-1328   	; 0x306 <receive_char>
			
			
			
			switch(serial_data[0]) {
     836:	82 35       	cpi	r24, 0x52	; 82
     838:	09 f4       	brne	.+2      	; 0x83c <main+0xd0>
     83a:	90 c1       	rjmp	.+800    	; 0xb5c <__stack+0x5d>
     83c:	d0 f4       	brcc	.+52     	; 0x872 <main+0x106>
     83e:	8c 34       	cpi	r24, 0x4C	; 76
     840:	09 f4       	brne	.+2      	; 0x844 <main+0xd8>
     842:	c2 c0       	rjmp	.+388    	; 0x9c8 <main+0x25c>
     844:	48 f4       	brcc	.+18     	; 0x858 <main+0xec>
     846:	81 34       	cpi	r24, 0x41	; 65
     848:	61 f1       	breq	.+88     	; 0x8a2 <main+0x136>
     84a:	87 34       	cpi	r24, 0x47	; 71
     84c:	09 f0       	breq	.+2      	; 0x850 <main+0xe4>
     84e:	9b c1       	rjmp	.+822    	; 0xb86 <__stack+0x87>
				sensor_broadcast = 0;
				sensor_broadcast_count = 0;
				exit_count = 0;
				break;
				case 'G':
				activity_state=1;
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	80 93 14 01 	sts	0x0114, r24
				while(!received_data_available() && timeout < 250) {
     856:	92 c1       	rjmp	.+804    	; 0xb7c <__stack+0x7d>
			max_count = 5000000; // Set the time out to 5,000,000, so now we time out in 50 seconds instead of 5
			serial_data[0] = receive_char();
			
			
			
			switch(serial_data[0]) {
     858:	8d 34       	cpi	r24, 0x4D	; 77
     85a:	09 f4       	brne	.+2      	; 0x85e <main+0xf2>
     85c:	db c0       	rjmp	.+438    	; 0xa14 <main+0x2a8>
     85e:	8f 34       	cpi	r24, 0x4F	; 79
     860:	09 f0       	breq	.+2      	; 0x864 <main+0xf8>
     862:	91 c1       	rjmp	.+802    	; 0xb86 <__stack+0x87>
					exit_count = 0;  // Reset time-out counter
				}
				break;
				// If O, set an RGB LED using 4 bytes of serial data
				case 'O':
				activity_state=1;
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	80 93 14 01 	sts	0x0114, r24
     86a:	fe 01       	movw	r30, r28
     86c:	32 96       	adiw	r30, 0x02	; 2
     86e:	4f 01       	movw	r8, r30
     870:	7f c0       	rjmp	.+254    	; 0x970 <main+0x204>
			max_count = 5000000; // Set the time out to 5,000,000, so now we time out in 50 seconds instead of 5
			serial_data[0] = receive_char();
			
			
			
			switch(serial_data[0]) {
     872:	88 35       	cpi	r24, 0x58	; 88
     874:	09 f4       	brne	.+2      	; 0x878 <main+0x10c>
     876:	6e c1       	rjmp	.+732    	; 0xb54 <__stack+0x55>
     878:	68 f4       	brcc	.+26     	; 0x894 <main+0x128>
     87a:	83 35       	cpi	r24, 0x53	; 83
     87c:	09 f4       	brne	.+2      	; 0x880 <main+0x114>
     87e:	11 c1       	rjmp	.+546    	; 0xaa2 <main+0x336>
     880:	86 35       	cpi	r24, 0x56	; 86
     882:	09 f0       	breq	.+2      	; 0x886 <main+0x11a>
     884:	80 c1       	rjmp	.+768    	; 0xb86 <__stack+0x87>
					exit_count = 0;  // Reset time-out counter
				}
				break;
				// If 'V', use bytes 1-2 to set vibration motor intensity
				case 'V':
				activity_state=1;
     886:	81 e0       	ldi	r24, 0x01	; 1
     888:	80 93 14 01 	sts	0x0114, r24
     88c:	fe 01       	movw	r30, r28
     88e:	32 96       	adiw	r30, 0x02	; 2
     890:	4f 01       	movw	r8, r30
     892:	e8 c0       	rjmp	.+464    	; 0xa64 <main+0x2f8>
			max_count = 5000000; // Set the time out to 5,000,000, so now we time out in 50 seconds instead of 5
			serial_data[0] = receive_char();
			
			
			
			switch(serial_data[0]) {
     894:	83 37       	cpi	r24, 0x73	; 115
     896:	09 f4       	brne	.+2      	; 0x89a <main+0x12e>
     898:	2a c1       	rjmp	.+596    	; 0xaee <main+0x382>
     89a:	8a 37       	cpi	r24, 0x7A	; 122
     89c:	09 f4       	brne	.+2      	; 0x8a0 <main+0x134>
     89e:	1f c2       	rjmp	.+1086   	; 0xcde <__stack+0x1df>
     8a0:	72 c1       	rjmp	.+740    	; 0xb86 <__stack+0x87>
				// If A, set ALL outputs using 18 bytes of serial data
				case 'A':
				activity_state=1;
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	80 93 14 01 	sts	0x0114, r24
     8a8:	fe 01       	movw	r30, r28
     8aa:	32 96       	adiw	r30, 0x02	; 2
     8ac:	4f 01       	movw	r8, r30
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	int count = 0; // Counter variable
     8ae:	10 e0       	ldi	r17, 0x00	; 0
				activity_state=1;
				for(int t = 1; t < 19; t++)
				{
					timeout = 0;
					// Wait up to 500ms for the next byte
					while(!received_data_available() && timeout < 250) {
     8b0:	10 dd       	rcall	.-1504   	; 0x2d2 <received_data_available>
     8b2:	81 11       	cpse	r24, r1
     8b4:	0b c0       	rjmp	.+22     	; 0x8cc <main+0x160>
     8b6:	1a 3f       	cpi	r17, 0xFA	; 250
     8b8:	09 f4       	brne	.+2      	; 0x8bc <main+0x150>
     8ba:	65 c1       	rjmp	.+714    	; 0xb86 <__stack+0x87>
     8bc:	8f e3       	ldi	r24, 0x3F	; 63
     8be:	9f e1       	ldi	r25, 0x1F	; 31
     8c0:	01 97       	sbiw	r24, 0x01	; 1
     8c2:	f1 f7       	brne	.-4      	; 0x8c0 <main+0x154>
     8c4:	00 c0       	rjmp	.+0      	; 0x8c6 <main+0x15a>
     8c6:	00 00       	nop
						_delay_ms(2);
						timeout++;
     8c8:	1f 5f       	subi	r17, 0xFF	; 255
     8ca:	f2 cf       	rjmp	.-28     	; 0x8b0 <main+0x144>
					}
					if(timeout >= 250)
     8cc:	1a 3f       	cpi	r17, 0xFA	; 250
     8ce:	09 f4       	brne	.+2      	; 0x8d2 <main+0x166>
     8d0:	5a c1       	rjmp	.+692    	; 0xb86 <__stack+0x87>
						break;
					serial_data[t] = receive_char();
     8d2:	19 dd       	rcall	.-1486   	; 0x306 <receive_char>
     8d4:	f4 01       	movw	r30, r8
     8d6:	81 93       	st	Z+, r24
     8d8:	4f 01       	movw	r8, r30
			
			switch(serial_data[0]) {
				// If A, set ALL outputs using 18 bytes of serial data
				case 'A':
				activity_state=1;
				for(int t = 1; t < 19; t++)
     8da:	89 8d       	ldd	r24, Y+25	; 0x19
     8dc:	9a 8d       	ldd	r25, Y+26	; 0x1a
     8de:	e8 17       	cp	r30, r24
     8e0:	f9 07       	cpc	r31, r25
     8e2:	29 f7       	brne	.-54     	; 0x8ae <main+0x142>
					if(timeout >= 250)
						break;
					serial_data[t] = receive_char();
				}
				if(timeout < 250) {
					set_orb('0', serial_data[1], serial_data[2], serial_data[3]);
     8e4:	2c 81       	ldd	r18, Y+4	; 0x04
     8e6:	30 e0       	ldi	r19, 0x00	; 0
     8e8:	4b 81       	ldd	r20, Y+3	; 0x03
     8ea:	50 e0       	ldi	r21, 0x00	; 0
     8ec:	6a 81       	ldd	r22, Y+2	; 0x02
     8ee:	70 e0       	ldi	r23, 0x00	; 0
     8f0:	80 e3       	ldi	r24, 0x30	; 48
     8f2:	e5 de       	rcall	.-566    	; 0x6be <set_orb>
					set_orb('1', serial_data[4], serial_data[5], serial_data[6]);
     8f4:	2f 81       	ldd	r18, Y+7	; 0x07
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	4e 81       	ldd	r20, Y+6	; 0x06
     8fa:	50 e0       	ldi	r21, 0x00	; 0
     8fc:	6d 81       	ldd	r22, Y+5	; 0x05
     8fe:	70 e0       	ldi	r23, 0x00	; 0
     900:	81 e3       	ldi	r24, 0x31	; 49
     902:	dd de       	rcall	.-582    	; 0x6be <set_orb>
					set_led('0', serial_data[7]);
     904:	68 85       	ldd	r22, Y+8	; 0x08
     906:	70 e0       	ldi	r23, 0x00	; 0
     908:	80 e3       	ldi	r24, 0x30	; 48
     90a:	e9 de       	rcall	.-558    	; 0x6de <set_led>
					set_led('1', serial_data[8]);
     90c:	69 85       	ldd	r22, Y+9	; 0x09
     90e:	70 e0       	ldi	r23, 0x00	; 0
     910:	81 e3       	ldi	r24, 0x31	; 49
     912:	e5 de       	rcall	.-566    	; 0x6de <set_led>
					set_led('2', serial_data[9]);
     914:	6a 85       	ldd	r22, Y+10	; 0x0a
     916:	70 e0       	ldi	r23, 0x00	; 0
     918:	82 e3       	ldi	r24, 0x32	; 50
     91a:	e1 de       	rcall	.-574    	; 0x6de <set_led>
					set_led('3', serial_data[10]);
     91c:	6b 85       	ldd	r22, Y+11	; 0x0b
     91e:	70 e0       	ldi	r23, 0x00	; 0
     920:	83 e3       	ldi	r24, 0x33	; 51
     922:	dd de       	rcall	.-582    	; 0x6de <set_led>
					set_servo(0, serial_data[11]);
     924:	6c 85       	ldd	r22, Y+12	; 0x0c
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	a7 dc       	rcall	.-1714   	; 0x278 <set_servo>
					set_servo(1, serial_data[12]);
     92a:	6d 85       	ldd	r22, Y+13	; 0x0d
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	a4 dc       	rcall	.-1720   	; 0x278 <set_servo>
					set_servo(2, serial_data[13]);
     930:	6e 85       	ldd	r22, Y+14	; 0x0e
     932:	82 e0       	ldi	r24, 0x02	; 2
     934:	a1 dc       	rcall	.-1726   	; 0x278 <set_servo>
					set_servo(3, serial_data[14]);
     936:	6f 85       	ldd	r22, Y+15	; 0x0f
     938:	83 e0       	ldi	r24, 0x03	; 3
     93a:	9e dc       	rcall	.-1732   	; 0x278 <set_servo>
					set_vibration_motor('0', serial_data[15]);
     93c:	68 89       	ldd	r22, Y+16	; 0x10
     93e:	80 e3       	ldi	r24, 0x30	; 48
     940:	22 dd       	rcall	.-1468   	; 0x386 <set_vibration_motor>
					set_vibration_motor('1', serial_data[16]);
     942:	69 89       	ldd	r22, Y+17	; 0x11
     944:	81 e3       	ldi	r24, 0x31	; 49
     946:	1f dd       	rcall	.-1474   	; 0x386 <set_vibration_motor>
					if(serial_data[17] < 128)
     948:	4a 89       	ldd	r20, Y+18	; 0x12
     94a:	47 fd       	sbrc	r20, 7
     94c:	03 c0       	rjmp	.+6      	; 0x954 <main+0x1e8>
						set_motor(0, 0, serial_data[17]*2);
     94e:	44 0f       	add	r20, r20
     950:	60 e0       	ldi	r22, 0x00	; 0
     952:	02 c0       	rjmp	.+4      	; 0x958 <main+0x1ec>
					else
						set_motor(0, 1, (serial_data[17]-128)*2);
     954:	44 0f       	add	r20, r20
     956:	61 e0       	ldi	r22, 0x01	; 1
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	5c dc       	rcall	.-1864   	; 0x214 <set_motor>
					if(serial_data[18] < 128)
     95c:	4b 89       	ldd	r20, Y+19	; 0x13
     95e:	47 fd       	sbrc	r20, 7
     960:	03 c0       	rjmp	.+6      	; 0x968 <main+0x1fc>
						set_motor(1, 0, serial_data[18]*2);
     962:	44 0f       	add	r20, r20
     964:	60 e0       	ldi	r22, 0x00	; 0
     966:	02 c0       	rjmp	.+4      	; 0x96c <main+0x200>
					else
						set_motor(1, 1, (serial_data[18]-128)*2);
     968:	44 0f       	add	r20, r20
     96a:	61 e0       	ldi	r22, 0x01	; 1
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	78 c0       	rjmp	.+240    	; 0xa60 <main+0x2f4>
     970:	10 e0       	ldi	r17, 0x00	; 0
				activity_state=1;
				for(int t = 1; t < 5; t++)
				{
					timeout = 0;
					// Wait up to 500ms for the next byte
					while(!received_data_available() && timeout < 250) {
     972:	af dc       	rcall	.-1698   	; 0x2d2 <received_data_available>
     974:	81 11       	cpse	r24, r1
     976:	0b c0       	rjmp	.+22     	; 0x98e <main+0x222>
     978:	1a 3f       	cpi	r17, 0xFA	; 250
     97a:	09 f4       	brne	.+2      	; 0x97e <main+0x212>
     97c:	04 c1       	rjmp	.+520    	; 0xb86 <__stack+0x87>
     97e:	8f e3       	ldi	r24, 0x3F	; 63
     980:	9f e1       	ldi	r25, 0x1F	; 31
     982:	01 97       	sbiw	r24, 0x01	; 1
     984:	f1 f7       	brne	.-4      	; 0x982 <main+0x216>
     986:	00 c0       	rjmp	.+0      	; 0x988 <main+0x21c>
     988:	00 00       	nop
						_delay_ms(2);
						timeout++;
     98a:	1f 5f       	subi	r17, 0xFF	; 255
     98c:	f2 cf       	rjmp	.-28     	; 0x972 <main+0x206>
					}
					if(timeout >= 250)
     98e:	1a 3f       	cpi	r17, 0xFA	; 250
     990:	09 f4       	brne	.+2      	; 0x994 <main+0x228>
     992:	f9 c0       	rjmp	.+498    	; 0xb86 <__stack+0x87>
						break;
					serial_data[t] = receive_char();
     994:	b8 dc       	rcall	.-1680   	; 0x306 <receive_char>
     996:	f4 01       	movw	r30, r8
     998:	81 93       	st	Z+, r24
     99a:	4f 01       	movw	r8, r30
				}
				break;
				// If O, set an RGB LED using 4 bytes of serial data
				case 'O':
				activity_state=1;
				for(int t = 1; t < 5; t++)
     99c:	e2 15       	cp	r30, r2
     99e:	f3 05       	cpc	r31, r3
     9a0:	39 f7       	brne	.-50     	; 0x970 <main+0x204>
					if(timeout >= 250)
						break;
					serial_data[t] = receive_char();
				}
				if(timeout < 250) {
					set_orb(serial_data[1], serial_data[2], serial_data[3], serial_data[4]);
     9a2:	2d 81       	ldd	r18, Y+5	; 0x05
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	4c 81       	ldd	r20, Y+4	; 0x04
     9a8:	50 e0       	ldi	r21, 0x00	; 0
     9aa:	6b 81       	ldd	r22, Y+3	; 0x03
     9ac:	70 e0       	ldi	r23, 0x00	; 0
     9ae:	8a 81       	ldd	r24, Y+2	; 0x02
     9b0:	86 de       	rcall	.-756    	; 0x6be <set_orb>
		}

		// Check if we've received data over serial, this is experimental
		if(received_data_available()!=0)
		{
			max_count = 5000000; // Set the time out to 5,000,000, so now we time out in 50 seconds instead of 5
     9b2:	f0 e4       	ldi	r31, 0x40	; 64
     9b4:	4f 2e       	mov	r4, r31
     9b6:	fb e4       	ldi	r31, 0x4B	; 75
     9b8:	5f 2e       	mov	r5, r31
     9ba:	fc e4       	ldi	r31, 0x4C	; 76
     9bc:	6f 2e       	mov	r6, r31
     9be:	71 2c       	mov	r7, r1
					send_char(count);
					count++;
					if(count > 255) {
						count = 0;
					}
					exit_count = 0;
     9c0:	c1 2c       	mov	r12, r1
     9c2:	d1 2c       	mov	r13, r1
     9c4:	76 01       	movw	r14, r12
     9c6:	03 cf       	rjmp	.-506    	; 0x7ce <main+0x62>
					exit_count = 0;  // Reset time-out counter
				}
				break;
				// If 'L', set an LED's intensity with 2 bytes of serial data
				case 'L':
				activity_state=1;
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	80 93 14 01 	sts	0x0114, r24
     9ce:	ce 01       	movw	r24, r28
     9d0:	02 96       	adiw	r24, 0x02	; 2
     9d2:	4c 01       	movw	r8, r24
     9d4:	10 e0       	ldi	r17, 0x00	; 0
				for(int t = 1; t < 3; t++)
				{
					timeout = 0;
					while(!received_data_available() && timeout < 250) {
     9d6:	7d dc       	rcall	.-1798   	; 0x2d2 <received_data_available>
     9d8:	81 11       	cpse	r24, r1
     9da:	0b c0       	rjmp	.+22     	; 0x9f2 <main+0x286>
     9dc:	1a 3f       	cpi	r17, 0xFA	; 250
     9de:	09 f4       	brne	.+2      	; 0x9e2 <main+0x276>
     9e0:	d2 c0       	rjmp	.+420    	; 0xb86 <__stack+0x87>
     9e2:	ef e3       	ldi	r30, 0x3F	; 63
     9e4:	ff e1       	ldi	r31, 0x1F	; 31
     9e6:	31 97       	sbiw	r30, 0x01	; 1
     9e8:	f1 f7       	brne	.-4      	; 0x9e6 <main+0x27a>
     9ea:	00 c0       	rjmp	.+0      	; 0x9ec <main+0x280>
     9ec:	00 00       	nop
						_delay_ms(2);
						timeout++;
     9ee:	1f 5f       	subi	r17, 0xFF	; 255
     9f0:	f2 cf       	rjmp	.-28     	; 0x9d6 <main+0x26a>
					}
					if(timeout >= 250)
     9f2:	1a 3f       	cpi	r17, 0xFA	; 250
     9f4:	09 f4       	brne	.+2      	; 0x9f8 <main+0x28c>
     9f6:	c7 c0       	rjmp	.+398    	; 0xb86 <__stack+0x87>
					break;
					serial_data[t] = receive_char();
     9f8:	86 dc       	rcall	.-1780   	; 0x306 <receive_char>
     9fa:	f4 01       	movw	r30, r8
     9fc:	81 93       	st	Z+, r24
     9fe:	4f 01       	movw	r8, r30
				}
				break;
				// If 'L', set an LED's intensity with 2 bytes of serial data
				case 'L':
				activity_state=1;
				for(int t = 1; t < 3; t++)
     a00:	8d 89       	ldd	r24, Y+21	; 0x15
     a02:	9e 89       	ldd	r25, Y+22	; 0x16
     a04:	e8 17       	cp	r30, r24
     a06:	f9 07       	cpc	r31, r25
     a08:	29 f7       	brne	.-54     	; 0x9d4 <main+0x268>
					if(timeout >= 250)
					break;
					serial_data[t] = receive_char();
				}
				if(timeout < 250) {
					set_led(serial_data[1], serial_data[2]);
     a0a:	6b 81       	ldd	r22, Y+3	; 0x03
     a0c:	70 e0       	ldi	r23, 0x00	; 0
     a0e:	8a 81       	ldd	r24, Y+2	; 0x02
     a10:	66 de       	rcall	.-820    	; 0x6de <set_led>
     a12:	cf cf       	rjmp	.-98     	; 0x9b2 <main+0x246>
					exit_count = 0;  // Reset time-out counter
				}
				break;
				// If 'M', use bytes 1-3 to set motor speed and direction
				case 'M':
				activity_state=1;
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	80 93 14 01 	sts	0x0114, r24
     a1a:	fe 01       	movw	r30, r28
     a1c:	32 96       	adiw	r30, 0x02	; 2
     a1e:	4f 01       	movw	r8, r30
     a20:	10 e0       	ldi	r17, 0x00	; 0
				for(int t = 1; t < 4; t++)
				{
					timeout = 0;
					while(!received_data_available() && timeout < 250) {
     a22:	57 dc       	rcall	.-1874   	; 0x2d2 <received_data_available>
     a24:	81 11       	cpse	r24, r1
     a26:	0b c0       	rjmp	.+22     	; 0xa3e <main+0x2d2>
     a28:	1a 3f       	cpi	r17, 0xFA	; 250
     a2a:	09 f4       	brne	.+2      	; 0xa2e <main+0x2c2>
     a2c:	ac c0       	rjmp	.+344    	; 0xb86 <__stack+0x87>
     a2e:	8f e3       	ldi	r24, 0x3F	; 63
     a30:	9f e1       	ldi	r25, 0x1F	; 31
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	f1 f7       	brne	.-4      	; 0xa32 <main+0x2c6>
     a36:	00 c0       	rjmp	.+0      	; 0xa38 <main+0x2cc>
     a38:	00 00       	nop
						_delay_ms(2);
						timeout++;
     a3a:	1f 5f       	subi	r17, 0xFF	; 255
     a3c:	f2 cf       	rjmp	.-28     	; 0xa22 <main+0x2b6>
					}
					if(timeout >= 250)
     a3e:	1a 3f       	cpi	r17, 0xFA	; 250
     a40:	09 f4       	brne	.+2      	; 0xa44 <main+0x2d8>
     a42:	a1 c0       	rjmp	.+322    	; 0xb86 <__stack+0x87>
					break;
					serial_data[t] = receive_char();
     a44:	60 dc       	rcall	.-1856   	; 0x306 <receive_char>
     a46:	f4 01       	movw	r30, r8
     a48:	81 93       	st	Z+, r24
     a4a:	4f 01       	movw	r8, r30
				}
				break;
				// If 'M', use bytes 1-3 to set motor speed and direction
				case 'M':
				activity_state=1;
				for(int t = 1; t < 4; t++)
     a4c:	8f 89       	ldd	r24, Y+23	; 0x17
     a4e:	98 8d       	ldd	r25, Y+24	; 0x18
     a50:	e8 17       	cp	r30, r24
     a52:	f9 07       	cpc	r31, r25
     a54:	29 f7       	brne	.-54     	; 0xa20 <main+0x2b4>
					if(timeout >= 250)
					break;
					serial_data[t] = receive_char();
				}
				if(timeout < 250) {
					set_motor(serial_data[1]-48, serial_data[2]-48, serial_data[3]);
     a56:	6b 81       	ldd	r22, Y+3	; 0x03
     a58:	60 53       	subi	r22, 0x30	; 48
     a5a:	8a 81       	ldd	r24, Y+2	; 0x02
     a5c:	4c 81       	ldd	r20, Y+4	; 0x04
     a5e:	80 53       	subi	r24, 0x30	; 48
     a60:	d9 db       	rcall	.-2126   	; 0x214 <set_motor>
     a62:	a7 cf       	rjmp	.-178    	; 0x9b2 <main+0x246>
     a64:	10 e0       	ldi	r17, 0x00	; 0
				case 'V':
				activity_state=1;
				for(int t = 1; t < 3; t++)
				{
					timeout = 0;
					while(!received_data_available() && timeout < 250) {
     a66:	35 dc       	rcall	.-1942   	; 0x2d2 <received_data_available>
     a68:	81 11       	cpse	r24, r1
     a6a:	0b c0       	rjmp	.+22     	; 0xa82 <main+0x316>
     a6c:	1a 3f       	cpi	r17, 0xFA	; 250
     a6e:	09 f4       	brne	.+2      	; 0xa72 <main+0x306>
     a70:	8a c0       	rjmp	.+276    	; 0xb86 <__stack+0x87>
     a72:	8f e3       	ldi	r24, 0x3F	; 63
     a74:	9f e1       	ldi	r25, 0x1F	; 31
     a76:	01 97       	sbiw	r24, 0x01	; 1
     a78:	f1 f7       	brne	.-4      	; 0xa76 <main+0x30a>
     a7a:	00 c0       	rjmp	.+0      	; 0xa7c <main+0x310>
     a7c:	00 00       	nop
						_delay_ms(2);
						timeout++;
     a7e:	1f 5f       	subi	r17, 0xFF	; 255
     a80:	f2 cf       	rjmp	.-28     	; 0xa66 <main+0x2fa>
					}
					if(timeout >= 250)
     a82:	1a 3f       	cpi	r17, 0xFA	; 250
     a84:	09 f4       	brne	.+2      	; 0xa88 <main+0x31c>
     a86:	7f c0       	rjmp	.+254    	; 0xb86 <__stack+0x87>
					break;
					serial_data[t] = receive_char();
     a88:	3e dc       	rcall	.-1924   	; 0x306 <receive_char>
     a8a:	f4 01       	movw	r30, r8
     a8c:	81 93       	st	Z+, r24
     a8e:	4f 01       	movw	r8, r30
				}
				break;
				// If 'V', use bytes 1-2 to set vibration motor intensity
				case 'V':
				activity_state=1;
				for(int t = 1; t < 3; t++)
     a90:	8d 89       	ldd	r24, Y+21	; 0x15
     a92:	9e 89       	ldd	r25, Y+22	; 0x16
     a94:	e8 17       	cp	r30, r24
     a96:	f9 07       	cpc	r31, r25
     a98:	29 f7       	brne	.-54     	; 0xa64 <main+0x2f8>
					if(timeout >= 250)
					break;
					serial_data[t] = receive_char();
				}
				if(timeout < 250) {
					set_vibration_motor(serial_data[1], serial_data[2]);
     a9a:	6b 81       	ldd	r22, Y+3	; 0x03
     a9c:	8a 81       	ldd	r24, Y+2	; 0x02
     a9e:	73 dc       	rcall	.-1818   	; 0x386 <set_vibration_motor>
     aa0:	88 cf       	rjmp	.-240    	; 0x9b2 <main+0x246>
					exit_count = 0;
				}
				break;
				// If 'S', use bytes 1-2 to set servo position
				case 'S':
				activity_state=1;
     aa2:	81 e0       	ldi	r24, 0x01	; 1
     aa4:	80 93 14 01 	sts	0x0114, r24
     aa8:	fe 01       	movw	r30, r28
     aaa:	32 96       	adiw	r30, 0x02	; 2
     aac:	4f 01       	movw	r8, r30
     aae:	10 e0       	ldi	r17, 0x00	; 0
				for(int t = 1; t < 3; t++)
				{
					timeout = 0;
					while(!received_data_available() && timeout < 250) {
     ab0:	10 dc       	rcall	.-2016   	; 0x2d2 <received_data_available>
     ab2:	81 11       	cpse	r24, r1
     ab4:	0b c0       	rjmp	.+22     	; 0xacc <main+0x360>
     ab6:	1a 3f       	cpi	r17, 0xFA	; 250
     ab8:	09 f4       	brne	.+2      	; 0xabc <main+0x350>
     aba:	65 c0       	rjmp	.+202    	; 0xb86 <__stack+0x87>
     abc:	8f e3       	ldi	r24, 0x3F	; 63
     abe:	9f e1       	ldi	r25, 0x1F	; 31
     ac0:	01 97       	sbiw	r24, 0x01	; 1
     ac2:	f1 f7       	brne	.-4      	; 0xac0 <main+0x354>
     ac4:	00 c0       	rjmp	.+0      	; 0xac6 <main+0x35a>
     ac6:	00 00       	nop
						_delay_ms(2);
						timeout++;
     ac8:	1f 5f       	subi	r17, 0xFF	; 255
     aca:	f2 cf       	rjmp	.-28     	; 0xab0 <main+0x344>
					}
					if(timeout >= 250)
     acc:	1a 3f       	cpi	r17, 0xFA	; 250
     ace:	09 f4       	brne	.+2      	; 0xad2 <main+0x366>
     ad0:	5a c0       	rjmp	.+180    	; 0xb86 <__stack+0x87>
					break;
					serial_data[t] = receive_char();
     ad2:	19 dc       	rcall	.-1998   	; 0x306 <receive_char>
     ad4:	f4 01       	movw	r30, r8
     ad6:	81 93       	st	Z+, r24
     ad8:	4f 01       	movw	r8, r30
				}
				break;
				// If 'S', use bytes 1-2 to set servo position
				case 'S':
				activity_state=1;
				for(int t = 1; t < 3; t++)
     ada:	8d 89       	ldd	r24, Y+21	; 0x15
     adc:	9e 89       	ldd	r25, Y+22	; 0x16
     ade:	e8 17       	cp	r30, r24
     ae0:	f9 07       	cpc	r31, r25
     ae2:	29 f7       	brne	.-54     	; 0xaae <main+0x342>
					if(timeout >= 250)
					break;
					serial_data[t] = receive_char();
				}
				if(timeout < 250) {
					set_servo(serial_data[1]-48, serial_data[2]);
     ae4:	8a 81       	ldd	r24, Y+2	; 0x02
     ae6:	6b 81       	ldd	r22, Y+3	; 0x03
     ae8:	80 53       	subi	r24, 0x30	; 48
     aea:	c6 db       	rcall	.-2164   	; 0x278 <set_servo>
     aec:	62 cf       	rjmp	.-316    	; 0x9b2 <main+0x246>
					exit_count = 0;
				}
				break;
				// If 's', return sensor values of the selected sensor port
				case 's':
				activity_state=1;
     aee:	81 e0       	ldi	r24, 0x01	; 1
     af0:	80 93 14 01 	sts	0x0114, r24
				while(!received_data_available() && timeout < 250) {
     af4:	ee db       	rcall	.-2084   	; 0x2d2 <received_data_available>
     af6:	81 11       	cpse	r24, r1
     af8:	0b c0       	rjmp	.+22     	; 0xb10 <__stack+0x11>
     afa:	1a 3f       	cpi	r17, 0xFA	; 250
     afc:	08 f0       	brcs	.+2      	; 0xb00 <__stack+0x1>
     afe:	43 c0       	rjmp	.+134    	; 0xb86 <__stack+0x87>
     b00:	ef e3       	ldi	r30, 0x3F	; 63
     b02:	ff e1       	ldi	r31, 0x1F	; 31
     b04:	31 97       	sbiw	r30, 0x01	; 1
     b06:	f1 f7       	brne	.-4      	; 0xb04 <__stack+0x5>
     b08:	00 c0       	rjmp	.+0      	; 0xb0a <__stack+0xb>
     b0a:	00 00       	nop
					_delay_ms(2);
					timeout++;
     b0c:	1f 5f       	subi	r17, 0xFF	; 255
     b0e:	f2 cf       	rjmp	.-28     	; 0xaf4 <main+0x388>
				}
				if(timeout < 250)
     b10:	1a 3f       	cpi	r17, 0xFA	; 250
     b12:	08 f0       	brcs	.+2      	; 0xb16 <__stack+0x17>
     b14:	38 c0       	rjmp	.+112    	; 0xb86 <__stack+0x87>
				{
					serial_data[1] = receive_char();
     b16:	f7 db       	rcall	.-2066   	; 0x306 <receive_char>
     b18:	8a 83       	std	Y+2, r24	; 0x02
					if(serial_data[1]=='0')
     b1a:	80 33       	cpi	r24, 0x30	; 48
     b1c:	21 f4       	brne	.+8      	; 0xb26 <__stack+0x27>
					{
						send_char(0x01); // Send 1 byte
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	d1 db       	rcall	.-2142   	; 0x2c4 <send_char>
						send_char(read_sensor(SENSOR1));
     b22:	86 e6       	ldi	r24, 0x66	; 102
     b24:	93 c0       	rjmp	.+294    	; 0xc4c <__stack+0x14d>
					}
					else if(serial_data[1]=='1')
     b26:	81 33       	cpi	r24, 0x31	; 49
     b28:	21 f4       	brne	.+8      	; 0xb32 <__stack+0x33>
					{
						send_char(0x01); // Send 1 byte
     b2a:	81 e0       	ldi	r24, 0x01	; 1
     b2c:	cb db       	rcall	.-2154   	; 0x2c4 <send_char>
						send_char(read_sensor(SENSOR2));
     b2e:	85 e6       	ldi	r24, 0x65	; 101
     b30:	8d c0       	rjmp	.+282    	; 0xc4c <__stack+0x14d>
					}
					else if(serial_data[1]=='2')
     b32:	82 33       	cpi	r24, 0x32	; 50
     b34:	21 f4       	brne	.+8      	; 0xb3e <__stack+0x3f>
					{
						send_char(0x01); // Send 1 byte
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	c5 db       	rcall	.-2166   	; 0x2c4 <send_char>
						send_char(read_sensor(SENSOR3));
     b3a:	84 e6       	ldi	r24, 0x64	; 100
     b3c:	87 c0       	rjmp	.+270    	; 0xc4c <__stack+0x14d>
					}
					else if(serial_data[1]=='3')
     b3e:	83 33       	cpi	r24, 0x33	; 51
     b40:	21 f4       	brne	.+8      	; 0xb4a <__stack+0x4b>
					{
						send_char(0x01); // Send 1 byte
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	bf db       	rcall	.-2178   	; 0x2c4 <send_char>
						send_char(read_sensor(SENSOR4));
     b46:	81 e6       	ldi	r24, 0x61	; 97
     b48:	81 c0       	rjmp	.+258    	; 0xc4c <__stack+0x14d>
					}
					else if(serial_data[1]=='4')
     b4a:	84 33       	cpi	r24, 0x34	; 52
     b4c:	09 f0       	breq	.+2      	; 0xb50 <__stack+0x51>
     b4e:	31 cf       	rjmp	.-414    	; 0x9b2 <main+0x246>
					{
						send_char(0x01); // Send 1 byte
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	7a c0       	rjmp	.+244    	; 0xc48 <__stack+0x149>
					exit_count = 0;
				}
				break;
				// Fast way to turn everything off
				case 'X':
				activity_state=1;
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	80 93 14 01 	sts	0x0114, r24
     b5a:	02 c0       	rjmp	.+4      	; 0xb60 <__stack+0x61>
				sensor_broadcast_count = 0;
				exit_count = 0;
				break;
				// Fast way to turn everything off AND go to idle state
				case 'R':
				activity_state=0; // idle mode flag
     b5c:	10 92 14 01 	sts	0x0114, r1
				turn_off_motors();
     b60:	57 db       	rcall	.-2386   	; 0x210 <turn_off_motors>
				turn_off_leds();
     b62:	d4 dd       	rcall	.-1112   	; 0x70c <turn_off_leds>
				disable_servos();
     b64:	87 db       	rcall	.-2290   	; 0x274 <disable_servos>
				disable_vibration_motors();
     b66:	21 dc       	rcall	.-1982   	; 0x3aa <disable_vibration_motors>
     b68:	89 c0       	rjmp	.+274    	; 0xc7c <__stack+0x17d>
				sensor_broadcast_count = 0;
				exit_count = 0;
				break;
				case 'G':
				activity_state=1;
				while(!received_data_available() && timeout < 250) {
     b6a:	1a 3f       	cpi	r17, 0xFA	; 250
     b6c:	60 f4       	brcc	.+24     	; 0xb86 <__stack+0x87>
     b6e:	8f e3       	ldi	r24, 0x3F	; 63
     b70:	9f e1       	ldi	r25, 0x1F	; 31
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	f1 f7       	brne	.-4      	; 0xb72 <__stack+0x73>
     b76:	00 c0       	rjmp	.+0      	; 0xb78 <__stack+0x79>
     b78:	00 00       	nop
					_delay_ms(2);
					timeout++;
     b7a:	1f 5f       	subi	r17, 0xFF	; 255
				sensor_broadcast_count = 0;
				exit_count = 0;
				break;
				case 'G':
				activity_state=1;
				while(!received_data_available() && timeout < 250) {
     b7c:	aa db       	rcall	.-2220   	; 0x2d2 <received_data_available>
     b7e:	88 23       	and	r24, r24
     b80:	a1 f3       	breq	.-24     	; 0xb6a <__stack+0x6b>
					_delay_ms(2);
					timeout++;
				}
				// If you didn't timeout, provide the requested data
				if(timeout < 250)
     b82:	1a 3f       	cpi	r17, 0xFA	; 250
     b84:	40 f0       	brcs	.+16     	; 0xb96 <__stack+0x97>
		}

		// Check if we've received data over serial, this is experimental
		if(received_data_available()!=0)
		{
			max_count = 5000000; // Set the time out to 5,000,000, so now we time out in 50 seconds instead of 5
     b86:	e0 e4       	ldi	r30, 0x40	; 64
     b88:	4e 2e       	mov	r4, r30
     b8a:	eb e4       	ldi	r30, 0x4B	; 75
     b8c:	5e 2e       	mov	r5, r30
     b8e:	ec e4       	ldi	r30, 0x4C	; 76
     b90:	6e 2e       	mov	r6, r30
     b92:	71 2c       	mov	r7, r1
     b94:	1c ce       	rjmp	.-968    	; 0x7ce <main+0x62>
					timeout++;
				}
				// If you didn't timeout, provide the requested data
				if(timeout < 250)
				{
					serial_data[1] = receive_char();
     b96:	b7 db       	rcall	.-2194   	; 0x306 <receive_char>
     b98:	8a 83       	std	Y+2, r24	; 0x02
					if(serial_data[1] == '0') {
     b9a:	80 33       	cpi	r24, 0x30	; 48
     b9c:	81 f4       	brne	.+32     	; 0xbbe <__stack+0xbf>
						send_char(0x06); // Send 6 bytes
     b9e:	86 e0       	ldi	r24, 0x06	; 6
     ba0:	91 db       	rcall	.-2270   	; 0x2c4 <send_char>
     ba2:	76 e1       	ldi	r23, 0x16	; 22
     ba4:	e7 2e       	mov	r14, r23
     ba6:	71 e0       	ldi	r23, 0x01	; 1
     ba8:	f7 2e       	mov	r15, r23
						for(int i = 0; i < 6; i++) {
							send_char(led_values_temp[i]);
     baa:	f7 01       	movw	r30, r14
     bac:	81 91       	ld	r24, Z+
     bae:	7f 01       	movw	r14, r30
     bb0:	89 db       	rcall	.-2286   	; 0x2c4 <send_char>
				if(timeout < 250)
				{
					serial_data[1] = receive_char();
					if(serial_data[1] == '0') {
						send_char(0x06); // Send 6 bytes
						for(int i = 0; i < 6; i++) {
     bb2:	fc e1       	ldi	r31, 0x1C	; 28
     bb4:	ef 16       	cp	r14, r31
     bb6:	f1 e0       	ldi	r31, 0x01	; 1
     bb8:	ff 06       	cpc	r15, r31
     bba:	b9 f7       	brne	.-18     	; 0xbaa <__stack+0xab>
     bbc:	fa ce       	rjmp	.-524    	; 0x9b2 <main+0x246>
							send_char(led_values_temp[i]);
						}
					}
					else if(serial_data[1] == '1') {
     bbe:	81 33       	cpi	r24, 0x31	; 49
     bc0:	e9 f4       	brne	.+58     	; 0xbfc <__stack+0xfd>
						send_char(0x08); // Send 8 bytes
     bc2:	88 e0       	ldi	r24, 0x08	; 8
     bc4:	7f db       	rcall	.-2306   	; 0x2c4 <send_char>
     bc6:	6c e1       	ldi	r22, 0x1C	; 28
     bc8:	e6 2e       	mov	r14, r22
     bca:	61 e0       	ldi	r22, 0x01	; 1
     bcc:	f6 2e       	mov	r15, r22
						for(int i = 6; i < 10; i++) {
							send_char(led_values_temp[i]);
     bce:	f7 01       	movw	r30, r14
     bd0:	81 91       	ld	r24, Z+
     bd2:	7f 01       	movw	r14, r30
     bd4:	77 db       	rcall	.-2322   	; 0x2c4 <send_char>
							send_char(led_values_temp[i]);
						}
					}
					else if(serial_data[1] == '1') {
						send_char(0x08); // Send 8 bytes
						for(int i = 6; i < 10; i++) {
     bd6:	f0 e2       	ldi	r31, 0x20	; 32
     bd8:	ef 16       	cp	r14, r31
     bda:	f1 e0       	ldi	r31, 0x01	; 1
     bdc:	ff 06       	cpc	r15, r31
     bde:	b9 f7       	brne	.-18     	; 0xbce <__stack+0xcf>
     be0:	5e e2       	ldi	r21, 0x2E	; 46
     be2:	e5 2e       	mov	r14, r21
     be4:	51 e0       	ldi	r21, 0x01	; 1
     be6:	f5 2e       	mov	r15, r21
							send_char(led_values_temp[i]);
						}
						for(int i = 0; i < 4; i++) {
							send_char(servo_values_temp[i]);
     be8:	f7 01       	movw	r30, r14
     bea:	81 91       	ld	r24, Z+
     bec:	7f 01       	movw	r14, r30
     bee:	6a db       	rcall	.-2348   	; 0x2c4 <send_char>
					else if(serial_data[1] == '1') {
						send_char(0x08); // Send 8 bytes
						for(int i = 6; i < 10; i++) {
							send_char(led_values_temp[i]);
						}
						for(int i = 0; i < 4; i++) {
     bf0:	f2 e3       	ldi	r31, 0x32	; 50
     bf2:	ef 16       	cp	r14, r31
     bf4:	f1 e0       	ldi	r31, 0x01	; 1
     bf6:	ff 06       	cpc	r15, r31
     bf8:	b9 f7       	brne	.-18     	; 0xbe8 <__stack+0xe9>
     bfa:	db ce       	rjmp	.-586    	; 0x9b2 <main+0x246>
							send_char(servo_values_temp[i]);
						}
					}
					else if(serial_data[1] == '2') {
     bfc:	82 33       	cpi	r24, 0x32	; 50
     bfe:	a9 f4       	brne	.+42     	; 0xc2a <__stack+0x12b>
						send_char(0x06); // Send 6 bytes
     c00:	86 e0       	ldi	r24, 0x06	; 6
     c02:	60 db       	rcall	.-2368   	; 0x2c4 <send_char>
     c04:	44 e3       	ldi	r20, 0x34	; 52
     c06:	e4 2e       	mov	r14, r20
     c08:	41 e0       	ldi	r20, 0x01	; 1
     c0a:	f4 2e       	mov	r15, r20
						for(int i = 0; i < 4; i++) {
							send_char(motor_vals[i]);
     c0c:	f7 01       	movw	r30, r14
     c0e:	81 91       	ld	r24, Z+
     c10:	7f 01       	movw	r14, r30
     c12:	58 db       	rcall	.-2384   	; 0x2c4 <send_char>
							send_char(servo_values_temp[i]);
						}
					}
					else if(serial_data[1] == '2') {
						send_char(0x06); // Send 6 bytes
						for(int i = 0; i < 4; i++) {
     c14:	f8 e3       	ldi	r31, 0x38	; 56
     c16:	ef 16       	cp	r14, r31
     c18:	f1 e0       	ldi	r31, 0x01	; 1
     c1a:	ff 06       	cpc	r15, r31
     c1c:	b9 f7       	brne	.-18     	; 0xc0c <__stack+0x10d>
							send_char(motor_vals[i]);
						}
						send_char(vbr_values_temp[0]);
     c1e:	80 91 2c 01 	lds	r24, 0x012C
     c22:	50 db       	rcall	.-2400   	; 0x2c4 <send_char>
						send_char(vbr_values_temp[1]);
     c24:	80 91 2d 01 	lds	r24, 0x012D
     c28:	58 c0       	rjmp	.+176    	; 0xcda <__stack+0x1db>
					}
					else if(serial_data[1] == '3') {
     c2a:	83 33       	cpi	r24, 0x33	; 51
     c2c:	89 f4       	brne	.+34     	; 0xc50 <__stack+0x151>
						send_char(0x05); // Send 5 bytes
     c2e:	85 e0       	ldi	r24, 0x05	; 5
     c30:	49 db       	rcall	.-2414   	; 0x2c4 <send_char>
						send_char(read_sensor(SENSOR1));
     c32:	86 e6       	ldi	r24, 0x66	; 102
     c34:	c3 da       	rcall	.-2682   	; 0x1bc <read_sensor>
     c36:	46 db       	rcall	.-2420   	; 0x2c4 <send_char>
						send_char(read_sensor(SENSOR2));
     c38:	85 e6       	ldi	r24, 0x65	; 101
     c3a:	c0 da       	rcall	.-2688   	; 0x1bc <read_sensor>
     c3c:	43 db       	rcall	.-2426   	; 0x2c4 <send_char>
						send_char(read_sensor(SENSOR3));
     c3e:	84 e6       	ldi	r24, 0x64	; 100
     c40:	bd da       	rcall	.-2694   	; 0x1bc <read_sensor>
     c42:	40 db       	rcall	.-2432   	; 0x2c4 <send_char>
						send_char(read_sensor(SENSOR4));
     c44:	81 e6       	ldi	r24, 0x61	; 97
     c46:	ba da       	rcall	.-2700   	; 0x1bc <read_sensor>
     c48:	3d db       	rcall	.-2438   	; 0x2c4 <send_char>
						send_char(read_sensor(EXT_PWR));
     c4a:	80 e6       	ldi	r24, 0x60	; 96
     c4c:	b7 da       	rcall	.-2706   	; 0x1bc <read_sensor>
     c4e:	45 c0       	rjmp	.+138    	; 0xcda <__stack+0x1db>

					}
					// Returns hardware/firmware version
					else if(serial_data[1] == '4') {
     c50:	84 33       	cpi	r24, 0x34	; 52
     c52:	61 f4       	brne	.+24     	; 0xc6c <__stack+0x16d>
						send_char(0x05); // Send 5 bytes
     c54:	85 e0       	ldi	r24, 0x05	; 5
     c56:	36 db       	rcall	.-2452   	; 0x2c4 <send_char>
						// hardware version
						send_char(0x03);
     c58:	83 e0       	ldi	r24, 0x03	; 3
     c5a:	34 db       	rcall	.-2456   	; 0x2c4 <send_char>
						send_char(0x00);
     c5c:	80 e0       	ldi	r24, 0x00	; 0
     c5e:	32 db       	rcall	.-2460   	; 0x2c4 <send_char>
						// firmware version
						send_char(MAJOR_FIRMWARE_VERSION);
     c60:	82 e0       	ldi	r24, 0x02	; 2
     c62:	30 db       	rcall	.-2464   	; 0x2c4 <send_char>
						send_char(MINOR_FIRMWARE_VERSION);
     c64:	83 e0       	ldi	r24, 0x03	; 3
     c66:	2e db       	rcall	.-2468   	; 0x2c4 <send_char>
						send_char(MINOR_FIRMWARE_VERSION2);
     c68:	81 e6       	ldi	r24, 0x61	; 97
     c6a:	37 c0       	rjmp	.+110    	; 0xcda <__stack+0x1db>
						}
					// Turns sensor broadcasting on
					else if(serial_data[1] == '5') {
     c6c:	85 33       	cpi	r24, 0x35	; 53
     c6e:	21 f4       	brne	.+8      	; 0xc78 <__stack+0x179>
						sensor_broadcast = 1;
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	80 93 11 01 	sts	0x0111, r24
     c76:	9d ce       	rjmp	.-710    	; 0x9b2 <main+0x246>
						}
					// Turns sensor broadcasting off
					else if(serial_data[1] == '6') {
     c78:	86 33       	cpi	r24, 0x36	; 54
     c7a:	29 f4       	brne	.+10     	; 0xc86 <__stack+0x187>
						sensor_broadcast = 0;
     c7c:	10 92 11 01 	sts	0x0111, r1
						sensor_broadcast_count = 0;
     c80:	10 92 10 01 	sts	0x0110, r1
     c84:	96 ce       	rjmp	.-724    	; 0x9b2 <main+0x246>
						}				
					else if(serial_data[1] == '7') {
     c86:	87 33       	cpi	r24, 0x37	; 55
     c88:	09 f0       	breq	.+2      	; 0xc8c <__stack+0x18d>
     c8a:	93 ce       	rjmp	.-730    	; 0x9b2 <main+0x246>
						send_char(0x12); // Send 18 bytes
     c8c:	82 e1       	ldi	r24, 0x12	; 18
     c8e:	1a db       	rcall	.-2508   	; 0x2c4 <send_char>
     c90:	36 e1       	ldi	r19, 0x16	; 22
     c92:	e3 2e       	mov	r14, r19
     c94:	31 e0       	ldi	r19, 0x01	; 1
     c96:	f3 2e       	mov	r15, r19
						for(int i = 0; i < 10; i++) {
							send_char(led_values_temp[i]);
     c98:	f7 01       	movw	r30, r14
     c9a:	81 91       	ld	r24, Z+
     c9c:	7f 01       	movw	r14, r30
     c9e:	12 db       	rcall	.-2524   	; 0x2c4 <send_char>
						sensor_broadcast = 0;
						sensor_broadcast_count = 0;
						}				
					else if(serial_data[1] == '7') {
						send_char(0x12); // Send 18 bytes
						for(int i = 0; i < 10; i++) {
     ca0:	f0 e2       	ldi	r31, 0x20	; 32
     ca2:	ef 16       	cp	r14, r31
     ca4:	f1 e0       	ldi	r31, 0x01	; 1
     ca6:	ff 06       	cpc	r15, r31
     ca8:	b9 f7       	brne	.-18     	; 0xc98 <__stack+0x199>
     caa:	2e e2       	ldi	r18, 0x2E	; 46
     cac:	e2 2e       	mov	r14, r18
     cae:	21 e0       	ldi	r18, 0x01	; 1
     cb0:	f2 2e       	mov	r15, r18
							send_char(led_values_temp[i]);
						}
						for(int i = 0; i < 4; i++) {
							send_char(servo_values_temp[i]);
     cb2:	f7 01       	movw	r30, r14
     cb4:	81 91       	ld	r24, Z+
     cb6:	7f 01       	movw	r14, r30
     cb8:	05 db       	rcall	.-2550   	; 0x2c4 <send_char>
					else if(serial_data[1] == '7') {
						send_char(0x12); // Send 18 bytes
						for(int i = 0; i < 10; i++) {
							send_char(led_values_temp[i]);
						}
						for(int i = 0; i < 4; i++) {
     cba:	f2 e3       	ldi	r31, 0x32	; 50
     cbc:	ef 16       	cp	r14, r31
     cbe:	f1 e0       	ldi	r31, 0x01	; 1
     cc0:	ff 06       	cpc	r15, r31
     cc2:	b9 f7       	brne	.-18     	; 0xcb2 <__stack+0x1b3>
							send_char(servo_values_temp[i]);
						}
						send_char(vbr_values_temp[0]);
     cc4:	80 91 2c 01 	lds	r24, 0x012C
     cc8:	fd da       	rcall	.-2566   	; 0x2c4 <send_char>
						send_char(vbr_values_temp[1]);
     cca:	80 91 2d 01 	lds	r24, 0x012D
     cce:	fa da       	rcall	.-2572   	; 0x2c4 <send_char>
						
						for(int i = 0; i < 2; i++) {
							send_char(motor_vals_compressed[i]);
     cd0:	80 91 32 01 	lds	r24, 0x0132
     cd4:	f7 da       	rcall	.-2578   	; 0x2c4 <send_char>
     cd6:	80 91 33 01 	lds	r24, 0x0133
     cda:	f4 da       	rcall	.-2584   	; 0x2c4 <send_char>
     cdc:	6a ce       	rjmp	.-812    	; 0x9b2 <main+0x246>
					exit_count = 0;					
				}
				break;
				// Returns an incrementing counter - used to measure cycle time and as a keep-alive.
				case 'z':
					activity_state=1;
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	80 93 14 01 	sts	0x0114, r24
					send_char(0x01); // Send 1 byte
     ce4:	ef da       	rcall	.-2594   	; 0x2c4 <send_char>
					send_char(count);
     ce6:	8a 2d       	mov	r24, r10
     ce8:	ed da       	rcall	.-2598   	; 0x2c4 <send_char>
					count++;
     cea:	2f ef       	ldi	r18, 0xFF	; 255
     cec:	a2 1a       	sub	r10, r18
     cee:	b2 0a       	sbc	r11, r18
					if(count > 255) {
     cf0:	8f ef       	ldi	r24, 0xFF	; 255
     cf2:	a8 16       	cp	r10, r24
     cf4:	b1 04       	cpc	r11, r1
     cf6:	09 f0       	breq	.+2      	; 0xcfa <__stack+0x1fb>
     cf8:	0c f4       	brge	.+2      	; 0xcfc <__stack+0x1fd>
     cfa:	5b ce       	rjmp	.-842    	; 0x9b2 <main+0x246>
		}

		// Check if we've received data over serial, this is experimental
		if(received_data_available()!=0)
		{
			max_count = 5000000; // Set the time out to 5,000,000, so now we time out in 50 seconds instead of 5
     cfc:	90 e4       	ldi	r25, 0x40	; 64
     cfe:	49 2e       	mov	r4, r25
     d00:	9b e4       	ldi	r25, 0x4B	; 75
     d02:	59 2e       	mov	r5, r25
     d04:	9c e4       	ldi	r25, 0x4C	; 76
     d06:	69 2e       	mov	r6, r25
     d08:	71 2c       	mov	r7, r1
					send_char(count);
					count++;
					if(count > 255) {
						count = 0;
					}
					exit_count = 0;
     d0a:	c1 2c       	mov	r12, r1
     d0c:	d1 2c       	mov	r13, r1
     d0e:	76 01       	movw	r14, r12
					activity_state=1;
					send_char(0x01); // Send 1 byte
					send_char(count);
					count++;
					if(count > 255) {
						count = 0;
     d10:	a1 2c       	mov	r10, r1
     d12:	b1 2c       	mov	r11, r1
     d14:	5c cd       	rjmp	.-1352   	; 0x7ce <main+0x62>
		}
		else
		{
			usb_data = 1;
		// HID Reports are 8 bytes long. The first byte specifies the function of that report (set motors, get light sensor values, etc).
			switch(HIDReportEcho.ReportData[0]) {
     d16:	80 91 43 02 	lds	r24, 0x0243
     d1a:	82 35       	cpi	r24, 0x52	; 82
     d1c:	09 f4       	brne	.+2      	; 0xd20 <__stack+0x221>
     d1e:	61 c0       	rjmp	.+194    	; 0xde2 <__stack+0x2e3>
     d20:	c8 f4       	brcc	.+50     	; 0xd54 <__stack+0x255>
     d22:	8c 34       	cpi	r24, 0x4C	; 76
     d24:	61 f1       	breq	.+88     	; 0xd7e <__stack+0x27f>
     d26:	20 f4       	brcc	.+8      	; 0xd30 <__stack+0x231>
     d28:	87 34       	cpi	r24, 0x47	; 71
     d2a:	09 f4       	brne	.+2      	; 0xd2e <__stack+0x22f>
     d2c:	5f c0       	rjmp	.+190    	; 0xdec <__stack+0x2ed>
     d2e:	4f cd       	rjmp	.-1378   	; 0x7ce <main+0x62>
     d30:	8d 34       	cpi	r24, 0x4D	; 77
     d32:	61 f1       	breq	.+88     	; 0xd8c <__stack+0x28d>
     d34:	8f 34       	cpi	r24, 0x4F	; 79
     d36:	09 f0       	breq	.+2      	; 0xd3a <__stack+0x23b>
     d38:	4a cd       	rjmp	.-1388   	; 0x7ce <main+0x62>
				// If O, set an RGB LED using bytes 1-4 of the HID report
				case 'O':
					set_orb(HIDReportEcho.ReportData[1], HIDReportEcho.ReportData[2], HIDReportEcho.ReportData[3], HIDReportEcho.ReportData[4]);
     d3a:	20 91 47 02 	lds	r18, 0x0247
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	40 91 46 02 	lds	r20, 0x0246
     d44:	50 e0       	ldi	r21, 0x00	; 0
     d46:	60 91 45 02 	lds	r22, 0x0245
     d4a:	70 e0       	ldi	r23, 0x00	; 0
     d4c:	80 91 44 02 	lds	r24, 0x0244
     d50:	b6 dc       	rcall	.-1684   	; 0x6be <set_orb>
					break;
     d52:	c6 c0       	rjmp	.+396    	; 0xee0 <__stack+0x3e1>
		}
		else
		{
			usb_data = 1;
		// HID Reports are 8 bytes long. The first byte specifies the function of that report (set motors, get light sensor values, etc).
			switch(HIDReportEcho.ReportData[0]) {
     d54:	88 35       	cpi	r24, 0x58	; 88
     d56:	09 f4       	brne	.+2      	; 0xd5a <__stack+0x25b>
     d58:	44 c0       	rjmp	.+136    	; 0xde2 <__stack+0x2e3>
     d5a:	58 f4       	brcc	.+22     	; 0xd72 <__stack+0x273>
     d5c:	83 35       	cpi	r24, 0x53	; 83
     d5e:	01 f1       	breq	.+64     	; 0xda0 <__stack+0x2a1>
     d60:	86 35       	cpi	r24, 0x56	; 86
     d62:	09 f0       	breq	.+2      	; 0xd66 <__stack+0x267>
     d64:	34 cd       	rjmp	.-1432   	; 0x7ce <main+0x62>
				case 'M':
					set_motor(HIDReportEcho.ReportData[1]-48, HIDReportEcho.ReportData[2]-48, HIDReportEcho.ReportData[3]);
					break;
				// If 'V', use bytes 1-2 to set vibration motor intensity
				case 'V':
					set_vibration_motor(HIDReportEcho.ReportData[1], HIDReportEcho.ReportData[2]);
     d66:	60 91 45 02 	lds	r22, 0x0245
     d6a:	80 91 44 02 	lds	r24, 0x0244
     d6e:	0b db       	rcall	.-2538   	; 0x386 <set_vibration_motor>
					break;
     d70:	b7 c0       	rjmp	.+366    	; 0xee0 <__stack+0x3e1>
		}
		else
		{
			usb_data = 1;
		// HID Reports are 8 bytes long. The first byte specifies the function of that report (set motors, get light sensor values, etc).
			switch(HIDReportEcho.ReportData[0]) {
     d72:	83 37       	cpi	r24, 0x73	; 115
     d74:	e1 f0       	breq	.+56     	; 0xdae <__stack+0x2af>
     d76:	8a 37       	cpi	r24, 0x7A	; 122
     d78:	09 f4       	brne	.+2      	; 0xd7c <__stack+0x27d>
     d7a:	a6 c0       	rjmp	.+332    	; 0xec8 <__stack+0x3c9>
     d7c:	28 cd       	rjmp	.-1456   	; 0x7ce <main+0x62>
				case 'O':
					set_orb(HIDReportEcho.ReportData[1], HIDReportEcho.ReportData[2], HIDReportEcho.ReportData[3], HIDReportEcho.ReportData[4]);
					break;
				// If 'L', set an LED's intensity with bytes 1-2 of the HID report
				case 'L':
					set_led(HIDReportEcho.ReportData[1], HIDReportEcho.ReportData[2]);
     d7e:	60 91 45 02 	lds	r22, 0x0245
     d82:	70 e0       	ldi	r23, 0x00	; 0
     d84:	80 91 44 02 	lds	r24, 0x0244
     d88:	aa dc       	rcall	.-1708   	; 0x6de <set_led>
					break;
     d8a:	aa c0       	rjmp	.+340    	; 0xee0 <__stack+0x3e1>
				// If 'M', use bytes 1-3 to set motor speed and direction
				case 'M':
					set_motor(HIDReportEcho.ReportData[1]-48, HIDReportEcho.ReportData[2]-48, HIDReportEcho.ReportData[3]);
     d8c:	60 91 45 02 	lds	r22, 0x0245
     d90:	60 53       	subi	r22, 0x30	; 48
     d92:	80 91 44 02 	lds	r24, 0x0244
     d96:	40 91 46 02 	lds	r20, 0x0246
     d9a:	80 53       	subi	r24, 0x30	; 48
     d9c:	3b da       	rcall	.-2954   	; 0x214 <set_motor>
					break;
     d9e:	a0 c0       	rjmp	.+320    	; 0xee0 <__stack+0x3e1>
				case 'V':
					set_vibration_motor(HIDReportEcho.ReportData[1], HIDReportEcho.ReportData[2]);
					break;
				// If 'S', use bytes 1-2 to set servo position
				case 'S':
					set_servo(HIDReportEcho.ReportData[1]-48, HIDReportEcho.ReportData[2]);
     da0:	80 91 44 02 	lds	r24, 0x0244
     da4:	60 91 45 02 	lds	r22, 0x0245
     da8:	80 53       	subi	r24, 0x30	; 48
     daa:	66 da       	rcall	.-2868   	; 0x278 <set_servo>
					break;
     dac:	99 c0       	rjmp	.+306    	; 0xee0 <__stack+0x3e1>
				// If 's', return sensor values of the selected sensor port
				case 's':
					if(HIDReportEcho.ReportData[1]=='0')
     dae:	80 91 44 02 	lds	r24, 0x0244
     db2:	80 33       	cpi	r24, 0x30	; 48
     db4:	11 f4       	brne	.+4      	; 0xdba <__stack+0x2bb>
					{
						OutGoingReport.ReportData[0] = read_sensor(SENSOR1);
     db6:	86 e6       	ldi	r24, 0x66	; 102
     db8:	07 c0       	rjmp	.+14     	; 0xdc8 <__stack+0x2c9>
					}
					else if(HIDReportEcho.ReportData[1]=='1')
     dba:	81 33       	cpi	r24, 0x31	; 49
     dbc:	11 f4       	brne	.+4      	; 0xdc2 <__stack+0x2c3>
					{
						OutGoingReport.ReportData[0] = read_sensor(SENSOR2);
     dbe:	85 e6       	ldi	r24, 0x65	; 101
     dc0:	03 c0       	rjmp	.+6      	; 0xdc8 <__stack+0x2c9>
					}
					else if(HIDReportEcho.ReportData[1]=='2')
     dc2:	82 33       	cpi	r24, 0x32	; 50
     dc4:	29 f4       	brne	.+10     	; 0xdd0 <__stack+0x2d1>
					{
						OutGoingReport.ReportData[0] = read_sensor(SENSOR3);
     dc6:	84 e6       	ldi	r24, 0x64	; 100
     dc8:	f9 d9       	rcall	.-3086   	; 0x1bc <read_sensor>
     dca:	80 93 4e 02 	sts	0x024E, r24
     dce:	88 c0       	rjmp	.+272    	; 0xee0 <__stack+0x3e1>
					}
					else if(HIDReportEcho.ReportData[1]=='3')
     dd0:	83 33       	cpi	r24, 0x33	; 51
     dd2:	11 f4       	brne	.+4      	; 0xdd8 <__stack+0x2d9>
					{
						OutGoingReport.ReportData[0] = read_sensor(SENSOR4);
     dd4:	81 e6       	ldi	r24, 0x61	; 97
     dd6:	f8 cf       	rjmp	.-16     	; 0xdc8 <__stack+0x2c9>
					}
					else if(HIDReportEcho.ReportData[1]=='4')
     dd8:	84 33       	cpi	r24, 0x34	; 52
     dda:	09 f0       	breq	.+2      	; 0xdde <__stack+0x2df>
     ddc:	81 c0       	rjmp	.+258    	; 0xee0 <__stack+0x3e1>
					{
						OutGoingReport.ReportData[0] = read_sensor(EXT_PWR);
     dde:	80 e6       	ldi	r24, 0x60	; 96
     de0:	f3 cf       	rjmp	.-26     	; 0xdc8 <__stack+0x2c9>
					disable_servos();
					disable_vibration_motors();
					break;
				// Fast way to turn everything off AND go to idle state
				case 'R':
					turn_off_motors();
     de2:	16 da       	rcall	.-3028   	; 0x210 <turn_off_motors>
					turn_off_leds();
     de4:	93 dc       	rcall	.-1754   	; 0x70c <turn_off_leds>
					disable_servos();
     de6:	46 da       	rcall	.-2932   	; 0x274 <disable_servos>
					disable_vibration_motors();
     de8:	e0 da       	rcall	.-2624   	; 0x3aa <disable_vibration_motors>
					// Turn off everything
					break;
     dea:	7a c0       	rjmp	.+244    	; 0xee0 <__stack+0x3e1>
				case 'G':
					if(HIDReportEcho.ReportData[1] == '0') {
     dec:	80 91 44 02 	lds	r24, 0x0244
     df0:	80 33       	cpi	r24, 0x30	; 48
     df2:	59 f4       	brne	.+22     	; 0xe0a <__stack+0x30b>
     df4:	e6 e1       	ldi	r30, 0x16	; 22
     df6:	f1 e0       	ldi	r31, 0x01	; 1
     df8:	ae e4       	ldi	r26, 0x4E	; 78
     dfa:	b2 e0       	ldi	r27, 0x02	; 2
						for(int i = 0; i < 7; i++) {
							OutGoingReport.ReportData[i] = led_values_temp[i];
     dfc:	81 91       	ld	r24, Z+
     dfe:	8d 93       	st	X+, r24
					disable_vibration_motors();
					// Turn off everything
					break;
				case 'G':
					if(HIDReportEcho.ReportData[1] == '0') {
						for(int i = 0; i < 7; i++) {
     e00:	91 e0       	ldi	r25, 0x01	; 1
     e02:	ed 31       	cpi	r30, 0x1D	; 29
     e04:	f9 07       	cpc	r31, r25
     e06:	d1 f7       	brne	.-12     	; 0xdfc <__stack+0x2fd>
     e08:	6b c0       	rjmp	.+214    	; 0xee0 <__stack+0x3e1>
							OutGoingReport.ReportData[i] = led_values_temp[i];
						}
					}
					else if(HIDReportEcho.ReportData[1] == '1') {
     e0a:	81 33       	cpi	r24, 0x31	; 49
     e0c:	e9 f4       	brne	.+58     	; 0xe48 <__stack+0x349>
						for(int i = 7; i < 10; i++) {
							OutGoingReport.ReportData[i-7] = led_values_temp[i];
     e0e:	80 91 1d 01 	lds	r24, 0x011D
     e12:	80 93 4e 02 	sts	0x024E, r24
     e16:	80 91 1e 01 	lds	r24, 0x011E
     e1a:	80 93 4f 02 	sts	0x024F, r24
     e1e:	80 91 1f 01 	lds	r24, 0x011F
     e22:	80 93 50 02 	sts	0x0250, r24
						}
						for(int i = 0; i < 4; i++) {
							OutGoingReport.ReportData[i+3] = servo_values_temp[i];
     e26:	80 91 2e 01 	lds	r24, 0x012E
     e2a:	80 93 51 02 	sts	0x0251, r24
     e2e:	80 91 2f 01 	lds	r24, 0x012F
     e32:	80 93 52 02 	sts	0x0252, r24
     e36:	80 91 30 01 	lds	r24, 0x0130
     e3a:	80 93 53 02 	sts	0x0253, r24
     e3e:	80 91 31 01 	lds	r24, 0x0131
     e42:	80 93 54 02 	sts	0x0254, r24
     e46:	4c c0       	rjmp	.+152    	; 0xee0 <__stack+0x3e1>
						}
					}
					else if(HIDReportEcho.ReportData[1] == '2') {
     e48:	82 33       	cpi	r24, 0x32	; 50
     e4a:	c9 f4       	brne	.+50     	; 0xe7e <__stack+0x37f>
						for(int i = 0; i < 4; i++) {
							OutGoingReport.ReportData[i] = motor_vals[i];
     e4c:	80 91 34 01 	lds	r24, 0x0134
     e50:	80 93 4e 02 	sts	0x024E, r24
     e54:	80 91 35 01 	lds	r24, 0x0135
     e58:	80 93 4f 02 	sts	0x024F, r24
     e5c:	80 91 36 01 	lds	r24, 0x0136
     e60:	80 93 50 02 	sts	0x0250, r24
     e64:	80 91 37 01 	lds	r24, 0x0137
     e68:	80 93 51 02 	sts	0x0251, r24
						}
						OutGoingReport.ReportData[4] = vbr_values_temp[0];
     e6c:	80 91 2c 01 	lds	r24, 0x012C
     e70:	80 93 52 02 	sts	0x0252, r24
						OutGoingReport.ReportData[5] = vbr_values_temp[1];
     e74:	80 91 2d 01 	lds	r24, 0x012D
     e78:	80 93 53 02 	sts	0x0253, r24
     e7c:	31 c0       	rjmp	.+98     	; 0xee0 <__stack+0x3e1>
					}
					else if(HIDReportEcho.ReportData[1] == '3') {
     e7e:	83 33       	cpi	r24, 0x33	; 51
     e80:	99 f4       	brne	.+38     	; 0xea8 <__stack+0x3a9>
						OutGoingReport.ReportData[0] = read_sensor(SENSOR1);
     e82:	86 e6       	ldi	r24, 0x66	; 102
     e84:	9b d9       	rcall	.-3274   	; 0x1bc <read_sensor>
     e86:	80 93 4e 02 	sts	0x024E, r24
						OutGoingReport.ReportData[1] = read_sensor(SENSOR2);
     e8a:	85 e6       	ldi	r24, 0x65	; 101
     e8c:	97 d9       	rcall	.-3282   	; 0x1bc <read_sensor>
     e8e:	80 93 4f 02 	sts	0x024F, r24
						OutGoingReport.ReportData[2] = read_sensor(SENSOR3);
     e92:	84 e6       	ldi	r24, 0x64	; 100
     e94:	93 d9       	rcall	.-3290   	; 0x1bc <read_sensor>
     e96:	80 93 50 02 	sts	0x0250, r24
						OutGoingReport.ReportData[3] = read_sensor(SENSOR4);
     e9a:	81 e6       	ldi	r24, 0x61	; 97
     e9c:	8f d9       	rcall	.-3298   	; 0x1bc <read_sensor>
     e9e:	80 93 51 02 	sts	0x0251, r24
						OutGoingReport.ReportData[4] = read_sensor(EXT_PWR);
     ea2:	80 e6       	ldi	r24, 0x60	; 96
     ea4:	8b d9       	rcall	.-3306   	; 0x1bc <read_sensor>
     ea6:	0d c0       	rjmp	.+26     	; 0xec2 <__stack+0x3c3>

					}
					// Returns hardware/firmware version
					else if(HIDReportEcho.ReportData[1] == '4') {
     ea8:	84 33       	cpi	r24, 0x34	; 52
     eaa:	d1 f4       	brne	.+52     	; 0xee0 <__stack+0x3e1>
						// hardware version
						OutGoingReport.ReportData[0] = 3;
     eac:	83 e0       	ldi	r24, 0x03	; 3
     eae:	80 93 4e 02 	sts	0x024E, r24
						OutGoingReport.ReportData[1] = 0;
     eb2:	10 92 4f 02 	sts	0x024F, r1
						// firmware version
						OutGoingReport.ReportData[2] = MAJOR_FIRMWARE_VERSION;
     eb6:	92 e0       	ldi	r25, 0x02	; 2
     eb8:	90 93 50 02 	sts	0x0250, r25
						OutGoingReport.ReportData[3] = MINOR_FIRMWARE_VERSION;
     ebc:	80 93 51 02 	sts	0x0251, r24
						OutGoingReport.ReportData[4] = MINOR_FIRMWARE_VERSION2;
     ec0:	81 e6       	ldi	r24, 0x61	; 97
     ec2:	80 93 52 02 	sts	0x0252, r24
     ec6:	0c c0       	rjmp	.+24     	; 0xee0 <__stack+0x3e1>

					}
					break;
				// Returns an incrementing counter - used to measure cycle time and as a keep-alive.
				case 'z':
					OutGoingReport.ReportData[0] = count;
     ec8:	a0 92 4e 02 	sts	0x024E, r10
					count++;
     ecc:	ef ef       	ldi	r30, 0xFF	; 255
     ece:	ae 1a       	sub	r10, r30
     ed0:	be 0a       	sbc	r11, r30
					if(count > 255) {
     ed2:	ff ef       	ldi	r31, 0xFF	; 255
     ed4:	af 16       	cp	r10, r31
     ed6:	b1 04       	cpc	r11, r1
     ed8:	19 f0       	breq	.+6      	; 0xee0 <__stack+0x3e1>
     eda:	14 f0       	brlt	.+4      	; 0xee0 <__stack+0x3e1>
						count = 0;
     edc:	a1 2c       	mov	r10, r1
     ede:	b1 2c       	mov	r11, r1
					break;
			}
			// Only if there was valid data, set the last byte of the outgoing report, and reset the exit_count, max_count things
			if(usb_data == 1) {
				// Reset idle mode
				if(HIDReportEcho.ReportData[0] == 'R')
     ee0:	80 91 43 02 	lds	r24, 0x0243
     ee4:	82 35       	cpi	r24, 0x52	; 82
     ee6:	19 f4       	brne	.+6      	; 0xeee <__stack+0x3ef>
				{
					activity_state = 0;
     ee8:	10 92 14 01 	sts	0x0114, r1
     eec:	03 c0       	rjmp	.+6      	; 0xef4 <__stack+0x3f5>
					exit_count = max_count+5;
				}
				else
					activity_state = 1;
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	80 93 14 01 	sts	0x0114, r24
				HIDReportEcho.ReportData[0] = 0x00;
     ef4:	10 92 43 02 	sts	0x0243, r1
				// Sets last byte of outgoing report to last byte of incoming report so an outgoing report can be matched to its incoming request
				OutGoingReport.ReportData[7]= HIDReportEcho.ReportData[7];
     ef8:	80 91 4a 02 	lds	r24, 0x024A
     efc:	80 93 55 02 	sts	0x0255, r24
				exit_count = 0;
				max_count = 500000;
     f00:	80 e2       	ldi	r24, 0x20	; 32
     f02:	48 2e       	mov	r4, r24
     f04:	81 ea       	ldi	r24, 0xA1	; 161
     f06:	58 2e       	mov	r5, r24
     f08:	87 e0       	ldi	r24, 0x07	; 7
     f0a:	68 2e       	mov	r6, r24
     f0c:	71 2c       	mov	r7, r1
     f0e:	58 cd       	rjmp	.-1360   	; 0x9c0 <main+0x254>

00000f10 <EVENT_USB_Device_Connect>:
}	
*/

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
     f10:	08 95       	ret

00000f12 <EVENT_USB_Device_Disconnect>:
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	activity_state=0;
     f12:	10 92 14 01 	sts	0x0114, r1
	turn_off_motors();
     f16:	7c d9       	rcall	.-3336   	; 0x210 <turn_off_motors>
	turn_off_leds();
     f18:	f9 db       	rcall	.-2062   	; 0x70c <turn_off_leds>
	disable_servos();
     f1a:	ac d9       	rcall	.-3240   	; 0x274 <disable_servos>
	disable_vibration_motors();
     f1c:	46 ca       	rjmp	.-2932   	; 0x3aa <disable_vibration_motors>

00000f1e <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Generic_HID_Interface);
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	91 e0       	ldi	r25, 0x01	; 1
     f22:	56 d6       	rcall	.+3244   	; 0x1bd0 <HID_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     f24:	e2 ee       	ldi	r30, 0xE2	; 226
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	84 60       	ori	r24, 0x04	; 4
     f2c:	80 83       	st	Z, r24
     f2e:	08 95       	ret

00000f30 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&Generic_HID_Interface);
     f30:	80 e0       	ldi	r24, 0x00	; 0
     f32:	91 e0       	ldi	r25, 0x01	; 1
     f34:	19 c5       	rjmp	.+2610   	; 0x1968 <HID_Device_ProcessControlRequest>

00000f36 <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     f36:	80 91 0e 01 	lds	r24, 0x010E
     f3a:	90 91 0f 01 	lds	r25, 0x010F
     f3e:	00 97       	sbiw	r24, 0x00	; 0
     f40:	29 f0       	breq	.+10     	; 0xf4c <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     f42:	01 97       	sbiw	r24, 0x01	; 1
     f44:	90 93 0f 01 	sts	0x010F, r25
     f48:	80 93 0e 01 	sts	0x010E, r24
     f4c:	08 95       	ret

00000f4e <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     f4e:	0f 93       	push	r16
     f50:	1f 93       	push	r17
	if (OutGoingReport.ReportID)
     f52:	90 91 4b 02 	lds	r25, 0x024B
     f56:	99 23       	and	r25, r25
     f58:	11 f0       	breq	.+4      	; 0xf5e <CALLBACK_HID_Device_CreateHIDReport+0x10>
	  *ReportID = OutGoingReport.ReportID;
     f5a:	fb 01       	movw	r30, r22
     f5c:	90 83       	st	Z, r25

	memcpy(ReportData, OutGoingReport.ReportData, OutGoingReport.ReportSize);
     f5e:	40 91 4c 02 	lds	r20, 0x024C
     f62:	50 91 4d 02 	lds	r21, 0x024D
     f66:	6e e4       	ldi	r22, 0x4E	; 78
     f68:	72 e0       	ldi	r23, 0x02	; 2
     f6a:	c9 01       	movw	r24, r18
     f6c:	19 d7       	rcall	.+3634   	; 0x1da0 <memcpy>

	*ReportSize = OutGoingReport.ReportSize;
     f6e:	80 91 4c 02 	lds	r24, 0x024C
     f72:	90 91 4d 02 	lds	r25, 0x024D
     f76:	f8 01       	movw	r30, r16
     f78:	91 83       	std	Z+1, r25	; 0x01
     f7a:	80 83       	st	Z, r24
	return false;
}
     f7c:	80 e0       	ldi	r24, 0x00	; 0
     f7e:	1f 91       	pop	r17
     f80:	0f 91       	pop	r16
     f82:	08 95       	ret

00000f84 <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
     f84:	0f 93       	push	r16
     f86:	1f 93       	push	r17
     f88:	a8 01       	movw	r20, r16
	HIDReportEcho.ReportID   = ReportID;
     f8a:	a0 e4       	ldi	r26, 0x40	; 64
     f8c:	b2 e0       	ldi	r27, 0x02	; 2
     f8e:	6c 93       	st	X, r22
	OutGoingReport.ReportID   = ReportID;
     f90:	eb e4       	ldi	r30, 0x4B	; 75
     f92:	f2 e0       	ldi	r31, 0x02	; 2
     f94:	60 83       	st	Z, r22

	HIDReportEcho.ReportSize = ReportSize;
     f96:	12 96       	adiw	r26, 0x02	; 2
     f98:	1c 93       	st	X, r17
     f9a:	0e 93       	st	-X, r16
     f9c:	11 97       	sbiw	r26, 0x01	; 1
	OutGoingReport.ReportSize = ReportSize;
     f9e:	12 83       	std	Z+2, r17	; 0x02
     fa0:	01 83       	std	Z+1, r16	; 0x01
	memcpy(HIDReportEcho.ReportData, ReportData, ReportSize);
     fa2:	b9 01       	movw	r22, r18
     fa4:	83 e4       	ldi	r24, 0x43	; 67
     fa6:	92 e0       	ldi	r25, 0x02	; 2
}
     fa8:	1f 91       	pop	r17
     faa:	0f 91       	pop	r16
	HIDReportEcho.ReportID   = ReportID;
	OutGoingReport.ReportID   = ReportID;

	HIDReportEcho.ReportSize = ReportSize;
	OutGoingReport.ReportSize = ReportSize;
	memcpy(HIDReportEcho.ReportData, ReportData, ReportSize);
     fac:	f9 c6       	rjmp	.+3570   	; 0x1da0 <memcpy>

00000fae <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
     fae:	29 2f       	mov	r18, r25
     fb0:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     fb2:	23 30       	cpi	r18, 0x03	; 3
     fb4:	31 05       	cpc	r19, r1
     fb6:	e1 f0       	breq	.+56     	; 0xff0 <CALLBACK_USB_GetDescriptor+0x42>
     fb8:	5c f4       	brge	.+22     	; 0xfd0 <CALLBACK_USB_GetDescriptor+0x22>
     fba:	21 30       	cpi	r18, 0x01	; 1
     fbc:	31 05       	cpc	r19, r1
     fbe:	99 f0       	breq	.+38     	; 0xfe6 <CALLBACK_USB_GetDescriptor+0x38>
     fc0:	22 30       	cpi	r18, 0x02	; 2
     fc2:	31 05       	cpc	r19, r1
     fc4:	79 f5       	brne	.+94     	; 0x1024 <CALLBACK_USB_GetDescriptor+0x76>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     fc6:	82 e2       	ldi	r24, 0x22	; 34
     fc8:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     fca:	26 e1       	ldi	r18, 0x16	; 22
     fcc:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     fce:	2e c0       	rjmp	.+92     	; 0x102c <CALLBACK_USB_GetDescriptor+0x7e>
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     fd0:	21 32       	cpi	r18, 0x21	; 33
     fd2:	31 05       	cpc	r19, r1
     fd4:	11 f1       	breq	.+68     	; 0x101a <CALLBACK_USB_GetDescriptor+0x6c>
     fd6:	22 32       	cpi	r18, 0x22	; 34
     fd8:	31 05       	cpc	r19, r1
     fda:	21 f5       	brne	.+72     	; 0x1024 <CALLBACK_USB_GetDescriptor+0x76>
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &GenericReport;
			Size    = sizeof(GenericReport);
     fdc:	80 e2       	ldi	r24, 0x20	; 32
     fde:	90 e0       	ldi	r25, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &GenericReport;
     fe0:	2a e4       	ldi	r18, 0x4A	; 74
     fe2:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(GenericReport);
			break;
     fe4:	23 c0       	rjmp	.+70     	; 0x102c <CALLBACK_USB_GetDescriptor+0x7e>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     fe6:	82 e1       	ldi	r24, 0x12	; 18
     fe8:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     fea:	28 e3       	ldi	r18, 0x38	; 56
     fec:	31 e0       	ldi	r19, 0x01	; 1
     fee:	1e c0       	rjmp	.+60     	; 0x102c <CALLBACK_USB_GetDescriptor+0x7e>
     ff0:	99 27       	eor	r25, r25
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     ff2:	81 30       	cpi	r24, 0x01	; 1
     ff4:	91 05       	cpc	r25, r1
     ff6:	41 f0       	breq	.+16     	; 0x1008 <CALLBACK_USB_GetDescriptor+0x5a>
     ff8:	82 30       	cpi	r24, 0x02	; 2
     ffa:	91 05       	cpc	r25, r1
     ffc:	41 f0       	breq	.+16     	; 0x100e <CALLBACK_USB_GetDescriptor+0x60>
     ffe:	89 2b       	or	r24, r25
    1000:	89 f4       	brne	.+34     	; 0x1024 <CALLBACK_USB_GetDescriptor+0x76>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
    1002:	e2 e1       	ldi	r30, 0x12	; 18
    1004:	f1 e0       	ldi	r31, 0x01	; 1
    1006:	05 c0       	rjmp	.+10     	; 0x1012 <CALLBACK_USB_GetDescriptor+0x64>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    1008:	e2 ee       	ldi	r30, 0xE2	; 226
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <CALLBACK_USB_GetDescriptor+0x64>
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
    100e:	e0 ec       	ldi	r30, 0xC0	; 192
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	84 91       	lpm	r24, Z
    1014:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
    1016:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
    1018:	09 c0       	rjmp	.+18     	; 0x102c <CALLBACK_USB_GetDescriptor+0x7e>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
    101a:	89 e0       	ldi	r24, 0x09	; 9
    101c:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
    101e:	28 e2       	ldi	r18, 0x28	; 40
    1020:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
    1022:	04 c0       	rjmp	.+8      	; 0x102c <CALLBACK_USB_GetDescriptor+0x7e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    1028:	20 e0       	ldi	r18, 0x00	; 0
    102a:	30 e0       	ldi	r19, 0x00	; 0
			Address = &GenericReport;
			Size    = sizeof(GenericReport);
			break;
	}

	*DescriptorAddress = Address;
    102c:	fa 01       	movw	r30, r20
    102e:	31 83       	std	Z+1, r19	; 0x01
    1030:	20 83       	st	Z, r18
	return Size;
}
    1032:	08 95       	ret

00001034 <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1034:	cf 92       	push	r12
    1036:	df 92       	push	r13
    1038:	ef 92       	push	r14
    103a:	ff 92       	push	r15
    103c:	0f 93       	push	r16
    103e:	1f 93       	push	r17
    1040:	cf 93       	push	r28
    1042:	df 93       	push	r29
    1044:	ec 01       	movw	r28, r24
    1046:	8b 01       	movw	r16, r22
    1048:	7a 01       	movw	r14, r20
    104a:	d6 d1       	rcall	.+940    	; 0x13f8 <Endpoint_WaitUntilReady>
    104c:	81 11       	cpse	r24, r1
    104e:	33 c0       	rjmp	.+102    	; 0x10b6 <Endpoint_Write_Stream_LE+0x82>
    1050:	e1 14       	cp	r14, r1
    1052:	f1 04       	cpc	r15, r1
    1054:	39 f0       	breq	.+14     	; 0x1064 <Endpoint_Write_Stream_LE+0x30>
    1056:	f7 01       	movw	r30, r14
    1058:	80 81       	ld	r24, Z
    105a:	91 81       	ldd	r25, Z+1	; 0x01
    105c:	08 1b       	sub	r16, r24
    105e:	19 0b       	sbc	r17, r25
    1060:	c8 0f       	add	r28, r24
    1062:	d9 1f       	adc	r29, r25
    1064:	c1 2c       	mov	r12, r1
    1066:	d1 2c       	mov	r13, r1
    1068:	01 15       	cp	r16, r1
    106a:	11 05       	cpc	r17, r1
    106c:	19 f1       	breq	.+70     	; 0x10b4 <Endpoint_Write_Stream_LE+0x80>
    106e:	80 91 e8 00 	lds	r24, 0x00E8
    1072:	85 fd       	sbrc	r24, 5
    1074:	16 c0       	rjmp	.+44     	; 0x10a2 <Endpoint_Write_Stream_LE+0x6e>
    1076:	80 91 e8 00 	lds	r24, 0x00E8
    107a:	8e 77       	andi	r24, 0x7E	; 126
    107c:	80 93 e8 00 	sts	0x00E8, r24
    1080:	59 d4       	rcall	.+2226   	; 0x1934 <USB_USBTask>
    1082:	e1 14       	cp	r14, r1
    1084:	f1 04       	cpc	r15, r1
    1086:	49 f0       	breq	.+18     	; 0x109a <Endpoint_Write_Stream_LE+0x66>
    1088:	f7 01       	movw	r30, r14
    108a:	80 81       	ld	r24, Z
    108c:	91 81       	ldd	r25, Z+1	; 0x01
    108e:	c8 0e       	add	r12, r24
    1090:	d9 1e       	adc	r13, r25
    1092:	d1 82       	std	Z+1, r13	; 0x01
    1094:	c0 82       	st	Z, r12
    1096:	85 e0       	ldi	r24, 0x05	; 5
    1098:	0e c0       	rjmp	.+28     	; 0x10b6 <Endpoint_Write_Stream_LE+0x82>
    109a:	ae d1       	rcall	.+860    	; 0x13f8 <Endpoint_WaitUntilReady>
    109c:	88 23       	and	r24, r24
    109e:	21 f3       	breq	.-56     	; 0x1068 <Endpoint_Write_Stream_LE+0x34>
    10a0:	0a c0       	rjmp	.+20     	; 0x10b6 <Endpoint_Write_Stream_LE+0x82>
    10a2:	89 91       	ld	r24, Y+
    10a4:	80 93 f1 00 	sts	0x00F1, r24
    10a8:	01 50       	subi	r16, 0x01	; 1
    10aa:	11 09       	sbc	r17, r1
    10ac:	ff ef       	ldi	r31, 0xFF	; 255
    10ae:	cf 1a       	sub	r12, r31
    10b0:	df 0a       	sbc	r13, r31
    10b2:	da cf       	rjmp	.-76     	; 0x1068 <Endpoint_Write_Stream_LE+0x34>
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	df 91       	pop	r29
    10b8:	cf 91       	pop	r28
    10ba:	1f 91       	pop	r17
    10bc:	0f 91       	pop	r16
    10be:	ff 90       	pop	r15
    10c0:	ef 90       	pop	r14
    10c2:	df 90       	pop	r13
    10c4:	cf 90       	pop	r12
    10c6:	08 95       	ret

000010c8 <Endpoint_Write_Control_Stream_LE>:
    10c8:	20 91 63 03 	lds	r18, 0x0363
    10cc:	30 91 64 03 	lds	r19, 0x0364
    10d0:	26 17       	cp	r18, r22
    10d2:	37 07       	cpc	r19, r23
    10d4:	48 f0       	brcs	.+18     	; 0x10e8 <Endpoint_Write_Control_Stream_LE+0x20>
    10d6:	61 15       	cp	r22, r1
    10d8:	71 05       	cpc	r23, r1
    10da:	39 f4       	brne	.+14     	; 0x10ea <Endpoint_Write_Control_Stream_LE+0x22>
    10dc:	20 91 e8 00 	lds	r18, 0x00E8
    10e0:	2e 77       	andi	r18, 0x7E	; 126
    10e2:	20 93 e8 00 	sts	0x00E8, r18
    10e6:	01 c0       	rjmp	.+2      	; 0x10ea <Endpoint_Write_Control_Stream_LE+0x22>
    10e8:	b9 01       	movw	r22, r18
    10ea:	40 e0       	ldi	r20, 0x00	; 0
    10ec:	61 15       	cp	r22, r1
    10ee:	71 05       	cpc	r23, r1
    10f0:	a9 f1       	breq	.+106    	; 0x115c <Endpoint_Write_Control_Stream_LE+0x94>
    10f2:	20 91 5c 03 	lds	r18, 0x035C
    10f6:	22 23       	and	r18, r18
    10f8:	09 f4       	brne	.+2      	; 0x10fc <Endpoint_Write_Control_Stream_LE+0x34>
    10fa:	41 c0       	rjmp	.+130    	; 0x117e <Endpoint_Write_Control_Stream_LE+0xb6>
    10fc:	25 30       	cpi	r18, 0x05	; 5
    10fe:	09 f4       	brne	.+2      	; 0x1102 <Endpoint_Write_Control_Stream_LE+0x3a>
    1100:	40 c0       	rjmp	.+128    	; 0x1182 <Endpoint_Write_Control_Stream_LE+0xba>
    1102:	20 91 e8 00 	lds	r18, 0x00E8
    1106:	23 fd       	sbrc	r18, 3
    1108:	38 c0       	rjmp	.+112    	; 0x117a <Endpoint_Write_Control_Stream_LE+0xb2>
    110a:	20 91 e8 00 	lds	r18, 0x00E8
    110e:	22 fd       	sbrc	r18, 2
    1110:	2e c0       	rjmp	.+92     	; 0x116e <Endpoint_Write_Control_Stream_LE+0xa6>
    1112:	20 91 e8 00 	lds	r18, 0x00E8
    1116:	20 ff       	sbrs	r18, 0
    1118:	e9 cf       	rjmp	.-46     	; 0x10ec <Endpoint_Write_Control_Stream_LE+0x24>
    111a:	40 91 f3 00 	lds	r20, 0x00F3
    111e:	20 91 f2 00 	lds	r18, 0x00F2
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	34 2b       	or	r19, r20
    1126:	fc 01       	movw	r30, r24
    1128:	cf 01       	movw	r24, r30
    112a:	61 15       	cp	r22, r1
    112c:	71 05       	cpc	r23, r1
    112e:	59 f0       	breq	.+22     	; 0x1146 <Endpoint_Write_Control_Stream_LE+0x7e>
    1130:	28 30       	cpi	r18, 0x08	; 8
    1132:	31 05       	cpc	r19, r1
    1134:	40 f4       	brcc	.+16     	; 0x1146 <Endpoint_Write_Control_Stream_LE+0x7e>
    1136:	81 91       	ld	r24, Z+
    1138:	80 93 f1 00 	sts	0x00F1, r24
    113c:	61 50       	subi	r22, 0x01	; 1
    113e:	71 09       	sbc	r23, r1
    1140:	2f 5f       	subi	r18, 0xFF	; 255
    1142:	3f 4f       	sbci	r19, 0xFF	; 255
    1144:	f1 cf       	rjmp	.-30     	; 0x1128 <Endpoint_Write_Control_Stream_LE+0x60>
    1146:	41 e0       	ldi	r20, 0x01	; 1
    1148:	28 30       	cpi	r18, 0x08	; 8
    114a:	31 05       	cpc	r19, r1
    114c:	09 f0       	breq	.+2      	; 0x1150 <Endpoint_Write_Control_Stream_LE+0x88>
    114e:	40 e0       	ldi	r20, 0x00	; 0
    1150:	20 91 e8 00 	lds	r18, 0x00E8
    1154:	2e 77       	andi	r18, 0x7E	; 126
    1156:	20 93 e8 00 	sts	0x00E8, r18
    115a:	c8 cf       	rjmp	.-112    	; 0x10ec <Endpoint_Write_Control_Stream_LE+0x24>
    115c:	41 11       	cpse	r20, r1
    115e:	c9 cf       	rjmp	.-110    	; 0x10f2 <Endpoint_Write_Control_Stream_LE+0x2a>
    1160:	06 c0       	rjmp	.+12     	; 0x116e <Endpoint_Write_Control_Stream_LE+0xa6>
    1162:	80 91 5c 03 	lds	r24, 0x035C
    1166:	88 23       	and	r24, r24
    1168:	51 f0       	breq	.+20     	; 0x117e <Endpoint_Write_Control_Stream_LE+0xb6>
    116a:	85 30       	cpi	r24, 0x05	; 5
    116c:	51 f0       	breq	.+20     	; 0x1182 <Endpoint_Write_Control_Stream_LE+0xba>
    116e:	80 91 e8 00 	lds	r24, 0x00E8
    1172:	82 ff       	sbrs	r24, 2
    1174:	f6 cf       	rjmp	.-20     	; 0x1162 <Endpoint_Write_Control_Stream_LE+0x9a>
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	08 95       	ret
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	08 95       	ret
    117e:	82 e0       	ldi	r24, 0x02	; 2
    1180:	08 95       	ret
    1182:	83 e0       	ldi	r24, 0x03	; 3
    1184:	08 95       	ret

00001186 <Endpoint_Read_Control_Stream_LE>:
    1186:	61 15       	cp	r22, r1
    1188:	71 05       	cpc	r23, r1
    118a:	29 f4       	brne	.+10     	; 0x1196 <Endpoint_Read_Control_Stream_LE+0x10>
    118c:	20 91 e8 00 	lds	r18, 0x00E8
    1190:	2b 77       	andi	r18, 0x7B	; 123
    1192:	20 93 e8 00 	sts	0x00E8, r18
    1196:	fc 01       	movw	r30, r24
    1198:	61 15       	cp	r22, r1
    119a:	71 05       	cpc	r23, r1
    119c:	41 f1       	breq	.+80     	; 0x11ee <Endpoint_Read_Control_Stream_LE+0x68>
    119e:	80 91 5c 03 	lds	r24, 0x035C
    11a2:	88 23       	and	r24, r24
    11a4:	61 f1       	breq	.+88     	; 0x11fe <Endpoint_Read_Control_Stream_LE+0x78>
    11a6:	85 30       	cpi	r24, 0x05	; 5
    11a8:	61 f1       	breq	.+88     	; 0x1202 <Endpoint_Read_Control_Stream_LE+0x7c>
    11aa:	80 91 e8 00 	lds	r24, 0x00E8
    11ae:	83 fd       	sbrc	r24, 3
    11b0:	24 c0       	rjmp	.+72     	; 0x11fa <Endpoint_Read_Control_Stream_LE+0x74>
    11b2:	80 91 e8 00 	lds	r24, 0x00E8
    11b6:	82 ff       	sbrs	r24, 2
    11b8:	ef cf       	rjmp	.-34     	; 0x1198 <Endpoint_Read_Control_Stream_LE+0x12>
    11ba:	20 91 f3 00 	lds	r18, 0x00F3
    11be:	80 91 f2 00 	lds	r24, 0x00F2
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	92 2b       	or	r25, r18
    11c6:	89 2b       	or	r24, r25
    11c8:	31 f0       	breq	.+12     	; 0x11d6 <Endpoint_Read_Control_Stream_LE+0x50>
    11ca:	80 91 f1 00 	lds	r24, 0x00F1
    11ce:	81 93       	st	Z+, r24
    11d0:	61 50       	subi	r22, 0x01	; 1
    11d2:	71 09       	sbc	r23, r1
    11d4:	91 f7       	brne	.-28     	; 0x11ba <Endpoint_Read_Control_Stream_LE+0x34>
    11d6:	80 91 e8 00 	lds	r24, 0x00E8
    11da:	8b 77       	andi	r24, 0x7B	; 123
    11dc:	80 93 e8 00 	sts	0x00E8, r24
    11e0:	db cf       	rjmp	.-74     	; 0x1198 <Endpoint_Read_Control_Stream_LE+0x12>
    11e2:	80 91 5c 03 	lds	r24, 0x035C
    11e6:	88 23       	and	r24, r24
    11e8:	51 f0       	breq	.+20     	; 0x11fe <Endpoint_Read_Control_Stream_LE+0x78>
    11ea:	85 30       	cpi	r24, 0x05	; 5
    11ec:	51 f0       	breq	.+20     	; 0x1202 <Endpoint_Read_Control_Stream_LE+0x7c>
    11ee:	80 91 e8 00 	lds	r24, 0x00E8
    11f2:	80 ff       	sbrs	r24, 0
    11f4:	f6 cf       	rjmp	.-20     	; 0x11e2 <Endpoint_Read_Control_Stream_LE+0x5c>
    11f6:	80 e0       	ldi	r24, 0x00	; 0
    11f8:	08 95       	ret
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	08 95       	ret
    11fe:	82 e0       	ldi	r24, 0x02	; 2
    1200:	08 95       	ret
    1202:	83 e0       	ldi	r24, 0x03	; 3
    1204:	08 95       	ret

00001206 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1206:	20 91 63 03 	lds	r18, 0x0363
    120a:	30 91 64 03 	lds	r19, 0x0364
    120e:	26 17       	cp	r18, r22
    1210:	37 07       	cpc	r19, r23
    1212:	48 f0       	brcs	.+18     	; 0x1226 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1214:	61 15       	cp	r22, r1
    1216:	71 05       	cpc	r23, r1
    1218:	39 f4       	brne	.+14     	; 0x1228 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    121a:	20 91 e8 00 	lds	r18, 0x00E8
    121e:	2e 77       	andi	r18, 0x7E	; 126
    1220:	20 93 e8 00 	sts	0x00E8, r18
    1224:	01 c0       	rjmp	.+2      	; 0x1228 <Endpoint_Write_Control_PStream_LE+0x22>
    1226:	b9 01       	movw	r22, r18
    1228:	fc 01       	movw	r30, r24
    122a:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    122c:	61 15       	cp	r22, r1
    122e:	71 05       	cpc	r23, r1
    1230:	91 f1       	breq	.+100    	; 0x1296 <Endpoint_Write_Control_PStream_LE+0x90>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1232:	80 91 5c 03 	lds	r24, 0x035C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1236:	88 23       	and	r24, r24
    1238:	09 f4       	brne	.+2      	; 0x123c <Endpoint_Write_Control_PStream_LE+0x36>
    123a:	3e c0       	rjmp	.+124    	; 0x12b8 <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    123c:	85 30       	cpi	r24, 0x05	; 5
    123e:	09 f4       	brne	.+2      	; 0x1242 <Endpoint_Write_Control_PStream_LE+0x3c>
    1240:	3d c0       	rjmp	.+122    	; 0x12bc <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1242:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1246:	83 fd       	sbrc	r24, 3
    1248:	35 c0       	rjmp	.+106    	; 0x12b4 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    124a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    124e:	82 fd       	sbrc	r24, 2
    1250:	2b c0       	rjmp	.+86     	; 0x12a8 <Endpoint_Write_Control_PStream_LE+0xa2>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1252:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1256:	80 ff       	sbrs	r24, 0
    1258:	e9 cf       	rjmp	.-46     	; 0x122c <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    125a:	20 91 f3 00 	lds	r18, 0x00F3
    125e:	80 91 f2 00 	lds	r24, 0x00F2
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1266:	61 15       	cp	r22, r1
    1268:	71 05       	cpc	r23, r1
    126a:	59 f0       	breq	.+22     	; 0x1282 <Endpoint_Write_Control_PStream_LE+0x7c>
    126c:	88 30       	cpi	r24, 0x08	; 8
    126e:	91 05       	cpc	r25, r1
    1270:	40 f4       	brcc	.+16     	; 0x1282 <Endpoint_Write_Control_PStream_LE+0x7c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1272:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1274:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1278:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    127a:	61 50       	subi	r22, 0x01	; 1
    127c:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    127e:	01 96       	adiw	r24, 0x01	; 1
    1280:	f2 cf       	rjmp	.-28     	; 0x1266 <Endpoint_Write_Control_PStream_LE+0x60>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1282:	21 e0       	ldi	r18, 0x01	; 1
    1284:	08 97       	sbiw	r24, 0x08	; 8
    1286:	09 f0       	breq	.+2      	; 0x128a <Endpoint_Write_Control_PStream_LE+0x84>
    1288:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    128a:	80 91 e8 00 	lds	r24, 0x00E8
    128e:	8e 77       	andi	r24, 0x7E	; 126
    1290:	80 93 e8 00 	sts	0x00E8, r24
    1294:	cb cf       	rjmp	.-106    	; 0x122c <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1296:	21 11       	cpse	r18, r1
    1298:	cc cf       	rjmp	.-104    	; 0x1232 <Endpoint_Write_Control_PStream_LE+0x2c>
    129a:	06 c0       	rjmp	.+12     	; 0x12a8 <Endpoint_Write_Control_PStream_LE+0xa2>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    129c:	80 91 5c 03 	lds	r24, 0x035C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    12a0:	88 23       	and	r24, r24
    12a2:	51 f0       	breq	.+20     	; 0x12b8 <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    12a4:	85 30       	cpi	r24, 0x05	; 5
    12a6:	51 f0       	breq	.+20     	; 0x12bc <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    12a8:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    12ac:	82 ff       	sbrs	r24, 2
    12ae:	f6 cf       	rjmp	.-20     	; 0x129c <Endpoint_Write_Control_PStream_LE+0x96>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    12b8:	82 e0       	ldi	r24, 0x02	; 2
    12ba:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    12bc:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    12be:	08 95       	ret

000012c0 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    12c0:	98 2f       	mov	r25, r24
    12c2:	97 30       	cpi	r25, 0x07	; 7
    12c4:	58 f5       	brcc	.+86     	; 0x131c <Endpoint_ConfigureEndpoint_Prv+0x5c>
    12c6:	90 93 e9 00 	sts	0x00E9, r25
    12ca:	98 17       	cp	r25, r24
    12cc:	39 f0       	breq	.+14     	; 0x12dc <Endpoint_ConfigureEndpoint_Prv+0x1c>
    12ce:	70 91 ec 00 	lds	r23, 0x00EC
    12d2:	20 91 ed 00 	lds	r18, 0x00ED
    12d6:	50 91 f0 00 	lds	r21, 0x00F0
    12da:	03 c0       	rjmp	.+6      	; 0x12e2 <Endpoint_ConfigureEndpoint_Prv+0x22>
    12dc:	24 2f       	mov	r18, r20
    12de:	76 2f       	mov	r23, r22
    12e0:	50 e0       	ldi	r21, 0x00	; 0
    12e2:	21 ff       	sbrs	r18, 1
    12e4:	19 c0       	rjmp	.+50     	; 0x1318 <Endpoint_ConfigureEndpoint_Prv+0x58>
    12e6:	30 91 eb 00 	lds	r19, 0x00EB
    12ea:	3e 7f       	andi	r19, 0xFE	; 254
    12ec:	30 93 eb 00 	sts	0x00EB, r19
    12f0:	30 91 ed 00 	lds	r19, 0x00ED
    12f4:	3d 7f       	andi	r19, 0xFD	; 253
    12f6:	30 93 ed 00 	sts	0x00ED, r19
    12fa:	30 91 eb 00 	lds	r19, 0x00EB
    12fe:	31 60       	ori	r19, 0x01	; 1
    1300:	30 93 eb 00 	sts	0x00EB, r19
    1304:	70 93 ec 00 	sts	0x00EC, r23
    1308:	20 93 ed 00 	sts	0x00ED, r18
    130c:	50 93 f0 00 	sts	0x00F0, r21
    1310:	20 91 ee 00 	lds	r18, 0x00EE
    1314:	27 ff       	sbrs	r18, 7
    1316:	07 c0       	rjmp	.+14     	; 0x1326 <Endpoint_ConfigureEndpoint_Prv+0x66>
    1318:	9f 5f       	subi	r25, 0xFF	; 255
    131a:	d3 cf       	rjmp	.-90     	; 0x12c2 <Endpoint_ConfigureEndpoint_Prv+0x2>
    131c:	8f 70       	andi	r24, 0x0F	; 15
    131e:	80 93 e9 00 	sts	0x00E9, r24
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	08 95       	ret
    1326:	80 e0       	ldi	r24, 0x00	; 0
    1328:	08 95       	ret

0000132a <Endpoint_ConfigureEndpointTable>:
    132a:	ef 92       	push	r14
    132c:	ff 92       	push	r15
    132e:	0f 93       	push	r16
    1330:	1f 93       	push	r17
    1332:	cf 93       	push	r28
    1334:	df 93       	push	r29
    1336:	e6 2e       	mov	r14, r22
    1338:	ec 01       	movw	r28, r24
    133a:	8c 01       	movw	r16, r24
    133c:	0c 5f       	subi	r16, 0xFC	; 252
    133e:	1f 4f       	sbci	r17, 0xFF	; 255
    1340:	f1 2c       	mov	r15, r1
    1342:	fe 14       	cp	r15, r14
    1344:	91 f1       	breq	.+100    	; 0x13aa <Endpoint_ConfigureEndpointTable+0x80>
    1346:	58 81       	ld	r21, Y
    1348:	55 23       	and	r21, r21
    134a:	51 f1       	breq	.+84     	; 0x13a0 <Endpoint_ConfigureEndpointTable+0x76>
    134c:	f8 01       	movw	r30, r16
    134e:	20 81       	ld	r18, Z
    1350:	69 81       	ldd	r22, Y+1	; 0x01
    1352:	7a 81       	ldd	r23, Y+2	; 0x02
    1354:	31 97       	sbiw	r30, 0x01	; 1
    1356:	90 81       	ld	r25, Z
    1358:	85 2f       	mov	r24, r21
    135a:	8f 70       	andi	r24, 0x0F	; 15
    135c:	87 30       	cpi	r24, 0x07	; 7
    135e:	10 f0       	brcs	.+4      	; 0x1364 <Endpoint_ConfigureEndpointTable+0x3a>
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	24 c0       	rjmp	.+72     	; 0x13ac <Endpoint_ConfigureEndpointTable+0x82>
    1364:	22 30       	cpi	r18, 0x02	; 2
    1366:	10 f4       	brcc	.+4      	; 0x136c <Endpoint_ConfigureEndpointTable+0x42>
    1368:	42 e0       	ldi	r20, 0x02	; 2
    136a:	01 c0       	rjmp	.+2      	; 0x136e <Endpoint_ConfigureEndpointTable+0x44>
    136c:	46 e0       	ldi	r20, 0x06	; 6
    136e:	e8 e0       	ldi	r30, 0x08	; 8
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	20 e0       	ldi	r18, 0x00	; 0
    1374:	e6 17       	cp	r30, r22
    1376:	f7 07       	cpc	r31, r23
    1378:	20 f4       	brcc	.+8      	; 0x1382 <Endpoint_ConfigureEndpointTable+0x58>
    137a:	2f 5f       	subi	r18, 0xFF	; 255
    137c:	ee 0f       	add	r30, r30
    137e:	ff 1f       	adc	r31, r31
    1380:	f9 cf       	rjmp	.-14     	; 0x1374 <Endpoint_ConfigureEndpointTable+0x4a>
    1382:	22 95       	swap	r18
    1384:	20 7f       	andi	r18, 0xF0	; 240
    1386:	42 2b       	or	r20, r18
    1388:	f0 e4       	ldi	r31, 0x40	; 64
    138a:	9f 9f       	mul	r25, r31
    138c:	90 01       	movw	r18, r0
    138e:	11 24       	eor	r1, r1
    1390:	55 1f       	adc	r21, r21
    1392:	55 27       	eor	r21, r21
    1394:	55 1f       	adc	r21, r21
    1396:	65 2f       	mov	r22, r21
    1398:	62 2b       	or	r22, r18
    139a:	92 df       	rcall	.-220    	; 0x12c0 <Endpoint_ConfigureEndpoint_Prv>
    139c:	88 23       	and	r24, r24
    139e:	01 f3       	breq	.-64     	; 0x1360 <Endpoint_ConfigureEndpointTable+0x36>
    13a0:	f3 94       	inc	r15
    13a2:	25 96       	adiw	r28, 0x05	; 5
    13a4:	0b 5f       	subi	r16, 0xFB	; 251
    13a6:	1f 4f       	sbci	r17, 0xFF	; 255
    13a8:	cc cf       	rjmp	.-104    	; 0x1342 <Endpoint_ConfigureEndpointTable+0x18>
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	df 91       	pop	r29
    13ae:	cf 91       	pop	r28
    13b0:	1f 91       	pop	r17
    13b2:	0f 91       	pop	r16
    13b4:	ff 90       	pop	r15
    13b6:	ef 90       	pop	r14
    13b8:	08 95       	ret

000013ba <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    13ba:	80 91 5d 03 	lds	r24, 0x035D
    13be:	87 ff       	sbrs	r24, 7
    13c0:	11 c0       	rjmp	.+34     	; 0x13e4 <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    13c2:	80 91 e8 00 	lds	r24, 0x00E8
	{
		while (!(Endpoint_IsOUTReceived()))
    13c6:	82 fd       	sbrc	r24, 2
    13c8:	05 c0       	rjmp	.+10     	; 0x13d4 <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    13ca:	80 91 5c 03 	lds	r24, 0x035C
    13ce:	81 11       	cpse	r24, r1
    13d0:	f8 cf       	rjmp	.-16     	; 0x13c2 <Endpoint_ClearStatusStage+0x8>
    13d2:	11 c0       	rjmp	.+34     	; 0x13f6 <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    13d4:	80 91 e8 00 	lds	r24, 0x00E8
    13d8:	8b 77       	andi	r24, 0x7B	; 123
    13da:	0b c0       	rjmp	.+22     	; 0x13f2 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    13dc:	80 91 5c 03 	lds	r24, 0x035C
    13e0:	88 23       	and	r24, r24
    13e2:	49 f0       	breq	.+18     	; 0x13f6 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    13e4:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    13e8:	80 ff       	sbrs	r24, 0
    13ea:	f8 cf       	rjmp	.-16     	; 0x13dc <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    13ec:	80 91 e8 00 	lds	r24, 0x00E8
    13f0:	8e 77       	andi	r24, 0x7E	; 126
    13f2:	80 93 e8 00 	sts	0x00E8, r24
    13f6:	08 95       	ret

000013f8 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    13f8:	20 91 e4 00 	lds	r18, 0x00E4
    13fc:	30 91 e5 00 	lds	r19, 0x00E5
    1400:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1402:	40 91 ec 00 	lds	r20, 0x00EC
    1406:	84 2f       	mov	r24, r20
    1408:	81 70       	andi	r24, 0x01	; 1
    140a:	40 ff       	sbrs	r20, 0
    140c:	22 c0       	rjmp	.+68     	; 0x1452 <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    140e:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1412:	80 fd       	sbrc	r24, 0
    1414:	1c c0       	rjmp	.+56     	; 0x144e <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1416:	80 91 5c 03 	lds	r24, 0x035C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    141a:	88 23       	and	r24, r24
    141c:	91 f0       	breq	.+36     	; 0x1442 <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    141e:	85 30       	cpi	r24, 0x05	; 5
    1420:	91 f0       	breq	.+36     	; 0x1446 <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1422:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1426:	85 fd       	sbrc	r24, 5
    1428:	10 c0       	rjmp	.+32     	; 0x144a <Endpoint_WaitUntilReady+0x52>
    142a:	40 91 e4 00 	lds	r20, 0x00E4
    142e:	50 91 e5 00 	lds	r21, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1432:	42 17       	cp	r20, r18
    1434:	53 07       	cpc	r21, r19
    1436:	29 f3       	breq	.-54     	; 0x1402 <Endpoint_WaitUntilReady+0xa>
    1438:	9a 01       	movw	r18, r20
    143a:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    143c:	11 f7       	brne	.-60     	; 0x1402 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    143e:	84 e0       	ldi	r24, 0x04	; 4
    1440:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1442:	82 e0       	ldi	r24, 0x02	; 2
    1444:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1446:	83 e0       	ldi	r24, 0x03	; 3
    1448:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1452:	40 91 e8 00 	lds	r20, 0x00E8
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1456:	42 ff       	sbrs	r20, 2
    1458:	de cf       	rjmp	.-68     	; 0x1416 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    145a:	08 95       	ret

0000145c <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    145c:	0f 93       	push	r16
    145e:	1f 93       	push	r17
    1460:	cf 93       	push	r28
    1462:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1464:	4b d0       	rcall	.+150    	; 0x14fc <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1466:	52 d0       	rcall	.+164    	; 0x150c <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1468:	c8 ed       	ldi	r28, 0xD8	; 216
    146a:	d0 e0       	ldi	r29, 0x00	; 0
    146c:	88 81       	ld	r24, Y
    146e:	8f 77       	andi	r24, 0x7F	; 127
    1470:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    1472:	88 81       	ld	r24, Y
    1474:	80 68       	ori	r24, 0x80	; 128
    1476:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1478:	88 81       	ld	r24, Y
    147a:	8f 7d       	andi	r24, 0xDF	; 223
    147c:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    147e:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1480:	10 92 5c 03 	sts	0x035C, r1
	USB_Device_ConfigurationNumber  = 0;
    1484:	10 92 58 03 	sts	0x0358, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1488:	10 92 5a 03 	sts	0x035A, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    148c:	10 92 59 03 	sts	0x0359, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1490:	00 ee       	ldi	r16, 0xE0	; 224
    1492:	10 e0       	ldi	r17, 0x00	; 0
    1494:	f8 01       	movw	r30, r16
    1496:	80 81       	ld	r24, Z
    1498:	8b 7f       	andi	r24, 0xFB	; 251
    149a:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    149c:	88 81       	ld	r24, Y
    149e:	81 60       	ori	r24, 0x01	; 1
    14a0:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    14a2:	42 e0       	ldi	r20, 0x02	; 2
    14a4:	60 e0       	ldi	r22, 0x00	; 0
    14a6:	80 e0       	ldi	r24, 0x00	; 0
    14a8:	0b df       	rcall	.-490    	; 0x12c0 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    14aa:	e1 ee       	ldi	r30, 0xE1	; 225
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	8e 7f       	andi	r24, 0xFE	; 254
    14b2:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    14b4:	e2 ee       	ldi	r30, 0xE2	; 226
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	81 60       	ori	r24, 0x01	; 1
    14bc:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    14be:	80 81       	ld	r24, Z
    14c0:	88 60       	ori	r24, 0x08	; 8
    14c2:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    14c4:	f8 01       	movw	r30, r16
    14c6:	80 81       	ld	r24, Z
    14c8:	8e 7f       	andi	r24, 0xFE	; 254
    14ca:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    14cc:	88 81       	ld	r24, Y
    14ce:	80 61       	ori	r24, 0x10	; 16
    14d0:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    14d2:	df 91       	pop	r29
    14d4:	cf 91       	pop	r28
    14d6:	1f 91       	pop	r17
    14d8:	0f 91       	pop	r16
    14da:	08 95       	ret

000014dc <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    14dc:	e8 ed       	ldi	r30, 0xD8	; 216
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	8f 7e       	andi	r24, 0xEF	; 239
    14e4:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    14e6:	e7 ed       	ldi	r30, 0xD7	; 215
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	81 60       	ori	r24, 0x01	; 1
    14ee:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    14f0:	84 e0       	ldi	r24, 0x04	; 4
    14f2:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	80 93 5b 03 	sts	0x035B, r24

	USB_ResetInterface();
    14fa:	b0 cf       	rjmp	.-160    	; 0x145c <USB_ResetInterface>

000014fc <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    14fc:	e8 ed       	ldi	r30, 0xD8	; 216
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	8e 7f       	andi	r24, 0xFE	; 254
    1504:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1506:	10 92 e2 00 	sts	0x00E2, r1
    150a:	08 95       	ret

0000150c <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    150c:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1510:	10 92 e1 00 	sts	0x00E1, r1
    1514:	08 95       	ret

00001516 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1516:	1f 92       	push	r1
    1518:	0f 92       	push	r0
    151a:	0f b6       	in	r0, 0x3f	; 63
    151c:	0f 92       	push	r0
    151e:	11 24       	eor	r1, r1
    1520:	2f 93       	push	r18
    1522:	3f 93       	push	r19
    1524:	4f 93       	push	r20
    1526:	5f 93       	push	r21
    1528:	6f 93       	push	r22
    152a:	7f 93       	push	r23
    152c:	8f 93       	push	r24
    152e:	9f 93       	push	r25
    1530:	af 93       	push	r26
    1532:	bf 93       	push	r27
    1534:	ef 93       	push	r30
    1536:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1538:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    153c:	82 ff       	sbrs	r24, 2
    153e:	0a c0       	rjmp	.+20     	; 0x1554 <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1540:	80 91 e2 00 	lds	r24, 0x00E2
    1544:	82 ff       	sbrs	r24, 2
    1546:	06 c0       	rjmp	.+12     	; 0x1554 <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1548:	80 91 e1 00 	lds	r24, 0x00E1
    154c:	8b 7f       	andi	r24, 0xFB	; 251
    154e:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1552:	f1 dc       	rcall	.-1566   	; 0xf36 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1554:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1558:	80 ff       	sbrs	r24, 0
    155a:	1d c0       	rjmp	.+58     	; 0x1596 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    155c:	80 91 d8 00 	lds	r24, 0x00D8
    1560:	80 ff       	sbrs	r24, 0
    1562:	19 c0       	rjmp	.+50     	; 0x1596 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1564:	80 91 da 00 	lds	r24, 0x00DA
    1568:	8e 7f       	andi	r24, 0xFE	; 254
    156a:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    156e:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1572:	80 ff       	sbrs	r24, 0
    1574:	0c c0       	rjmp	.+24     	; 0x158e <__vector_10+0x78>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1576:	80 e1       	ldi	r24, 0x10	; 16
    1578:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    157a:	82 e1       	ldi	r24, 0x12	; 18
    157c:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    157e:	09 b4       	in	r0, 0x29	; 41
    1580:	00 fe       	sbrs	r0, 0
    1582:	fd cf       	rjmp	.-6      	; 0x157e <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	80 93 5c 03 	sts	0x035C, r24
			EVENT_USB_Device_Connect();
    158a:	c2 dc       	rcall	.-1660   	; 0xf10 <EVENT_USB_Device_Connect>
    158c:	04 c0       	rjmp	.+8      	; 0x1596 <__vector_10+0x80>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    158e:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1590:	10 92 5c 03 	sts	0x035C, r1
			EVENT_USB_Device_Disconnect();
    1594:	be dc       	rcall	.-1668   	; 0xf12 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1596:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    159a:	80 ff       	sbrs	r24, 0
    159c:	18 c0       	rjmp	.+48     	; 0x15ce <__vector_10+0xb8>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    159e:	80 91 e2 00 	lds	r24, 0x00E2
    15a2:	80 ff       	sbrs	r24, 0
    15a4:	14 c0       	rjmp	.+40     	; 0x15ce <__vector_10+0xb8>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    15a6:	80 91 e2 00 	lds	r24, 0x00E2
    15aa:	8e 7f       	andi	r24, 0xFE	; 254
    15ac:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    15b0:	80 91 e2 00 	lds	r24, 0x00E2
    15b4:	80 61       	ori	r24, 0x10	; 16
    15b6:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    15ba:	80 91 d8 00 	lds	r24, 0x00D8
    15be:	80 62       	ori	r24, 0x20	; 32
    15c0:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    15c4:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    15c6:	85 e0       	ldi	r24, 0x05	; 5
    15c8:	80 93 5c 03 	sts	0x035C, r24
		EVENT_USB_Device_Suspend();
    15cc:	b2 d1       	rcall	.+868    	; 0x1932 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    15ce:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    15d2:	84 ff       	sbrs	r24, 4
    15d4:	2f c0       	rjmp	.+94     	; 0x1634 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    15d6:	80 91 e2 00 	lds	r24, 0x00E2
    15da:	84 ff       	sbrs	r24, 4
    15dc:	2b c0       	rjmp	.+86     	; 0x1634 <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    15de:	80 e1       	ldi	r24, 0x10	; 16
    15e0:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    15e2:	82 e1       	ldi	r24, 0x12	; 18
    15e4:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    15e6:	09 b4       	in	r0, 0x29	; 41
    15e8:	00 fe       	sbrs	r0, 0
    15ea:	fd cf       	rjmp	.-6      	; 0x15e6 <__vector_10+0xd0>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    15ec:	80 91 d8 00 	lds	r24, 0x00D8
    15f0:	8f 7d       	andi	r24, 0xDF	; 223
    15f2:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    15f6:	80 91 e1 00 	lds	r24, 0x00E1
    15fa:	8f 7e       	andi	r24, 0xEF	; 239
    15fc:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1600:	80 91 e2 00 	lds	r24, 0x00E2
    1604:	8f 7e       	andi	r24, 0xEF	; 239
    1606:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    160a:	80 91 e2 00 	lds	r24, 0x00E2
    160e:	81 60       	ori	r24, 0x01	; 1
    1610:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1614:	80 91 58 03 	lds	r24, 0x0358
    1618:	88 23       	and	r24, r24
    161a:	11 f0       	breq	.+4      	; 0x1620 <__vector_10+0x10a>
		  USB_DeviceState = DEVICE_STATE_Configured;
    161c:	84 e0       	ldi	r24, 0x04	; 4
    161e:	07 c0       	rjmp	.+14     	; 0x162e <__vector_10+0x118>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1620:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1624:	87 fd       	sbrc	r24, 7
    1626:	02 c0       	rjmp	.+4      	; 0x162c <__vector_10+0x116>
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	01 c0       	rjmp	.+2      	; 0x162e <__vector_10+0x118>
    162c:	83 e0       	ldi	r24, 0x03	; 3
    162e:	80 93 5c 03 	sts	0x035C, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1632:	7f d1       	rcall	.+766    	; 0x1932 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1634:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1638:	83 ff       	sbrs	r24, 3
    163a:	22 c0       	rjmp	.+68     	; 0x1680 <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    163c:	80 91 e2 00 	lds	r24, 0x00E2
    1640:	83 ff       	sbrs	r24, 3
    1642:	1e c0       	rjmp	.+60     	; 0x1680 <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1644:	80 91 e1 00 	lds	r24, 0x00E1
    1648:	87 7f       	andi	r24, 0xF7	; 247
    164a:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    164e:	82 e0       	ldi	r24, 0x02	; 2
    1650:	80 93 5c 03 	sts	0x035C, r24
		USB_Device_ConfigurationNumber = 0;
    1654:	10 92 58 03 	sts	0x0358, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1658:	80 91 e1 00 	lds	r24, 0x00E1
    165c:	8e 7f       	andi	r24, 0xFE	; 254
    165e:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1662:	80 91 e2 00 	lds	r24, 0x00E2
    1666:	8e 7f       	andi	r24, 0xFE	; 254
    1668:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    166c:	80 91 e2 00 	lds	r24, 0x00E2
    1670:	80 61       	ori	r24, 0x10	; 16
    1672:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1676:	42 e0       	ldi	r20, 0x02	; 2
    1678:	60 e0       	ldi	r22, 0x00	; 0
    167a:	80 e0       	ldi	r24, 0x00	; 0
    167c:	21 de       	rcall	.-958    	; 0x12c0 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    167e:	59 d1       	rcall	.+690    	; 0x1932 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1680:	ff 91       	pop	r31
    1682:	ef 91       	pop	r30
    1684:	bf 91       	pop	r27
    1686:	af 91       	pop	r26
    1688:	9f 91       	pop	r25
    168a:	8f 91       	pop	r24
    168c:	7f 91       	pop	r23
    168e:	6f 91       	pop	r22
    1690:	5f 91       	pop	r21
    1692:	4f 91       	pop	r20
    1694:	3f 91       	pop	r19
    1696:	2f 91       	pop	r18
    1698:	0f 90       	pop	r0
    169a:	0f be       	out	0x3f, r0	; 63
    169c:	0f 90       	pop	r0
    169e:	1f 90       	pop	r1
    16a0:	18 95       	reti

000016a2 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    16a2:	1f 93       	push	r17
    16a4:	cf 93       	push	r28
    16a6:	df 93       	push	r29
    16a8:	cd b7       	in	r28, 0x3d	; 61
    16aa:	de b7       	in	r29, 0x3e	; 62
    16ac:	aa 97       	sbiw	r28, 0x2a	; 42
    16ae:	0f b6       	in	r0, 0x3f	; 63
    16b0:	f8 94       	cli
    16b2:	de bf       	out	0x3e, r29	; 62
    16b4:	0f be       	out	0x3f, r0	; 63
    16b6:	cd bf       	out	0x3d, r28	; 61
    16b8:	ed e5       	ldi	r30, 0x5D	; 93
    16ba:	f3 e0       	ldi	r31, 0x03	; 3
    16bc:	88 e0       	ldi	r24, 0x08	; 8
    16be:	8e 0f       	add	r24, r30
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    16c0:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    16c4:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    16c6:	8e 13       	cpse	r24, r30
    16c8:	fb cf       	rjmp	.-10     	; 0x16c0 <USB_Device_ProcessControlRequest+0x1e>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    16ca:	32 dc       	rcall	.-1948   	; 0xf30 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    16cc:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    16d0:	83 ff       	sbrs	r24, 3
    16d2:	17 c1       	rjmp	.+558    	; 0x1902 <USB_Device_ProcessControlRequest+0x260>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    16d4:	80 91 5d 03 	lds	r24, 0x035D

		switch (USB_ControlRequest.bRequest)
    16d8:	90 91 5e 03 	lds	r25, 0x035E
    16dc:	49 2f       	mov	r20, r25
    16de:	50 e0       	ldi	r21, 0x00	; 0
    16e0:	4a 30       	cpi	r20, 0x0A	; 10
    16e2:	51 05       	cpc	r21, r1
    16e4:	08 f0       	brcs	.+2      	; 0x16e8 <USB_Device_ProcessControlRequest+0x46>
    16e6:	0d c1       	rjmp	.+538    	; 0x1902 <USB_Device_ProcessControlRequest+0x260>
    16e8:	fa 01       	movw	r30, r20
    16ea:	ea 5a       	subi	r30, 0xAA	; 170
    16ec:	ff 4f       	sbci	r31, 0xFF	; 255
    16ee:	45 c3       	rjmp	.+1674   	; 0x1d7a <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    16f0:	80 38       	cpi	r24, 0x80	; 128
    16f2:	81 f0       	breq	.+32     	; 0x1714 <USB_Device_ProcessControlRequest+0x72>
    16f4:	82 38       	cpi	r24, 0x82	; 130
    16f6:	09 f0       	breq	.+2      	; 0x16fa <USB_Device_ProcessControlRequest+0x58>
    16f8:	04 c1       	rjmp	.+520    	; 0x1902 <USB_Device_ProcessControlRequest+0x260>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    16fa:	80 91 61 03 	lds	r24, 0x0361
    16fe:	8f 70       	andi	r24, 0x0F	; 15
    1700:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1704:	80 91 eb 00 	lds	r24, 0x00EB
    1708:	85 fb       	bst	r24, 5
    170a:	88 27       	eor	r24, r24
    170c:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    170e:	10 92 e9 00 	sts	0x00E9, r1
    1712:	06 c0       	rjmp	.+12     	; 0x1720 <USB_Device_ProcessControlRequest+0x7e>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1714:	80 91 59 03 	lds	r24, 0x0359
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1718:	90 91 5a 03 	lds	r25, 0x035A
    171c:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    171e:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1720:	90 91 e8 00 	lds	r25, 0x00E8
    1724:	97 7f       	andi	r25, 0xF7	; 247
    1726:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    172a:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    172e:	10 92 f1 00 	sts	0x00F1, r1
    1732:	c4 c0       	rjmp	.+392    	; 0x18bc <USB_Device_ProcessControlRequest+0x21a>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1734:	28 2f       	mov	r18, r24
    1736:	2d 7f       	andi	r18, 0xFD	; 253
    1738:	09 f0       	breq	.+2      	; 0x173c <USB_Device_ProcessControlRequest+0x9a>
    173a:	e3 c0       	rjmp	.+454    	; 0x1902 <USB_Device_ProcessControlRequest+0x260>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    173c:	88 23       	and	r24, r24
    173e:	19 f0       	breq	.+6      	; 0x1746 <USB_Device_ProcessControlRequest+0xa4>
    1740:	82 30       	cpi	r24, 0x02	; 2
    1742:	61 f0       	breq	.+24     	; 0x175c <USB_Device_ProcessControlRequest+0xba>
    1744:	de c0       	rjmp	.+444    	; 0x1902 <USB_Device_ProcessControlRequest+0x260>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1746:	80 91 5f 03 	lds	r24, 0x035F
    174a:	81 30       	cpi	r24, 0x01	; 1
    174c:	09 f0       	breq	.+2      	; 0x1750 <USB_Device_ProcessControlRequest+0xae>
    174e:	d9 c0       	rjmp	.+434    	; 0x1902 <USB_Device_ProcessControlRequest+0x260>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1750:	93 30       	cpi	r25, 0x03	; 3
    1752:	09 f0       	breq	.+2      	; 0x1756 <USB_Device_ProcessControlRequest+0xb4>
    1754:	80 e0       	ldi	r24, 0x00	; 0
    1756:	80 93 5a 03 	sts	0x035A, r24
    175a:	2b c0       	rjmp	.+86     	; 0x17b2 <USB_Device_ProcessControlRequest+0x110>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    175c:	80 91 5f 03 	lds	r24, 0x035F
    1760:	81 11       	cpse	r24, r1
    1762:	27 c0       	rjmp	.+78     	; 0x17b2 <USB_Device_ProcessControlRequest+0x110>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1764:	80 91 61 03 	lds	r24, 0x0361
    1768:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    176a:	09 f4       	brne	.+2      	; 0x176e <USB_Device_ProcessControlRequest+0xcc>
    176c:	ca c0       	rjmp	.+404    	; 0x1902 <USB_Device_ProcessControlRequest+0x260>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    176e:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1772:	20 91 eb 00 	lds	r18, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1776:	20 ff       	sbrs	r18, 0
    1778:	1c c0       	rjmp	.+56     	; 0x17b2 <USB_Device_ProcessControlRequest+0x110>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    177a:	93 30       	cpi	r25, 0x03	; 3
    177c:	21 f4       	brne	.+8      	; 0x1786 <USB_Device_ProcessControlRequest+0xe4>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    177e:	80 91 eb 00 	lds	r24, 0x00EB
    1782:	80 62       	ori	r24, 0x20	; 32
    1784:	14 c0       	rjmp	.+40     	; 0x17ae <USB_Device_ProcessControlRequest+0x10c>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1786:	90 91 eb 00 	lds	r25, 0x00EB
    178a:	90 61       	ori	r25, 0x10	; 16
    178c:	90 93 eb 00 	sts	0x00EB, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1790:	21 e0       	ldi	r18, 0x01	; 1
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	a9 01       	movw	r20, r18
    1796:	02 c0       	rjmp	.+4      	; 0x179c <USB_Device_ProcessControlRequest+0xfa>
    1798:	44 0f       	add	r20, r20
    179a:	55 1f       	adc	r21, r21
    179c:	8a 95       	dec	r24
    179e:	e2 f7       	brpl	.-8      	; 0x1798 <USB_Device_ProcessControlRequest+0xf6>
    17a0:	40 93 ea 00 	sts	0x00EA, r20
				UERST = 0;
    17a4:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    17a8:	80 91 eb 00 	lds	r24, 0x00EB
    17ac:	88 60       	ori	r24, 0x08	; 8
    17ae:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    17b2:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    17b6:	80 91 e8 00 	lds	r24, 0x00E8
    17ba:	87 7f       	andi	r24, 0xF7	; 247
    17bc:	82 c0       	rjmp	.+260    	; 0x18c2 <USB_Device_ProcessControlRequest+0x220>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    17be:	81 11       	cpse	r24, r1
    17c0:	a0 c0       	rjmp	.+320    	; 0x1902 <USB_Device_ProcessControlRequest+0x260>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    17c2:	10 91 5f 03 	lds	r17, 0x035F
    17c6:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    17c8:	80 91 e3 00 	lds	r24, 0x00E3
    17cc:	80 78       	andi	r24, 0x80	; 128
    17ce:	81 2b       	or	r24, r17
    17d0:	80 93 e3 00 	sts	0x00E3, r24
    17d4:	80 91 e8 00 	lds	r24, 0x00E8
    17d8:	87 7f       	andi	r24, 0xF7	; 247
    17da:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    17de:	ed dd       	rcall	.-1062   	; 0x13ba <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    17e0:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    17e4:	80 ff       	sbrs	r24, 0
    17e6:	fc cf       	rjmp	.-8      	; 0x17e0 <USB_Device_ProcessControlRequest+0x13e>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
    17e8:	80 91 e3 00 	lds	r24, 0x00E3
    17ec:	80 68       	ori	r24, 0x80	; 128
    17ee:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    17f2:	11 11       	cpse	r17, r1
    17f4:	02 c0       	rjmp	.+4      	; 0x17fa <USB_Device_ProcessControlRequest+0x158>
    17f6:	82 e0       	ldi	r24, 0x02	; 2
    17f8:	01 c0       	rjmp	.+2      	; 0x17fc <USB_Device_ProcessControlRequest+0x15a>
    17fa:	83 e0       	ldi	r24, 0x03	; 3
    17fc:	80 93 5c 03 	sts	0x035C, r24
    1800:	80 c0       	rjmp	.+256    	; 0x1902 <USB_Device_ProcessControlRequest+0x260>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1802:	80 58       	subi	r24, 0x80	; 128
    1804:	82 30       	cpi	r24, 0x02	; 2
    1806:	08 f0       	brcs	.+2      	; 0x180a <USB_Device_ProcessControlRequest+0x168>
    1808:	7c c0       	rjmp	.+248    	; 0x1902 <USB_Device_ProcessControlRequest+0x260>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    180a:	80 91 5f 03 	lds	r24, 0x035F
    180e:	90 91 60 03 	lds	r25, 0x0360
    1812:	8c 3d       	cpi	r24, 0xDC	; 220
    1814:	53 e0       	ldi	r21, 0x03	; 3
    1816:	95 07       	cpc	r25, r21
    1818:	71 f5       	brne	.+92     	; 0x1876 <USB_Device_ProcessControlRequest+0x1d4>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    181a:	83 e0       	ldi	r24, 0x03	; 3
    181c:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    181e:	8a e2       	ldi	r24, 0x2A	; 42
    1820:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1822:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1824:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1826:	de 01       	movw	r26, r28
    1828:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    182a:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    182c:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    182e:	51 e2       	ldi	r21, 0x21	; 33
    1830:	e3 2f       	mov	r30, r19
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	50 93 57 00 	sts	0x0057, r21
    1838:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    183a:	20 ff       	sbrs	r18, 0
    183c:	03 c0       	rjmp	.+6      	; 0x1844 <USB_Device_ProcessControlRequest+0x1a2>
					{
						SerialByte >>= 4;
    183e:	e2 95       	swap	r30
    1840:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1842:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1844:	ef 70       	andi	r30, 0x0F	; 15
    1846:	8e 2f       	mov	r24, r30
    1848:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    184a:	ea 30       	cpi	r30, 0x0A	; 10
    184c:	10 f0       	brcs	.+4      	; 0x1852 <USB_Device_ProcessControlRequest+0x1b0>
    184e:	c7 96       	adiw	r24, 0x37	; 55
    1850:	01 c0       	rjmp	.+2      	; 0x1854 <USB_Device_ProcessControlRequest+0x1b2>
    1852:	c0 96       	adiw	r24, 0x30	; 48
    1854:	8d 93       	st	X+, r24
    1856:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1858:	2f 5f       	subi	r18, 0xFF	; 255
    185a:	24 31       	cpi	r18, 0x14	; 20
    185c:	49 f7       	brne	.-46     	; 0x1830 <USB_Device_ProcessControlRequest+0x18e>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    185e:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1860:	80 91 e8 00 	lds	r24, 0x00E8
    1864:	87 7f       	andi	r24, 0xF7	; 247
    1866:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    186a:	6a e2       	ldi	r22, 0x2A	; 42
    186c:	70 e0       	ldi	r23, 0x00	; 0
    186e:	ce 01       	movw	r24, r28
    1870:	01 96       	adiw	r24, 0x01	; 1
    1872:	2a dc       	rcall	.-1964   	; 0x10c8 <Endpoint_Write_Control_Stream_LE>
    1874:	12 c0       	rjmp	.+36     	; 0x189a <USB_Device_ProcessControlRequest+0x1f8>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1876:	ae 01       	movw	r20, r28
    1878:	4f 5f       	subi	r20, 0xFF	; 255
    187a:	5f 4f       	sbci	r21, 0xFF	; 255
    187c:	60 91 61 03 	lds	r22, 0x0361
    1880:	96 db       	rcall	.-2260   	; 0xfae <CALLBACK_USB_GetDescriptor>
    1882:	bc 01       	movw	r22, r24
    1884:	89 2b       	or	r24, r25
    1886:	09 f4       	brne	.+2      	; 0x188a <USB_Device_ProcessControlRequest+0x1e8>
    1888:	3c c0       	rjmp	.+120    	; 0x1902 <USB_Device_ProcessControlRequest+0x260>
    188a:	90 91 e8 00 	lds	r25, 0x00E8
    188e:	97 7f       	andi	r25, 0xF7	; 247
    1890:	90 93 e8 00 	sts	0x00E8, r25
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1894:	89 81       	ldd	r24, Y+1	; 0x01
    1896:	9a 81       	ldd	r25, Y+2	; 0x02
    1898:	b6 dc       	rcall	.-1684   	; 0x1206 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    189a:	80 91 e8 00 	lds	r24, 0x00E8
    189e:	8b 77       	andi	r24, 0x7B	; 123
    18a0:	80 93 e8 00 	sts	0x00E8, r24
    18a4:	2e c0       	rjmp	.+92     	; 0x1902 <USB_Device_ProcessControlRequest+0x260>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    18a6:	80 38       	cpi	r24, 0x80	; 128
    18a8:	61 f5       	brne	.+88     	; 0x1902 <USB_Device_ProcessControlRequest+0x260>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    18aa:	80 91 e8 00 	lds	r24, 0x00E8
    18ae:	87 7f       	andi	r24, 0xF7	; 247
    18b0:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    18b4:	80 91 58 03 	lds	r24, 0x0358
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    18b8:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    18bc:	80 91 e8 00 	lds	r24, 0x00E8
    18c0:	8e 77       	andi	r24, 0x7E	; 126
    18c2:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    18c6:	79 dd       	rcall	.-1294   	; 0x13ba <Endpoint_ClearStatusStage>
    18c8:	1c c0       	rjmp	.+56     	; 0x1902 <USB_Device_ProcessControlRequest+0x260>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    18ca:	81 11       	cpse	r24, r1
    18cc:	1a c0       	rjmp	.+52     	; 0x1902 <USB_Device_ProcessControlRequest+0x260>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    18ce:	90 91 5f 03 	lds	r25, 0x035F
    18d2:	92 30       	cpi	r25, 0x02	; 2
    18d4:	b0 f4       	brcc	.+44     	; 0x1902 <USB_Device_ProcessControlRequest+0x260>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    18d6:	80 91 e8 00 	lds	r24, 0x00E8
    18da:	87 7f       	andi	r24, 0xF7	; 247
    18dc:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    18e0:	90 93 58 03 	sts	0x0358, r25

	Endpoint_ClearStatusStage();
    18e4:	6a dd       	rcall	.-1324   	; 0x13ba <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    18e6:	80 91 58 03 	lds	r24, 0x0358
    18ea:	81 11       	cpse	r24, r1
    18ec:	06 c0       	rjmp	.+12     	; 0x18fa <USB_Device_ProcessControlRequest+0x258>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    18ee:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    18f2:	87 fd       	sbrc	r24, 7
    18f4:	02 c0       	rjmp	.+4      	; 0x18fa <USB_Device_ProcessControlRequest+0x258>
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	01 c0       	rjmp	.+2      	; 0x18fc <USB_Device_ProcessControlRequest+0x25a>
    18fa:	84 e0       	ldi	r24, 0x04	; 4
    18fc:	80 93 5c 03 	sts	0x035C, r24

	EVENT_USB_Device_ConfigurationChanged();
    1900:	0e db       	rcall	.-2532   	; 0xf1e <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1902:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1906:	83 ff       	sbrs	r24, 3
    1908:	0a c0       	rjmp	.+20     	; 0x191e <USB_Device_ProcessControlRequest+0x27c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    190a:	80 91 e8 00 	lds	r24, 0x00E8
    190e:	87 7f       	andi	r24, 0xF7	; 247
    1910:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1914:	80 91 eb 00 	lds	r24, 0x00EB
    1918:	80 62       	ori	r24, 0x20	; 32
    191a:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    191e:	aa 96       	adiw	r28, 0x2a	; 42
    1920:	0f b6       	in	r0, 0x3f	; 63
    1922:	f8 94       	cli
    1924:	de bf       	out	0x3e, r29	; 62
    1926:	0f be       	out	0x3f, r0	; 63
    1928:	cd bf       	out	0x3d, r28	; 61
    192a:	df 91       	pop	r29
    192c:	cf 91       	pop	r28
    192e:	1f 91       	pop	r17
    1930:	08 95       	ret

00001932 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    1932:	08 95       	ret

00001934 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1934:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    1936:	80 91 5c 03 	lds	r24, 0x035C
    193a:	88 23       	and	r24, r24
    193c:	99 f0       	breq	.+38     	; 0x1964 <USB_USBTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    193e:	c0 91 e9 00 	lds	r28, 0x00E9
    1942:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1944:	90 91 ec 00 	lds	r25, 0x00EC
    1948:	89 2f       	mov	r24, r25
    194a:	81 70       	andi	r24, 0x01	; 1
    194c:	90 fd       	sbrc	r25, 0
    194e:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1950:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1952:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1956:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    195a:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    195c:	a2 de       	rcall	.-700    	; 0x16a2 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    195e:	cf 70       	andi	r28, 0x0F	; 15
    1960:	c0 93 e9 00 	sts	0x00E9, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1964:	cf 91       	pop	r28
    1966:	08 95       	ret

00001968 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1968:	6f 92       	push	r6
    196a:	7f 92       	push	r7
    196c:	8f 92       	push	r8
    196e:	9f 92       	push	r9
    1970:	af 92       	push	r10
    1972:	bf 92       	push	r11
    1974:	cf 92       	push	r12
    1976:	df 92       	push	r13
    1978:	ef 92       	push	r14
    197a:	ff 92       	push	r15
    197c:	0f 93       	push	r16
    197e:	1f 93       	push	r17
    1980:	cf 93       	push	r28
    1982:	df 93       	push	r29
    1984:	00 d0       	rcall	.+0      	; 0x1986 <HID_Device_ProcessControlRequest+0x1e>
    1986:	1f 92       	push	r1
    1988:	cd b7       	in	r28, 0x3d	; 61
    198a:	de b7       	in	r29, 0x3e	; 62
    198c:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    198e:	cd b6       	in	r12, 0x3d	; 61
    1990:	de b6       	in	r13, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1992:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    1996:	83 ff       	sbrs	r24, 3
    1998:	04 c1       	rjmp	.+520    	; 0x1ba2 <HID_Device_ProcessControlRequest+0x23a>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    199a:	f7 01       	movw	r30, r14
    199c:	80 81       	ld	r24, Z
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	20 91 61 03 	lds	r18, 0x0361
    19a4:	30 91 62 03 	lds	r19, 0x0362
    19a8:	28 17       	cp	r18, r24
    19aa:	39 07       	cpc	r19, r25
    19ac:	09 f0       	breq	.+2      	; 0x19b0 <HID_Device_ProcessControlRequest+0x48>
    19ae:	f9 c0       	rjmp	.+498    	; 0x1ba2 <HID_Device_ProcessControlRequest+0x23a>
	  return;

	switch (USB_ControlRequest.bRequest)
    19b0:	80 91 5e 03 	lds	r24, 0x035E
    19b4:	83 30       	cpi	r24, 0x03	; 3
    19b6:	09 f4       	brne	.+2      	; 0x19ba <HID_Device_ProcessControlRequest+0x52>
    19b8:	9b c0       	rjmp	.+310    	; 0x1af0 <HID_Device_ProcessControlRequest+0x188>
    19ba:	30 f4       	brcc	.+12     	; 0x19c8 <HID_Device_ProcessControlRequest+0x60>
    19bc:	81 30       	cpi	r24, 0x01	; 1
    19be:	71 f0       	breq	.+28     	; 0x19dc <HID_Device_ProcessControlRequest+0x74>
    19c0:	82 30       	cpi	r24, 0x02	; 2
    19c2:	09 f4       	brne	.+2      	; 0x19c6 <HID_Device_ProcessControlRequest+0x5e>
    19c4:	d2 c0       	rjmp	.+420    	; 0x1b6a <HID_Device_ProcessControlRequest+0x202>
    19c6:	ed c0       	rjmp	.+474    	; 0x1ba2 <HID_Device_ProcessControlRequest+0x23a>
    19c8:	8a 30       	cpi	r24, 0x0A	; 10
    19ca:	09 f4       	brne	.+2      	; 0x19ce <HID_Device_ProcessControlRequest+0x66>
    19cc:	b6 c0       	rjmp	.+364    	; 0x1b3a <HID_Device_ProcessControlRequest+0x1d2>
    19ce:	8b 30       	cpi	r24, 0x0B	; 11
    19d0:	09 f4       	brne	.+2      	; 0x19d4 <HID_Device_ProcessControlRequest+0x6c>
    19d2:	9f c0       	rjmp	.+318    	; 0x1b12 <HID_Device_ProcessControlRequest+0x1aa>
    19d4:	89 30       	cpi	r24, 0x09	; 9
    19d6:	09 f0       	breq	.+2      	; 0x19da <HID_Device_ProcessControlRequest+0x72>
    19d8:	e4 c0       	rjmp	.+456    	; 0x1ba2 <HID_Device_ProcessControlRequest+0x23a>
    19da:	4d c0       	rjmp	.+154    	; 0x1a76 <HID_Device_ProcessControlRequest+0x10e>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    19dc:	80 91 5d 03 	lds	r24, 0x035D
    19e0:	81 3a       	cpi	r24, 0xA1	; 161
    19e2:	09 f0       	breq	.+2      	; 0x19e6 <HID_Device_ProcessControlRequest+0x7e>
    19e4:	de c0       	rjmp	.+444    	; 0x1ba2 <HID_Device_ProcessControlRequest+0x23a>
    19e6:	8d b6       	in	r8, 0x3d	; 61
    19e8:	9e b6       	in	r9, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
    19ea:	1a 82       	std	Y+2, r1	; 0x02
    19ec:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    19ee:	80 91 5f 03 	lds	r24, 0x035F
    19f2:	10 91 60 03 	lds	r17, 0x0360
    19f6:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    19f8:	f7 01       	movw	r30, r14
    19fa:	80 85       	ldd	r24, Z+8	; 0x08
    19fc:	48 2f       	mov	r20, r24
    19fe:	50 e0       	ldi	r21, 0x00	; 0
    1a00:	8d b7       	in	r24, 0x3d	; 61
    1a02:	9e b7       	in	r25, 0x3e	; 62
    1a04:	84 1b       	sub	r24, r20
    1a06:	95 0b       	sbc	r25, r21
    1a08:	0f b6       	in	r0, 0x3f	; 63
    1a0a:	f8 94       	cli
    1a0c:	9e bf       	out	0x3e, r25	; 62
    1a0e:	0f be       	out	0x3f, r0	; 63
    1a10:	8d bf       	out	0x3d, r24	; 61
    1a12:	ed b7       	in	r30, 0x3d	; 61
    1a14:	fe b7       	in	r31, 0x3e	; 62
    1a16:	31 96       	adiw	r30, 0x01	; 1
    1a18:	5f 01       	movw	r10, r30

				memset(ReportData, 0, sizeof(ReportData));
    1a1a:	60 e0       	ldi	r22, 0x00	; 0
    1a1c:	70 e0       	ldi	r23, 0x00	; 0
    1a1e:	cf 01       	movw	r24, r30
    1a20:	c8 d1       	rcall	.+912    	; 0x1db2 <memset>
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    1a22:	4f ef       	ldi	r20, 0xFF	; 255
    1a24:	41 0f       	add	r20, r17
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    1a26:	8e 01       	movw	r16, r28
    1a28:	0f 5f       	subi	r16, 0xFF	; 255
    1a2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a2c:	95 01       	movw	r18, r10
    1a2e:	be 01       	movw	r22, r28
    1a30:	6d 5f       	subi	r22, 0xFD	; 253
    1a32:	7f 4f       	sbci	r23, 0xFF	; 255
    1a34:	c7 01       	movw	r24, r14
    1a36:	8b da       	rcall	.-2794   	; 0xf4e <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1a38:	f7 01       	movw	r30, r14
    1a3a:	86 81       	ldd	r24, Z+6	; 0x06
    1a3c:	97 81       	ldd	r25, Z+7	; 0x07
    1a3e:	00 97       	sbiw	r24, 0x00	; 0
    1a40:	21 f0       	breq	.+8      	; 0x1a4a <HID_Device_ProcessControlRequest+0xe2>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    1a42:	40 85       	ldd	r20, Z+8	; 0x08
    1a44:	50 e0       	ldi	r21, 0x00	; 0
    1a46:	b5 01       	movw	r22, r10
    1a48:	ab d1       	rcall	.+854    	; 0x1da0 <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1a4a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1a4e:	80 91 e8 00 	lds	r24, 0x00E8
    1a52:	87 7f       	andi	r24, 0xF7	; 247
    1a54:	80 93 e8 00 	sts	0x00E8, r24
				}

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    1a58:	69 81       	ldd	r22, Y+1	; 0x01
    1a5a:	7a 81       	ldd	r23, Y+2	; 0x02
    1a5c:	c5 01       	movw	r24, r10
    1a5e:	34 db       	rcall	.-2456   	; 0x10c8 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1a60:	80 91 e8 00 	lds	r24, 0x00E8
    1a64:	8b 77       	andi	r24, 0x7B	; 123
    1a66:	80 93 e8 00 	sts	0x00E8, r24
    1a6a:	0f b6       	in	r0, 0x3f	; 63
    1a6c:	f8 94       	cli
    1a6e:	9e be       	out	0x3e, r9	; 62
    1a70:	0f be       	out	0x3f, r0	; 63
    1a72:	8d be       	out	0x3d, r8	; 61
    1a74:	96 c0       	rjmp	.+300    	; 0x1ba2 <HID_Device_ProcessControlRequest+0x23a>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1a76:	80 91 5d 03 	lds	r24, 0x035D
    1a7a:	81 32       	cpi	r24, 0x21	; 33
    1a7c:	09 f0       	breq	.+2      	; 0x1a80 <HID_Device_ProcessControlRequest+0x118>
    1a7e:	91 c0       	rjmp	.+290    	; 0x1ba2 <HID_Device_ProcessControlRequest+0x23a>
    1a80:	ad b6       	in	r10, 0x3d	; 61
    1a82:	be b6       	in	r11, 0x3e	; 62
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    1a84:	00 91 63 03 	lds	r16, 0x0363
    1a88:	10 91 64 03 	lds	r17, 0x0364
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    1a8c:	70 90 5f 03 	lds	r7, 0x035F
    1a90:	60 90 60 03 	lds	r6, 0x0360
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    1a94:	8d b7       	in	r24, 0x3d	; 61
    1a96:	9e b7       	in	r25, 0x3e	; 62
    1a98:	80 1b       	sub	r24, r16
    1a9a:	91 0b       	sbc	r25, r17
    1a9c:	0f b6       	in	r0, 0x3f	; 63
    1a9e:	f8 94       	cli
    1aa0:	9e bf       	out	0x3e, r25	; 62
    1aa2:	0f be       	out	0x3f, r0	; 63
    1aa4:	8d bf       	out	0x3d, r24	; 61
    1aa6:	ed b7       	in	r30, 0x3d	; 61
    1aa8:	fe b7       	in	r31, 0x3e	; 62
    1aaa:	31 96       	adiw	r30, 0x01	; 1
    1aac:	4f 01       	movw	r8, r30
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1aae:	80 91 e8 00 	lds	r24, 0x00E8
    1ab2:	87 7f       	andi	r24, 0xF7	; 247
    1ab4:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    1ab8:	b8 01       	movw	r22, r16
    1aba:	cf 01       	movw	r24, r30
    1abc:	64 db       	rcall	.-2360   	; 0x1186 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1abe:	80 91 e8 00 	lds	r24, 0x00E8
    1ac2:	8e 77       	andi	r24, 0x7E	; 126
    1ac4:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    1ac8:	21 e0       	ldi	r18, 0x01	; 1
    1aca:	71 10       	cpse	r7, r1
    1acc:	01 c0       	rjmp	.+2      	; 0x1ad0 <HID_Device_ProcessControlRequest+0x168>
    1ace:	20 e0       	ldi	r18, 0x00	; 0
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	02 1b       	sub	r16, r18
    1ad4:	13 0b       	sbc	r17, r19
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
    1ad6:	28 0d       	add	r18, r8
    1ad8:	39 1d       	adc	r19, r9
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    1ada:	4f ef       	ldi	r20, 0xFF	; 255
    1adc:	46 0d       	add	r20, r6

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    1ade:	67 2d       	mov	r22, r7
    1ae0:	c7 01       	movw	r24, r14
    1ae2:	50 da       	rcall	.-2912   	; 0xf84 <CALLBACK_HID_Device_ProcessHIDReport>
    1ae4:	0f b6       	in	r0, 0x3f	; 63
    1ae6:	f8 94       	cli
    1ae8:	be be       	out	0x3e, r11	; 62
    1aea:	0f be       	out	0x3f, r0	; 63
    1aec:	ad be       	out	0x3d, r10	; 61
    1aee:	59 c0       	rjmp	.+178    	; 0x1ba2 <HID_Device_ProcessControlRequest+0x23a>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1af0:	80 91 5d 03 	lds	r24, 0x035D
    1af4:	81 3a       	cpi	r24, 0xA1	; 161
    1af6:	09 f0       	breq	.+2      	; 0x1afa <HID_Device_ProcessControlRequest+0x192>
    1af8:	54 c0       	rjmp	.+168    	; 0x1ba2 <HID_Device_ProcessControlRequest+0x23a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1afa:	80 91 e8 00 	lds	r24, 0x00E8
    1afe:	87 7f       	andi	r24, 0xF7	; 247
    1b00:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b04:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    1b08:	80 ff       	sbrs	r24, 0
    1b0a:	fc cf       	rjmp	.-8      	; 0x1b04 <HID_Device_ProcessControlRequest+0x19c>
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    1b0c:	f7 01       	movw	r30, r14
    1b0e:	81 85       	ldd	r24, Z+9	; 0x09
    1b10:	40 c0       	rjmp	.+128    	; 0x1b92 <HID_Device_ProcessControlRequest+0x22a>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1b12:	80 91 5d 03 	lds	r24, 0x035D
    1b16:	81 32       	cpi	r24, 0x21	; 33
    1b18:	09 f0       	breq	.+2      	; 0x1b1c <HID_Device_ProcessControlRequest+0x1b4>
    1b1a:	43 c0       	rjmp	.+134    	; 0x1ba2 <HID_Device_ProcessControlRequest+0x23a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1b1c:	80 91 e8 00 	lds	r24, 0x00E8
    1b20:	87 7f       	andi	r24, 0xF7	; 247
    1b22:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1b26:	49 dc       	rcall	.-1902   	; 0x13ba <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    1b28:	90 91 5f 03 	lds	r25, 0x035F
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	91 11       	cpse	r25, r1
    1b30:	01 c0       	rjmp	.+2      	; 0x1b34 <HID_Device_ProcessControlRequest+0x1cc>
    1b32:	80 e0       	ldi	r24, 0x00	; 0
    1b34:	f7 01       	movw	r30, r14
    1b36:	81 87       	std	Z+9, r24	; 0x09
    1b38:	34 c0       	rjmp	.+104    	; 0x1ba2 <HID_Device_ProcessControlRequest+0x23a>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1b3a:	80 91 5d 03 	lds	r24, 0x035D
    1b3e:	81 32       	cpi	r24, 0x21	; 33
    1b40:	81 f5       	brne	.+96     	; 0x1ba2 <HID_Device_ProcessControlRequest+0x23a>
    1b42:	80 91 e8 00 	lds	r24, 0x00E8
    1b46:	87 7f       	andi	r24, 0xF7	; 247
    1b48:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1b4c:	36 dc       	rcall	.-1940   	; 0x13ba <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    1b4e:	80 91 5f 03 	lds	r24, 0x035F
    1b52:	90 91 60 03 	lds	r25, 0x0360
    1b56:	88 27       	eor	r24, r24
    1b58:	36 e0       	ldi	r19, 0x06	; 6
    1b5a:	96 95       	lsr	r25
    1b5c:	87 95       	ror	r24
    1b5e:	3a 95       	dec	r19
    1b60:	e1 f7       	brne	.-8      	; 0x1b5a <HID_Device_ProcessControlRequest+0x1f2>
    1b62:	f7 01       	movw	r30, r14
    1b64:	95 87       	std	Z+13, r25	; 0x0d
    1b66:	84 87       	std	Z+12, r24	; 0x0c
    1b68:	1c c0       	rjmp	.+56     	; 0x1ba2 <HID_Device_ProcessControlRequest+0x23a>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1b6a:	80 91 5d 03 	lds	r24, 0x035D
    1b6e:	81 3a       	cpi	r24, 0xA1	; 161
    1b70:	c1 f4       	brne	.+48     	; 0x1ba2 <HID_Device_ProcessControlRequest+0x23a>
    1b72:	80 91 e8 00 	lds	r24, 0x00E8
    1b76:	87 7f       	andi	r24, 0xF7	; 247
    1b78:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b7c:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    1b80:	80 ff       	sbrs	r24, 0
    1b82:	fc cf       	rjmp	.-8      	; 0x1b7c <HID_Device_ProcessControlRequest+0x214>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    1b84:	f7 01       	movw	r30, r14
    1b86:	84 85       	ldd	r24, Z+12	; 0x0c
    1b88:	95 85       	ldd	r25, Z+13	; 0x0d
    1b8a:	96 95       	lsr	r25
    1b8c:	87 95       	ror	r24
    1b8e:	96 95       	lsr	r25
    1b90:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1b92:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b96:	80 91 e8 00 	lds	r24, 0x00E8
    1b9a:	8e 77       	andi	r24, 0x7E	; 126
    1b9c:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1ba0:	0c dc       	rcall	.-2024   	; 0x13ba <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    1ba2:	0f b6       	in	r0, 0x3f	; 63
    1ba4:	f8 94       	cli
    1ba6:	de be       	out	0x3e, r13	; 62
    1ba8:	0f be       	out	0x3f, r0	; 63
    1baa:	cd be       	out	0x3d, r12	; 61
    1bac:	0f 90       	pop	r0
    1bae:	0f 90       	pop	r0
    1bb0:	0f 90       	pop	r0
    1bb2:	df 91       	pop	r29
    1bb4:	cf 91       	pop	r28
    1bb6:	1f 91       	pop	r17
    1bb8:	0f 91       	pop	r16
    1bba:	ff 90       	pop	r15
    1bbc:	ef 90       	pop	r14
    1bbe:	df 90       	pop	r13
    1bc0:	cf 90       	pop	r12
    1bc2:	bf 90       	pop	r11
    1bc4:	af 90       	pop	r10
    1bc6:	9f 90       	pop	r9
    1bc8:	8f 90       	pop	r8
    1bca:	7f 90       	pop	r7
    1bcc:	6f 90       	pop	r6
    1bce:	08 95       	ret

00001bd0 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    1bd0:	fc 01       	movw	r30, r24
    1bd2:	39 96       	adiw	r30, 0x09	; 9
    1bd4:	27 e0       	ldi	r18, 0x07	; 7
    1bd6:	df 01       	movw	r26, r30
    1bd8:	1d 92       	st	X+, r1
    1bda:	2a 95       	dec	r18
    1bdc:	e9 f7       	brne	.-6      	; 0x1bd8 <HID_Device_ConfigureEndpoints+0x8>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    1bde:	21 e0       	ldi	r18, 0x01	; 1
    1be0:	fc 01       	movw	r30, r24
    1be2:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    1be4:	24 ef       	ldi	r18, 0xF4	; 244
    1be6:	31 e0       	ldi	r19, 0x01	; 1
    1be8:	35 87       	std	Z+13, r19	; 0x0d
    1bea:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    1bec:	23 e0       	ldi	r18, 0x03	; 3
    1bee:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    1bf0:	61 e0       	ldi	r22, 0x01	; 1
    1bf2:	01 96       	adiw	r24, 0x01	; 1
    1bf4:	9a cb       	rjmp	.-2252   	; 0x132a <Endpoint_ConfigureEndpointTable>

00001bf6 <HID_Device_USBTask>:

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1bf6:	4f 92       	push	r4
    1bf8:	5f 92       	push	r5
    1bfa:	6f 92       	push	r6
    1bfc:	7f 92       	push	r7
    1bfe:	8f 92       	push	r8
    1c00:	9f 92       	push	r9
    1c02:	af 92       	push	r10
    1c04:	bf 92       	push	r11
    1c06:	cf 92       	push	r12
    1c08:	df 92       	push	r13
    1c0a:	ef 92       	push	r14
    1c0c:	ff 92       	push	r15
    1c0e:	0f 93       	push	r16
    1c10:	1f 93       	push	r17
    1c12:	cf 93       	push	r28
    1c14:	df 93       	push	r29
    1c16:	00 d0       	rcall	.+0      	; 0x1c18 <HID_Device_USBTask+0x22>
    1c18:	1f 92       	push	r1
    1c1a:	cd b7       	in	r28, 0x3d	; 61
    1c1c:	de b7       	in	r29, 0x3e	; 62
    1c1e:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    1c20:	ad b6       	in	r10, 0x3d	; 61
    1c22:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    1c24:	80 91 5c 03 	lds	r24, 0x035C
    1c28:	84 30       	cpi	r24, 0x04	; 4
    1c2a:	09 f0       	breq	.+2      	; 0x1c2e <HID_Device_USBTask+0x38>
    1c2c:	8d c0       	rjmp	.+282    	; 0x1d48 <HID_Device_USBTask+0x152>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1c2e:	80 91 e4 00 	lds	r24, 0x00E4
    1c32:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    1c36:	f7 01       	movw	r30, r14
    1c38:	22 85       	ldd	r18, Z+10	; 0x0a
    1c3a:	33 85       	ldd	r19, Z+11	; 0x0b
    1c3c:	28 17       	cp	r18, r24
    1c3e:	39 07       	cpc	r19, r25
    1c40:	09 f4       	brne	.+2      	; 0x1c44 <HID_Device_USBTask+0x4e>
    1c42:	82 c0       	rjmp	.+260    	; 0x1d48 <HID_Device_USBTask+0x152>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1c44:	81 81       	ldd	r24, Z+1	; 0x01
    1c46:	8f 70       	andi	r24, 0x0F	; 15
    1c48:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1c4c:	80 91 e8 00 	lds	r24, 0x00E8
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    1c50:	85 ff       	sbrs	r24, 5
    1c52:	7a c0       	rjmp	.+244    	; 0x1d48 <HID_Device_USBTask+0x152>
    1c54:	8d b6       	in	r8, 0x3d	; 61
    1c56:	9e b6       	in	r9, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    1c58:	40 85       	ldd	r20, Z+8	; 0x08
    1c5a:	50 e0       	ldi	r21, 0x00	; 0
    1c5c:	8d b7       	in	r24, 0x3d	; 61
    1c5e:	9e b7       	in	r25, 0x3e	; 62
    1c60:	84 1b       	sub	r24, r20
    1c62:	95 0b       	sbc	r25, r21
    1c64:	0f b6       	in	r0, 0x3f	; 63
    1c66:	f8 94       	cli
    1c68:	9e bf       	out	0x3e, r25	; 62
    1c6a:	0f be       	out	0x3f, r0	; 63
    1c6c:	8d bf       	out	0x3d, r24	; 61
    1c6e:	ed b7       	in	r30, 0x3d	; 61
    1c70:	fe b7       	in	r31, 0x3e	; 62
    1c72:	31 96       	adiw	r30, 0x01	; 1
    1c74:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
    1c76:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
    1c78:	1a 82       	std	Y+2, r1	; 0x02
    1c7a:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
    1c7c:	60 e0       	ldi	r22, 0x00	; 0
    1c7e:	70 e0       	ldi	r23, 0x00	; 0
    1c80:	cf 01       	movw	r24, r30
    1c82:	97 d0       	rcall	.+302    	; 0x1db2 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    1c84:	8e 01       	movw	r16, r28
    1c86:	0f 5f       	subi	r16, 0xFF	; 255
    1c88:	1f 4f       	sbci	r17, 0xFF	; 255
    1c8a:	96 01       	movw	r18, r12
    1c8c:	40 e0       	ldi	r20, 0x00	; 0
    1c8e:	be 01       	movw	r22, r28
    1c90:	6d 5f       	subi	r22, 0xFD	; 253
    1c92:	7f 4f       	sbci	r23, 0xFF	; 255
    1c94:	c7 01       	movw	r24, r14
    1c96:	5b d9       	rcall	.-3402   	; 0xf4e <CALLBACK_HID_Device_CreateHIDReport>
    1c98:	48 2e       	mov	r4, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    1c9a:	f7 01       	movw	r30, r14
    1c9c:	84 85       	ldd	r24, Z+12	; 0x0c
    1c9e:	95 85       	ldd	r25, Z+13	; 0x0d
    1ca0:	89 2b       	or	r24, r25
    1ca2:	51 f0       	breq	.+20     	; 0x1cb8 <HID_Device_USBTask+0xc2>
    1ca4:	91 e0       	ldi	r25, 0x01	; 1
    1ca6:	80 e0       	ldi	r24, 0x00	; 0
    1ca8:	26 85       	ldd	r18, Z+14	; 0x0e
    1caa:	37 85       	ldd	r19, Z+15	; 0x0f
    1cac:	23 2b       	or	r18, r19
    1cae:	09 f0       	breq	.+2      	; 0x1cb2 <HID_Device_USBTask+0xbc>
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	09 2f       	mov	r16, r25
    1cb4:	18 2f       	mov	r17, r24
    1cb6:	02 c0       	rjmp	.+4      	; 0x1cbc <HID_Device_USBTask+0xc6>
    1cb8:	00 e0       	ldi	r16, 0x00	; 0
    1cba:	10 e0       	ldi	r17, 0x00	; 0

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1cbc:	f7 01       	movw	r30, r14
    1cbe:	66 80       	ldd	r6, Z+6	; 0x06
    1cc0:	77 80       	ldd	r7, Z+7	; 0x07
    1cc2:	61 14       	cp	r6, r1
    1cc4:	71 04       	cpc	r7, r1
    1cc6:	89 f0       	breq	.+34     	; 0x1cea <HID_Device_USBTask+0xf4>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    1cc8:	49 81       	ldd	r20, Y+1	; 0x01
    1cca:	5a 81       	ldd	r21, Y+2	; 0x02
    1ccc:	b3 01       	movw	r22, r6
    1cce:	c6 01       	movw	r24, r12
    1cd0:	5a d0       	rcall	.+180    	; 0x1d86 <memcmp>
    1cd2:	55 24       	eor	r5, r5
    1cd4:	53 94       	inc	r5
    1cd6:	89 2b       	or	r24, r25
    1cd8:	09 f4       	brne	.+2      	; 0x1cdc <HID_Device_USBTask+0xe6>
    1cda:	51 2c       	mov	r5, r1
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    1cdc:	f7 01       	movw	r30, r14
    1cde:	40 85       	ldd	r20, Z+8	; 0x08
    1ce0:	50 e0       	ldi	r21, 0x00	; 0
    1ce2:	b6 01       	movw	r22, r12
    1ce4:	c3 01       	movw	r24, r6
    1ce6:	5c d0       	rcall	.+184    	; 0x1da0 <memcpy>
    1ce8:	01 c0       	rjmp	.+2      	; 0x1cec <HID_Device_USBTask+0xf6>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    1cea:	51 2c       	mov	r5, r1
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    1cec:	89 81       	ldd	r24, Y+1	; 0x01
    1cee:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf0:	89 2b       	or	r24, r25
    1cf2:	f1 f0       	breq	.+60     	; 0x1d30 <HID_Device_USBTask+0x13a>
    1cf4:	41 10       	cpse	r4, r1
    1cf6:	04 c0       	rjmp	.+8      	; 0x1d00 <HID_Device_USBTask+0x10a>
    1cf8:	51 10       	cpse	r5, r1
    1cfa:	02 c0       	rjmp	.+4      	; 0x1d00 <HID_Device_USBTask+0x10a>
    1cfc:	01 2b       	or	r16, r17
    1cfe:	c1 f0       	breq	.+48     	; 0x1d30 <HID_Device_USBTask+0x13a>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    1d00:	f7 01       	movw	r30, r14
    1d02:	84 85       	ldd	r24, Z+12	; 0x0c
    1d04:	95 85       	ldd	r25, Z+13	; 0x0d
    1d06:	97 87       	std	Z+15, r25	; 0x0f
    1d08:	86 87       	std	Z+14, r24	; 0x0e
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d0a:	81 81       	ldd	r24, Z+1	; 0x01
    1d0c:	8f 70       	andi	r24, 0x0F	; 15
    1d0e:	80 93 e9 00 	sts	0x00E9, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    1d12:	8b 81       	ldd	r24, Y+3	; 0x03
    1d14:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1d16:	80 93 f1 00 	sts	0x00F1, r24
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    1d1a:	69 81       	ldd	r22, Y+1	; 0x01
    1d1c:	7a 81       	ldd	r23, Y+2	; 0x02
    1d1e:	40 e0       	ldi	r20, 0x00	; 0
    1d20:	50 e0       	ldi	r21, 0x00	; 0
    1d22:	c6 01       	movw	r24, r12
    1d24:	87 d9       	rcall	.-3314   	; 0x1034 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1d26:	80 91 e8 00 	lds	r24, 0x00E8
    1d2a:	8e 77       	andi	r24, 0x7E	; 126
    1d2c:	80 93 e8 00 	sts	0x00E8, r24
    1d30:	80 91 e4 00 	lds	r24, 0x00E4
    1d34:	90 91 e5 00 	lds	r25, 0x00E5

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    1d38:	f7 01       	movw	r30, r14
    1d3a:	93 87       	std	Z+11, r25	; 0x0b
    1d3c:	82 87       	std	Z+10, r24	; 0x0a
    1d3e:	0f b6       	in	r0, 0x3f	; 63
    1d40:	f8 94       	cli
    1d42:	9e be       	out	0x3e, r9	; 62
    1d44:	0f be       	out	0x3f, r0	; 63
    1d46:	8d be       	out	0x3d, r8	; 61
	}
}
    1d48:	0f b6       	in	r0, 0x3f	; 63
    1d4a:	f8 94       	cli
    1d4c:	be be       	out	0x3e, r11	; 62
    1d4e:	0f be       	out	0x3f, r0	; 63
    1d50:	ad be       	out	0x3d, r10	; 61
    1d52:	0f 90       	pop	r0
    1d54:	0f 90       	pop	r0
    1d56:	0f 90       	pop	r0
    1d58:	df 91       	pop	r29
    1d5a:	cf 91       	pop	r28
    1d5c:	1f 91       	pop	r17
    1d5e:	0f 91       	pop	r16
    1d60:	ff 90       	pop	r15
    1d62:	ef 90       	pop	r14
    1d64:	df 90       	pop	r13
    1d66:	cf 90       	pop	r12
    1d68:	bf 90       	pop	r11
    1d6a:	af 90       	pop	r10
    1d6c:	9f 90       	pop	r9
    1d6e:	8f 90       	pop	r8
    1d70:	7f 90       	pop	r7
    1d72:	6f 90       	pop	r6
    1d74:	5f 90       	pop	r5
    1d76:	4f 90       	pop	r4
    1d78:	08 95       	ret

00001d7a <__tablejump2__>:
    1d7a:	ee 0f       	add	r30, r30
    1d7c:	ff 1f       	adc	r31, r31
    1d7e:	05 90       	lpm	r0, Z+
    1d80:	f4 91       	lpm	r31, Z
    1d82:	e0 2d       	mov	r30, r0
    1d84:	09 94       	ijmp

00001d86 <memcmp>:
    1d86:	fb 01       	movw	r30, r22
    1d88:	dc 01       	movw	r26, r24
    1d8a:	04 c0       	rjmp	.+8      	; 0x1d94 <memcmp+0xe>
    1d8c:	8d 91       	ld	r24, X+
    1d8e:	01 90       	ld	r0, Z+
    1d90:	80 19       	sub	r24, r0
    1d92:	21 f4       	brne	.+8      	; 0x1d9c <memcmp+0x16>
    1d94:	41 50       	subi	r20, 0x01	; 1
    1d96:	50 40       	sbci	r21, 0x00	; 0
    1d98:	c8 f7       	brcc	.-14     	; 0x1d8c <memcmp+0x6>
    1d9a:	88 1b       	sub	r24, r24
    1d9c:	99 0b       	sbc	r25, r25
    1d9e:	08 95       	ret

00001da0 <memcpy>:
    1da0:	fb 01       	movw	r30, r22
    1da2:	dc 01       	movw	r26, r24
    1da4:	02 c0       	rjmp	.+4      	; 0x1daa <memcpy+0xa>
    1da6:	01 90       	ld	r0, Z+
    1da8:	0d 92       	st	X+, r0
    1daa:	41 50       	subi	r20, 0x01	; 1
    1dac:	50 40       	sbci	r21, 0x00	; 0
    1dae:	d8 f7       	brcc	.-10     	; 0x1da6 <memcpy+0x6>
    1db0:	08 95       	ret

00001db2 <memset>:
    1db2:	dc 01       	movw	r26, r24
    1db4:	01 c0       	rjmp	.+2      	; 0x1db8 <memset+0x6>
    1db6:	6d 93       	st	X+, r22
    1db8:	41 50       	subi	r20, 0x01	; 1
    1dba:	50 40       	sbci	r21, 0x00	; 0
    1dbc:	e0 f7       	brcc	.-8      	; 0x1db6 <memset+0x4>
    1dbe:	08 95       	ret

00001dc0 <_exit>:
    1dc0:	f8 94       	cli

00001dc2 <__stop_program>:
    1dc2:	ff cf       	rjmp	.-2      	; 0x1dc2 <__stop_program>
