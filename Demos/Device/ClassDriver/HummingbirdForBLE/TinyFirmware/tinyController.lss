
tinyController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ce  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000002ce  00000382  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800064  00800064  00000386  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00000386  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000020  00000000  00000000  00000389  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000ea  00000000  00000000  000003a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000036d  00000000  00000000  00000493  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001c6  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d6  00000000  00000000  000009c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  00000d9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001f0  00000000  00000000  00000e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000012f  00000000  00000000  0000103c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	d1 c0       	rjmp	.+418    	; 0x1b0 <__vector_6>
   e:	21 c1       	rjmp	.+578    	; 0x252 <__vector_7>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf ed       	ldi	r28, 0xDF	; 223
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	ee ec       	ldi	r30, 0xCE	; 206
  32:	f2 e0       	ldi	r31, 0x02	; 2
  34:	02 c0       	rjmp	.+4      	; 0x3a <.do_copy_data_start>

00000036 <.do_copy_data_loop>:
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0

0000003a <.do_copy_data_start>:
  3a:	a4 36       	cpi	r26, 0x64	; 100
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <.do_copy_data_loop>

00000040 <__do_clear_bss>:
  40:	10 e0       	ldi	r17, 0x00	; 0
  42:	a4 e6       	ldi	r26, 0x64	; 100
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a5 37       	cpi	r26, 0x75	; 117
  4c:	b1 07       	cpc	r27, r17
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	4d d0       	rcall	.+154    	; 0xec <main>
  52:	3b c1       	rjmp	.+630    	; 0x2ca <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <init_spi>:
	}

	void init_spi()
	{
		// ensures the direction of the SPI port is all inputs
		DDRA &= (0xFF - _BV(MOSI_PIN) - _BV(SS_PIN) - _BV(SCK_PIN));
  56:	8a b3       	in	r24, 0x1a	; 26
  58:	8f 78       	andi	r24, 0x8F	; 143
  5a:	8a bb       	out	0x1a, r24	; 26

		// Enable the counter interrupt, and 3-wire mode, use external clocking and sample on leading edge
		USICR = _BV(USIWM0) | _BV(USICS1) | _BV(USICS0); // _BV(USIOIE) |
  5c:	8c e1       	ldi	r24, 0x1C	; 28
  5e:	8d b9       	out	0x0d, r24	; 13

		// Clear counter
		USISR &= 0xF0;
  60:	8e b1       	in	r24, 0x0e	; 14
  62:	80 7f       	andi	r24, 0xF0	; 240
  64:	8e b9       	out	0x0e, r24	; 14

	}
  66:	08 95       	ret

00000068 <init_servos>:

	void init_servos()
	{
		servo_count = 0;
  68:	10 92 74 00 	sts	0x0074, r1
		DDRA |= _BV(SERVO0) | _BV(SERVO1) | _BV(SERVO2) | _BV(SERVO3);
  6c:	8a b3       	in	r24, 0x1a	; 26
  6e:	8f 60       	ori	r24, 0x0F	; 15
  70:	8a bb       	out	0x1a, r24	; 26

		// Set pins to normal mode, set waveform to CTC mode (OCR1A becomes top)
		TCCR1A = 0x00;
  72:	1f bc       	out	0x2f, r1	; 47
		// Set clock divider to 1, counting frequency is eight count/1us
		TCCR1B = _BV(WGM12) | _BV(CS10);// |  _BV(CS10);
  74:	89 e0       	ldi	r24, 0x09	; 9
  76:	8e bd       	out	0x2e, r24	; 46

		// Set overflows to occur every 200 Hz
		OCR1A = 40000;//625;
  78:	80 e4       	ldi	r24, 0x40	; 64
  7a:	9c e9       	ldi	r25, 0x9C	; 156
  7c:	9b bd       	out	0x2b, r25	; 43
  7e:	8a bd       	out	0x2a, r24	; 42
		// Enable ocr1a and ocr1b interrupts
		TIMSK1 = _BV(OCIE1B) | _BV(OCIE1A);
  80:	86 e0       	ldi	r24, 0x06	; 6
  82:	8c b9       	out	0x0c, r24	; 12

	}
  84:	08 95       	ret

00000086 <init_motors>:

	void init_motors()
	{
		// set motor pins to output
		DDRA |= _BV(PA7);
  86:	d7 9a       	sbi	0x1a, 7	; 26
		DDRB |= _BV(PB0) | _BV(PB1) | _BV(PB2);
  88:	87 b3       	in	r24, 0x17	; 23
  8a:	87 60       	ori	r24, 0x07	; 7
  8c:	87 bb       	out	0x17, r24	; 23
		// Set to non-inverting fast PWM mode
		TCCR0A = 0xA3; //_BV(COM0A1) | _BV(COM0B1) | _BV(WGM01) | (WGM00);
  8e:	83 ea       	ldi	r24, 0xA3	; 163
  90:	80 bf       	out	0x30, r24	; 48
		// Use the built-in 8 MHz oscillator for clocking
		TCCR0B = 0x01;//_BV(CS00);
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	83 bf       	out	0x33, r24	; 51
	}
  96:	08 95       	ret

00000098 <set_motor>:
	    7 - motor 2 backward
	   value is the power going to the motor */
	void set_motor(uint8_t which, uint8_t value)
	{
		// Set motor 1 or 2
		if(which == 4 || which == 6)
  98:	84 30       	cpi	r24, 0x04	; 4
  9a:	19 f0       	breq	.+6      	; 0xa2 <set_motor+0xa>
  9c:	86 30       	cpi	r24, 0x06	; 6
  9e:	31 f4       	brne	.+12     	; 0xac <set_motor+0x14>
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <set_motor+0xe>
		{
			if(which == 4)
				PORTB |= _BV(PB1);
  a2:	c1 9a       	sbi	0x18, 1	; 24
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <set_motor+0x10>
			else
				PORTB &= ~_BV(PB1);
  a6:	c1 98       	cbi	0x18, 1	; 24
			OCR0B = value;
  a8:	6c bf       	out	0x3c, r22	; 60
  aa:	08 95       	ret
		}
		else
		{
			if(which == 5)
  ac:	85 30       	cpi	r24, 0x05	; 5
  ae:	11 f4       	brne	.+4      	; 0xb4 <set_motor+0x1c>
				PORTB |= _BV(PB0);
  b0:	c0 9a       	sbi	0x18, 0	; 24
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <set_motor+0x1e>
			else
				PORTB &= ~_BV(PB0);
  b4:	c0 98       	cbi	0x18, 0	; 24
			OCR0A = value;
  b6:	66 bf       	out	0x36, r22	; 54
  b8:	08 95       	ret

000000ba <disable_motors>:
		}
	}

	void disable_motors()
	{
		OCR0A = 0;
  ba:	16 be       	out	0x36, r1	; 54
		OCR0B = 0;
  bc:	1c be       	out	0x3c, r1	; 60
	}
  be:	08 95       	ret

000000c0 <disable_servos>:

	// Turns ports to off, and disables the servos
	void disable_servos()
	{
		// Disables servo values
		servo_values_temp[0] = 255*64+MIN_SERVO;
  c0:	80 e8       	ldi	r24, 0x80	; 128
  c2:	92 e5       	ldi	r25, 0x52	; 82
  c4:	90 93 6d 00 	sts	0x006D, r25
  c8:	80 93 6c 00 	sts	0x006C, r24
		servo_values_temp[1] = 255*64+MIN_SERVO;
  cc:	90 93 6f 00 	sts	0x006F, r25
  d0:	80 93 6e 00 	sts	0x006E, r24
		servo_values_temp[2] = 255*64+MIN_SERVO;
  d4:	90 93 71 00 	sts	0x0071, r25
  d8:	80 93 70 00 	sts	0x0070, r24
		servo_values_temp[3] = 255*64+MIN_SERVO;
  dc:	90 93 73 00 	sts	0x0073, r25
  e0:	80 93 72 00 	sts	0x0072, r24
		PORTA &= (0xFF - _BV(SERVO0) - _BV(SERVO1) - _BV(SERVO2) - _BV(SERVO3));
  e4:	8b b3       	in	r24, 0x1b	; 27
  e6:	80 7f       	andi	r24, 0xF0	; 240
  e8:	8b bb       	out	0x1b, r24	; 27
	}
  ea:	08 95       	ret

000000ec <main>:
		.high = 0xDD,
		.extended = 0xFF,
	};

	int main(void)
	{
  ec:	0f 93       	push	r16
  ee:	1f 93       	push	r17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  f0:	80 ed       	ldi	r24, 0xD0	; 208
  f2:	97 e0       	ldi	r25, 0x07	; 7
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <main+0x8>
		uint8_t incoming_byte1=0;
		uint8_t incoming_byte2=0;
		uint8_t state = 0;

		_delay_ms(1);
		init_servos();
  f8:	b7 df       	rcall	.-146    	; 0x68 <init_servos>
		init_motors();
  fa:	c5 df       	rcall	.-118    	; 0x86 <init_motors>
	}

	void init_spi()
	{
		// ensures the direction of the SPI port is all inputs
		DDRA &= (0xFF - _BV(MOSI_PIN) - _BV(SS_PIN) - _BV(SCK_PIN));
  fc:	8a b3       	in	r24, 0x1a	; 26
  fe:	8f 78       	andi	r24, 0x8F	; 143
 100:	8a bb       	out	0x1a, r24	; 26

		// Enable the counter interrupt, and 3-wire mode, use external clocking and sample on leading edge
		USICR = _BV(USIWM0) | _BV(USICS1) | _BV(USICS0); // _BV(USIOIE) |
 102:	8c e1       	ldi	r24, 0x1C	; 28
 104:	8d b9       	out	0x0d, r24	; 13

		// Clear counter
		USISR &= 0xF0;
 106:	8e b1       	in	r24, 0x0e	; 14
 108:	80 7f       	andi	r24, 0xF0	; 240
 10a:	8e b9       	out	0x0e, r24	; 14

		_delay_ms(1);
		init_servos();
		init_motors();
		init_spi();
		disable_servos();
 10c:	d9 df       	rcall	.-78     	; 0xc0 <disable_servos>
		}
	}

	void disable_motors()
	{
		OCR0A = 0;
 10e:	16 be       	out	0x36, r1	; 54
		OCR0B = 0;
 110:	1c be       	out	0x3c, r1	; 60
		init_spi();
		disable_servos();
		disable_motors();

		// init global interrupts
		sei();
 112:	78 94       	sei
 114:	10 e0       	ldi	r17, 0x00	; 0
 116:	33 c0       	rjmp	.+102    	; 0x17e <main+0x92>
 118:	01 e0       	ldi	r16, 0x01	; 1

		while(1) {
			// Only do stuff if Pin A5 is low
			if(!(PINA & _BV(PA5))) {
 11a:	cd 99       	sbic	0x19, 5	; 25
 11c:	fe cf       	rjmp	.-4      	; 0x11a <main+0x2e>
				if(USISR & _BV(USIOIF)) {
 11e:	76 9b       	sbis	0x0e, 6	; 14
 120:	fc cf       	rjmp	.-8      	; 0x11a <main+0x2e>
					// Clear the flag
					USISR |= _BV(USIOIF);
 122:	76 9a       	sbi	0x0e, 6	; 14

					// Clear the counter just in case
					USISR &= 0xF0;
 124:	8e b1       	in	r24, 0x0e	; 14
 126:	80 7f       	andi	r24, 0xF0	; 240
 128:	8e b9       	out	0x0e, r24	; 14

					if(state == 0) {
 12a:	00 23       	and	r16, r16
 12c:	51 f4       	brne	.+20     	; 0x142 <main+0x56>
						incoming_byte1 = USIBR;
 12e:	10 b3       	in	r17, 0x10	; 16
						if(incoming_byte1 == 0xFF) {
 130:	1f 3f       	cpi	r17, 0xFF	; 255
 132:	11 f4       	brne	.+4      	; 0x138 <main+0x4c>
							disable_servos();
 134:	c5 df       	rcall	.-118    	; 0xc0 <disable_servos>
 136:	f1 cf       	rjmp	.-30     	; 0x11a <main+0x2e>
						}
						else if(incoming_byte1 == 0xFE) {
 138:	1e 3f       	cpi	r17, 0xFE	; 254
 13a:	71 f7       	brne	.-36     	; 0x118 <main+0x2c>
		}
	}

	void disable_motors()
	{
		OCR0A = 0;
 13c:	16 be       	out	0x36, r1	; 54
		OCR0B = 0;
 13e:	1c be       	out	0x3c, r1	; 60
 140:	ec cf       	rjmp	.-40     	; 0x11a <main+0x2e>
							state = 1;
						}
					//	printByte(incoming_byte1);
					}
					else {
						incoming_byte2 = USIBR;
 142:	60 b3       	in	r22, 0x10	; 16
						if(incoming_byte1 < 4) {
 144:	14 30       	cpi	r17, 0x04	; 4
 146:	b8 f4       	brcc	.+46     	; 0x176 <main+0x8a>

	// Turns servo pin to output and sets its value
	void set_servo(uint8_t which, uint8_t value)
	{
		// servo value of 255 turns power off to servo, values from 225 to 254 get put at 225 (max range)
		if(value < 255 && value > 225)
 148:	86 2f       	mov	r24, r22
 14a:	82 5e       	subi	r24, 0xE2	; 226
 14c:	8d 31       	cpi	r24, 0x1D	; 29
 14e:	08 f4       	brcc	.+2      	; 0x152 <main+0x66>
 150:	61 ee       	ldi	r22, 0xE1	; 225
			value = 225;

		servo_values_temp[which] = value*64 + MIN_SERVO;
 152:	e1 2f       	mov	r30, r17
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	ee 0f       	add	r30, r30
 158:	ff 1f       	adc	r31, r31
 15a:	e4 59       	subi	r30, 0x94	; 148
 15c:	ff 4f       	sbci	r31, 0xFF	; 255
 15e:	86 2f       	mov	r24, r22
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	85 5b       	subi	r24, 0xB5	; 181
 164:	9f 4f       	sbci	r25, 0xFF	; 255
 166:	26 e0       	ldi	r18, 0x06	; 6
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	2a 95       	dec	r18
 16e:	e1 f7       	brne	.-8      	; 0x168 <main+0x7c>
 170:	91 83       	std	Z+1, r25	; 0x01
 172:	80 83       	st	Z, r24
 174:	04 c0       	rjmp	.+8      	; 0x17e <main+0x92>
					else {
						incoming_byte2 = USIBR;
						if(incoming_byte1 < 4) {
							set_servo(incoming_byte1, incoming_byte2);
						}
						else if(incoming_byte1 < 8){
 176:	18 30       	cpi	r17, 0x08	; 8
 178:	10 f4       	brcc	.+4      	; 0x17e <main+0x92>
							set_motor(incoming_byte1, incoming_byte2);
 17a:	81 2f       	mov	r24, r17
 17c:	8d df       	rcall	.-230    	; 0x98 <set_motor>
 17e:	00 e0       	ldi	r16, 0x00	; 0
 180:	cc cf       	rjmp	.-104    	; 0x11a <main+0x2e>

00000182 <set_servo>:
		PORTA &= (0xFF - _BV(SERVO0) - _BV(SERVO1) - _BV(SERVO2) - _BV(SERVO3));
	}

	// Turns servo pin to output and sets its value
	void set_servo(uint8_t which, uint8_t value)
	{
 182:	e8 2f       	mov	r30, r24
		// servo value of 255 turns power off to servo, values from 225 to 254 get put at 225 (max range)
		if(value < 255 && value > 225)
 184:	86 2f       	mov	r24, r22
 186:	82 5e       	subi	r24, 0xE2	; 226
 188:	8d 31       	cpi	r24, 0x1D	; 29
 18a:	08 f4       	brcc	.+2      	; 0x18e <set_servo+0xc>
 18c:	61 ee       	ldi	r22, 0xE1	; 225
			value = 225;

		servo_values_temp[which] = value*64 + MIN_SERVO;
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	ee 0f       	add	r30, r30
 192:	ff 1f       	adc	r31, r31
 194:	e4 59       	subi	r30, 0x94	; 148
 196:	ff 4f       	sbci	r31, 0xFF	; 255
 198:	86 2f       	mov	r24, r22
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	85 5b       	subi	r24, 0xB5	; 181
 19e:	9f 4f       	sbci	r25, 0xFF	; 255
 1a0:	46 e0       	ldi	r20, 0x06	; 6
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	4a 95       	dec	r20
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <set_servo+0x20>
 1aa:	91 83       	std	Z+1, r25	; 0x01
 1ac:	80 83       	st	Z, r24
	}
 1ae:	08 95       	ret

000001b0 <__vector_6>:

	}*/

	/* Timer 1 compare A interrupt, acting as timer overflow. Set all servo pins high, then set the time to trigger output compare B (which turns them off) */
	ISR(TIM1_COMPA_vect)
	{
 1b0:	1f 92       	push	r1
 1b2:	0f 92       	push	r0
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	0f 92       	push	r0
 1b8:	11 24       	eor	r1, r1
 1ba:	2f 93       	push	r18
 1bc:	8f 93       	push	r24
 1be:	9f 93       	push	r25
 1c0:	af 93       	push	r26
 1c2:	bf 93       	push	r27
 1c4:	ef 93       	push	r30
 1c6:	ff 93       	push	r31
		servo_values[servo_count] = servo_values_temp[servo_count];
 1c8:	a0 91 74 00 	lds	r26, 0x0074
 1cc:	e0 91 74 00 	lds	r30, 0x0074
 1d0:	b0 e0       	ldi	r27, 0x00	; 0
 1d2:	aa 0f       	add	r26, r26
 1d4:	bb 1f       	adc	r27, r27
 1d6:	ac 59       	subi	r26, 0x9C	; 156
 1d8:	bf 4f       	sbci	r27, 0xFF	; 255
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	ee 0f       	add	r30, r30
 1de:	ff 1f       	adc	r31, r31
 1e0:	e4 59       	subi	r30, 0x94	; 148
 1e2:	ff 4f       	sbci	r31, 0xFF	; 255
 1e4:	80 81       	ld	r24, Z
 1e6:	91 81       	ldd	r25, Z+1	; 0x01
 1e8:	8d 93       	st	X+, r24
 1ea:	9c 93       	st	X, r25
		// Generate a pulse (only if the servo is enabled - values greater than 225 disable the servo)
		if(servo_values[servo_count] <= 14400 + MIN_SERVO)
 1ec:	e0 91 74 00 	lds	r30, 0x0074
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	ee 0f       	add	r30, r30
 1f4:	ff 1f       	adc	r31, r31
 1f6:	ec 59       	subi	r30, 0x9C	; 156
 1f8:	ff 4f       	sbci	r31, 0xFF	; 255
 1fa:	80 81       	ld	r24, Z
 1fc:	91 81       	ldd	r25, Z+1	; 0x01
 1fe:	81 50       	subi	r24, 0x01	; 1
 200:	9b 44       	sbci	r25, 0x4B	; 75
 202:	80 f4       	brcc	.+32     	; 0x224 <__vector_6+0x74>
			PORTA |= _BV(servo_ports[servo_count]);
 204:	2b b3       	in	r18, 0x1b	; 27
 206:	e0 91 74 00 	lds	r30, 0x0074
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	e0 5a       	subi	r30, 0xA0	; 160
 20e:	ff 4f       	sbci	r31, 0xFF	; 255
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	00 80       	ld	r0, Z
 216:	02 c0       	rjmp	.+4      	; 0x21c <__vector_6+0x6c>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	0a 94       	dec	r0
 21e:	e2 f7       	brpl	.-8      	; 0x218 <__vector_6+0x68>
 220:	28 2b       	or	r18, r24
 222:	2b bb       	out	0x1b, r18	; 27

		// now set the next interrupt to occur in current time plus the time of the next servo pulse
		OCR1B = servo_values[servo_count];
 224:	e0 91 74 00 	lds	r30, 0x0074
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	ee 0f       	add	r30, r30
 22c:	ff 1f       	adc	r31, r31
 22e:	ec 59       	subi	r30, 0x9C	; 156
 230:	ff 4f       	sbci	r31, 0xFF	; 255
 232:	80 81       	ld	r24, Z
 234:	91 81       	ldd	r25, Z+1	; 0x01
 236:	99 bd       	out	0x29, r25	; 41
 238:	88 bd       	out	0x28, r24	; 40

	}
 23a:	ff 91       	pop	r31
 23c:	ef 91       	pop	r30
 23e:	bf 91       	pop	r27
 240:	af 91       	pop	r26
 242:	9f 91       	pop	r25
 244:	8f 91       	pop	r24
 246:	2f 91       	pop	r18
 248:	0f 90       	pop	r0
 24a:	0f be       	out	0x3f, r0	; 63
 24c:	0f 90       	pop	r0
 24e:	1f 90       	pop	r1
 250:	18 95       	reti

00000252 <__vector_7>:
		specified by the current servo's value
	*/


	ISR(TIM1_COMPB_vect)
	{
 252:	1f 92       	push	r1
 254:	0f 92       	push	r0
 256:	0f b6       	in	r0, 0x3f	; 63
 258:	0f 92       	push	r0
 25a:	11 24       	eor	r1, r1
 25c:	2f 93       	push	r18
 25e:	8f 93       	push	r24
 260:	9f 93       	push	r25
 262:	ef 93       	push	r30
 264:	ff 93       	push	r31
		// turn off the current servo pin (only if the servo is enabled)
		if(servo_values[servo_count] <= 14400 + MIN_SERVO)
 266:	e0 91 74 00 	lds	r30, 0x0074
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	ee 0f       	add	r30, r30
 26e:	ff 1f       	adc	r31, r31
 270:	ec 59       	subi	r30, 0x9C	; 156
 272:	ff 4f       	sbci	r31, 0xFF	; 255
 274:	80 81       	ld	r24, Z
 276:	91 81       	ldd	r25, Z+1	; 0x01
 278:	81 50       	subi	r24, 0x01	; 1
 27a:	9b 44       	sbci	r25, 0x4B	; 75
 27c:	88 f4       	brcc	.+34     	; 0x2a0 <__vector_7+0x4e>
			PORTA &= (0xFF-_BV(servo_ports[servo_count]));
 27e:	2b b3       	in	r18, 0x1b	; 27
 280:	e0 91 74 00 	lds	r30, 0x0074
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	e0 5a       	subi	r30, 0xA0	; 160
 288:	ff 4f       	sbci	r31, 0xFF	; 255
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	00 80       	ld	r0, Z
 290:	02 c0       	rjmp	.+4      	; 0x296 <__vector_7+0x44>
 292:	88 0f       	add	r24, r24
 294:	99 1f       	adc	r25, r25
 296:	0a 94       	dec	r0
 298:	e2 f7       	brpl	.-8      	; 0x292 <__vector_7+0x40>
 29a:	80 95       	com	r24
 29c:	82 23       	and	r24, r18
 29e:	8b bb       	out	0x1b, r24	; 27

		// Incremement which servo we're using
		servo_count++;
 2a0:	80 91 74 00 	lds	r24, 0x0074
 2a4:	8f 5f       	subi	r24, 0xFF	; 255
 2a6:	80 93 74 00 	sts	0x0074, r24
		// We only have servos 0 to 3, so if we're out of limit wrap back to 0
		if(servo_count > 3)
 2aa:	80 91 74 00 	lds	r24, 0x0074
 2ae:	84 30       	cpi	r24, 0x04	; 4
 2b0:	10 f0       	brcs	.+4      	; 0x2b6 <__vector_7+0x64>
			servo_count = 0;
 2b2:	10 92 74 00 	sts	0x0074, r1

	}
 2b6:	ff 91       	pop	r31
 2b8:	ef 91       	pop	r30
 2ba:	9f 91       	pop	r25
 2bc:	8f 91       	pop	r24
 2be:	2f 91       	pop	r18
 2c0:	0f 90       	pop	r0
 2c2:	0f be       	out	0x3f, r0	; 63
 2c4:	0f 90       	pop	r0
 2c6:	1f 90       	pop	r1
 2c8:	18 95       	reti

000002ca <_exit>:
 2ca:	f8 94       	cli

000002cc <__stop_program>:
 2cc:	ff cf       	rjmp	.-2      	; 0x2cc <__stop_program>
