
HummingbirdForBLE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00001cf6  00001d8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001cf6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000253  00800110  00800110  00001d9a  2**0
                  ALLOC
  3 .debug_aranges 00000608  00000000  00000000  00001d9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00001173  00000000  00000000  000023a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000959c  00000000  00000000  00003515  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002455  00000000  00000000  0000cab1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00007ded  00000000  00000000  0000ef06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000009b0  00000000  00000000  00016cf4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00003b7b  00000000  00000000  000176a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003bfb  00000000  00000000  0001b21f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000798  00000000  00000000  0001ee1a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
       0:	aa c0       	rjmp	.+340    	; 0x156 <__ctors_end>
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
       2:	00 00       	nop
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       4:	c4 c0       	rjmp	.+392    	; 0x18e <__bad_interrupt>
       6:	00 00       	nop
       8:	c2 c0       	rjmp	.+388    	; 0x18e <__bad_interrupt>
       a:	00 00       	nop
       c:	c0 c0       	rjmp	.+384    	; 0x18e <__bad_interrupt>
       e:	00 00       	nop
      10:	be c0       	rjmp	.+380    	; 0x18e <__bad_interrupt>
      12:	00 00       	nop
      14:	bc c0       	rjmp	.+376    	; 0x18e <__bad_interrupt>
      16:	00 00       	nop
      18:	ba c0       	rjmp	.+372    	; 0x18e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b8 c0       	rjmp	.+368    	; 0x18e <__bad_interrupt>
      1e:	00 00       	nop
      20:	b6 c0       	rjmp	.+364    	; 0x18e <__bad_interrupt>
      22:	00 00       	nop
      24:	b4 c0       	rjmp	.+360    	; 0x18e <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 e2 09 	jmp	0x13c4	; 0x13c4 <__vector_10>
      2c:	b0 c0       	rjmp	.+352    	; 0x18e <__bad_interrupt>
      2e:	00 00       	nop
      30:	ae c0       	rjmp	.+348    	; 0x18e <__bad_interrupt>
      32:	00 00       	nop
      34:	ac c0       	rjmp	.+344    	; 0x18e <__bad_interrupt>
      36:	00 00       	nop
      38:	aa c0       	rjmp	.+340    	; 0x18e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a8 c0       	rjmp	.+336    	; 0x18e <__bad_interrupt>
      3e:	00 00       	nop
      40:	a6 c0       	rjmp	.+332    	; 0x18e <__bad_interrupt>
      42:	00 00       	nop
      44:	a4 c0       	rjmp	.+328    	; 0x18e <__bad_interrupt>
      46:	00 00       	nop
      48:	a2 c0       	rjmp	.+324    	; 0x18e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	a0 c0       	rjmp	.+320    	; 0x18e <__bad_interrupt>
      4e:	00 00       	nop
      50:	9e c0       	rjmp	.+316    	; 0x18e <__bad_interrupt>
      52:	00 00       	nop
      54:	7e c2       	rjmp	.+1276   	; 0x552 <__vector_21>
      56:	00 00       	nop
      58:	9a c0       	rjmp	.+308    	; 0x18e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a3 c1       	rjmp	.+838    	; 0x3a4 <__vector_23>
      5e:	00 00       	nop
      60:	96 c0       	rjmp	.+300    	; 0x18e <__bad_interrupt>
      62:	00 00       	nop
      64:	53 c1       	rjmp	.+678    	; 0x30c <__vector_25>
      66:	00 00       	nop
      68:	92 c0       	rjmp	.+292    	; 0x18e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	90 c0       	rjmp	.+288    	; 0x18e <__bad_interrupt>
      6e:	00 00       	nop
      70:	8e c0       	rjmp	.+284    	; 0x18e <__bad_interrupt>
      72:	00 00       	nop
      74:	8c c0       	rjmp	.+280    	; 0x18e <__bad_interrupt>
      76:	00 00       	nop
      78:	8a c0       	rjmp	.+276    	; 0x18e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	88 c0       	rjmp	.+272    	; 0x18e <__bad_interrupt>
      7e:	00 00       	nop
      80:	86 c0       	rjmp	.+268    	; 0x18e <__bad_interrupt>
      82:	00 00       	nop
      84:	84 c0       	rjmp	.+264    	; 0x18e <__bad_interrupt>
      86:	00 00       	nop
      88:	82 c0       	rjmp	.+260    	; 0x18e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	80 c0       	rjmp	.+256    	; 0x18e <__bad_interrupt>
      8e:	00 00       	nop
      90:	7e c0       	rjmp	.+252    	; 0x18e <__bad_interrupt>
      92:	00 00       	nop
      94:	7c c0       	rjmp	.+248    	; 0x18e <__bad_interrupt>
      96:	00 00       	nop
      98:	7a c0       	rjmp	.+244    	; 0x18e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	78 c0       	rjmp	.+240    	; 0x18e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	76 c0       	rjmp	.+236    	; 0x18e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	74 c0       	rjmp	.+232    	; 0x18e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	72 c0       	rjmp	.+228    	; 0x18e <__bad_interrupt>
      aa:	00 00       	nop

000000ac <GenericReport>:
      ac:	06 00 ff 09 01 a1 01 09 02 15 00 25 ff 75 08 95     ...........%.u..
      bc:	08 81 02 09 03 15 00 25 ff 75 08 95 08 91 02 c0     .......%.u......

000000cc <DeviceDescriptor>:
      cc:	12 01 10 01 00 00 00 08 54 23 22 22 00 02 01 02     ........T#""....
      dc:	00 01                                               ..

000000de <ConfigurationDescriptor>:
      de:	09 02 22 00 01 01 00 c0 fa 09 04 00 00 01 03 00     ..".............
      ee:	00 00 09 21 11 01 00 01 22 20 00 07 05 81 03 08     ...!...." ......
      fe:	00 01                                               ..

00000100 <LanguageString>:
     100:	04 03 09 04                                         ....

00000104 <ManufacturerString>:
     104:	2e 03 42 00 69 00 72 00 64 00 42 00 72 00 61 00     ..B.i.r.d.B.r.a.
     114:	69 00 6e 00 20 00 54 00 65 00 63 00 68 00 6e 00     i.n. .T.e.c.h.n.
     124:	6f 00 6c 00 6f 00 67 00 69 00 65 00 73 00 00 00     o.l.o.g.i.e.s...

00000134 <ProductString>:
     134:	20 03 48 00 75 00 6d 00 6d 00 69 00 6e 00 67 00      .H.u.m.m.i.n.g.
     144:	62 00 69 00 72 00 64 00 20 00 44 00 75 00 6f 00     b.i.r.d. .D.u.o.
     154:	00 00                                               ..

00000156 <__ctors_end>:
     156:	11 24       	eor	r1, r1
     158:	1f be       	out	0x3f, r1	; 63
     15a:	cf ef       	ldi	r28, 0xFF	; 255
     15c:	da e0       	ldi	r29, 0x0A	; 10
     15e:	de bf       	out	0x3e, r29	; 62
     160:	cd bf       	out	0x3d, r28	; 61

00000162 <__do_copy_data>:
     162:	11 e0       	ldi	r17, 0x01	; 1
     164:	a0 e0       	ldi	r26, 0x00	; 0
     166:	b1 e0       	ldi	r27, 0x01	; 1
     168:	e6 ef       	ldi	r30, 0xF6	; 246
     16a:	fc e1       	ldi	r31, 0x1C	; 28
     16c:	02 c0       	rjmp	.+4      	; 0x172 <.do_copy_data_start>

0000016e <.do_copy_data_loop>:
     16e:	05 90       	lpm	r0, Z+
     170:	0d 92       	st	X+, r0

00000172 <.do_copy_data_start>:
     172:	a0 31       	cpi	r26, 0x10	; 16
     174:	b1 07       	cpc	r27, r17
     176:	d9 f7       	brne	.-10     	; 0x16e <.do_copy_data_loop>

00000178 <__do_clear_bss>:
     178:	13 e0       	ldi	r17, 0x03	; 3
     17a:	a0 e1       	ldi	r26, 0x10	; 16
     17c:	b1 e0       	ldi	r27, 0x01	; 1
     17e:	01 c0       	rjmp	.+2      	; 0x182 <.do_clear_bss_start>

00000180 <.do_clear_bss_loop>:
     180:	1d 92       	st	X+, r1

00000182 <.do_clear_bss_start>:
     182:	a3 36       	cpi	r26, 0x63	; 99
     184:	b1 07       	cpc	r27, r17
     186:	e1 f7       	brne	.-8      	; 0x180 <.do_clear_bss_loop>
     188:	41 d3       	rcall	.+1666   	; 0x80c <main>
     18a:	0c 94 79 0e 	jmp	0x1cf2	; 0x1cf2 <_exit>

0000018e <__bad_interrupt>:
     18e:	38 cf       	rjmp	.-400    	; 0x0 <__vectors>

00000190 <init_analog>:
	// ADMUX register
	// Bit 7,6 - Set voltage reference to AVcc (0b01)
	// Bit 5 - Set ADLAR bit for left adjust to do simple 8-bit reads
	// Bit 4 - X
	// Bit 3:0 - Sets the current channel, set here to ADC0
	ADMUX = 0x60;
     190:	80 e6       	ldi	r24, 0x60	; 96
     192:	80 93 7c 00 	sts	0x007C, r24
	// Bit 7 - ADEN is cleared (Analog is only enabled when doing a read)
	// Bit 6 - We'll start a conversion later
	// Bit 5 - Enable Auto Trigger
	// Bit 3 - No ADC Interrupt
	// Bits 2-0 - Set to create a clock divisor of 16, to make ADC clock = 8,000,000/16 = 500,000 Hz
	ADCSRA = 0b10000100;
     196:	84 e8       	ldi	r24, 0x84	; 132
     198:	80 93 7a 00 	sts	0x007A, r24

	// ADC Status Register B
	// Bit 7 - ADC High speed mode enabled; may be unnecessary
	// Bit 5 - Mux mode, cleared for single ended input
	// Bit 3:0 - Set interrupt mode, currently cleared
	ADCSRB = 0x00;
     19c:	10 92 7b 00 	sts	0x007B, r1


	// Digital input disable - disabling digital ins on ADC0, 1, 4, 5, 6
	DIDR0 = 0x73;
     1a0:	83 e7       	ldi	r24, 0x73	; 115
     1a2:	80 93 7e 00 	sts	0x007E, r24
}
     1a6:	08 95       	ret

000001a8 <read_sensor>:


// Read a sensor value
unsigned int read_sensor(char sensor) {
	ADMUX = sensor;
     1a8:	80 93 7c 00 	sts	0x007C, r24

	// Start conversion
	ADCSRA |= 0b01000000;
     1ac:	80 91 7a 00 	lds	r24, 0x007A
     1b0:	80 64       	ori	r24, 0x40	; 64
     1b2:	80 93 7a 00 	sts	0x007A, r24
	// Gets cleared when the conversion ends
	while((ADCSRA &  0b01000000));
     1b6:	80 91 7a 00 	lds	r24, 0x007A
     1ba:	86 fd       	sbrc	r24, 6
     1bc:	fc cf       	rjmp	.-8      	; 0x1b6 <read_sensor+0xe>

	ADCSRA |= _BV(ADIF);
     1be:	80 91 7a 00 	lds	r24, 0x007A
     1c2:	80 61       	ori	r24, 0x10	; 16
     1c4:	80 93 7a 00 	sts	0x007A, r24
	return ADCH;
     1c8:	80 91 79 00 	lds	r24, 0x0079
}
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	08 95       	ret

000001d0 <init_tiny_comm>:

// Initialize SPI
void init_tiny_comm()
{
	/* Set MOSI, SS, and SCK output */
	DDRB |= _BV(PB2)|_BV(PB1) | _BV(PB4);
     1d0:	84 b1       	in	r24, 0x04	; 4
     1d2:	86 61       	ori	r24, 0x16	; 22
     1d4:	84 b9       	out	0x04, r24	; 4

	/* Enable SPI, Master, set clock rate fck/16, clock phase trailing */
	SPCR = _BV(SPE)| _BV(MSTR)| _BV(SPR0) | _BV(CPHA); // add | _BV(SPR1) for slow speed
     1d6:	85 e5       	ldi	r24, 0x55	; 85
     1d8:	8c bd       	out	0x2c, r24	; 44
	PORTB |= _BV(PB4); // Start active high to prevent accidental communication
     1da:	2c 9a       	sbi	0x05, 4	; 5
}
     1dc:	08 95       	ret

000001de <transmitByteToTiny>:

void transmitByteToTiny(uint8_t cData)
{

	// Set SS pin low so Tiny can hear our SPI data
	PORTB &= ~_BV(PB4);
     1de:	2c 98       	cbi	0x05, 4	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     1e0:	9a e6       	ldi	r25, 0x6A	; 106
     1e2:	9a 95       	dec	r25
     1e4:	f1 f7       	brne	.-4      	; 0x1e2 <transmitByteToTiny+0x4>
	_delay_us(20);
	/* Start transmission */
	SPDR = cData;
     1e6:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
     1e8:	0d b4       	in	r0, 0x2d	; 45
     1ea:	07 fe       	sbrs	r0, 7
     1ec:	fd cf       	rjmp	.-6      	; 0x1e8 <transmitByteToTiny+0xa>
     1ee:	85 ed       	ldi	r24, 0xD5	; 213
     1f0:	8a 95       	dec	r24
     1f2:	f1 f7       	brne	.-4      	; 0x1f0 <transmitByteToTiny+0x12>
	_delay_us(40);
	PORTB |= _BV(PB4); // Set this high, when PB4 is high, the Tiny ignores all SPI signals
     1f4:	2c 9a       	sbi	0x05, 4	; 5
     1f6:	08 95       	ret

000001f8 <turn_off_motors>:
	author:  Tom Lauwers
*/

void turn_off_motors()
{
	transmitByteToTiny(0xFE); // Hummingbird's ATtiny firmware takes 0xFE to indicate that motors should both be off
     1f8:	8e ef       	ldi	r24, 0xFE	; 254
}
     1fa:	f1 cf       	rjmp	.-30     	; 0x1de <transmitByteToTiny>

000001fc <set_motor>:
// 5 - set port 2 forward
// 6 - set port 1 backward
// 7 - set port 2 backward
// The speed byte just sets power to the motor, 0 is off, 255 is fully on
void set_motor(uint8_t motor, uint8_t direction, uint8_t speed)
{
     1fc:	ef 92       	push	r14
     1fe:	ff 92       	push	r15
     200:	0f 93       	push	r16
     202:	1f 93       	push	r17
     204:	08 2f       	mov	r16, r24
     206:	f6 2e       	mov	r15, r22
     208:	e4 2e       	mov	r14, r20
	transmitByteToTiny(motor+4 + direction*2);
     20a:	98 2f       	mov	r25, r24
     20c:	9c 5f       	subi	r25, 0xFC	; 252
     20e:	86 2f       	mov	r24, r22
     210:	88 0f       	add	r24, r24
     212:	89 0f       	add	r24, r25
     214:	e4 df       	rcall	.-56     	; 0x1de <transmitByteToTiny>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     216:	88 ec       	ldi	r24, 0xC8	; 200
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	01 97       	sbiw	r24, 0x01	; 1
     21c:	f1 f7       	brne	.-4      	; 0x21a <set_motor+0x1e>
	_delay_us(50);
	transmitByteToTiny(speed);
     21e:	8e 2d       	mov	r24, r14
     220:	de df       	rcall	.-68     	; 0x1de <transmitByteToTiny>
	// Record the values
	motor_vals[motor*2] = direction;
     222:	10 e0       	ldi	r17, 0x00	; 0
     224:	00 0f       	add	r16, r16
     226:	11 1f       	adc	r17, r17
     228:	e0 e1       	ldi	r30, 0x10	; 16
     22a:	f1 e0       	ldi	r31, 0x01	; 1
     22c:	df 01       	movw	r26, r30
     22e:	a0 0f       	add	r26, r16
     230:	b1 1f       	adc	r27, r17
     232:	fc 92       	st	X, r15
	motor_vals[motor*2+1] = speed;
     234:	fd 01       	movw	r30, r26
     236:	e1 82       	std	Z+1, r14	; 0x01
}
     238:	1f 91       	pop	r17
     23a:	0f 91       	pop	r16
     23c:	ff 90       	pop	r15
     23e:	ef 90       	pop	r14
     240:	08 95       	ret

00000242 <disable_servos>:
	author:  Tom Lauwers
*/

void disable_servos()
{
	transmitByteToTiny(0xFF);
     242:	8f ef       	ldi	r24, 0xFF	; 255
}
     244:	cc cf       	rjmp	.-104    	; 0x1de <transmitByteToTiny>

00000246 <set_servo>:

void set_servo(uint8_t servo, uint8_t value)
{
     246:	0f 93       	push	r16
     248:	1f 93       	push	r17
     24a:	18 2f       	mov	r17, r24
     24c:	06 2f       	mov	r16, r22
	transmitByteToTiny(servo);
     24e:	c7 df       	rcall	.-114    	; 0x1de <transmitByteToTiny>
     250:	88 ec       	ldi	r24, 0xC8	; 200
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	01 97       	sbiw	r24, 0x01	; 1
     256:	f1 f7       	brne	.-4      	; 0x254 <set_servo+0xe>
	_delay_us(50);
	transmitByteToTiny(value);
     258:	80 2f       	mov	r24, r16
     25a:	c1 df       	rcall	.-126    	; 0x1de <transmitByteToTiny>
	servo_values_temp[servo] = value;
     25c:	e4 e1       	ldi	r30, 0x14	; 20
     25e:	f1 e0       	ldi	r31, 0x01	; 1
     260:	e1 0f       	add	r30, r17
     262:	f1 1d       	adc	r31, r1
     264:	00 83       	st	Z, r16
}
     266:	1f 91       	pop	r17
     268:	0f 91       	pop	r16
     26a:	08 95       	ret

0000026c <serial_init>:
uint8_t rx_buff[256]; // A buffer for storing incoming serial data

// Set serial to 9600, 8n1
void serial_init()
{
		UCSR1A = _BV(U2X1); // Double speed mode
     26c:	82 e0       	ldi	r24, 0x02	; 2
     26e:	80 93 c8 00 	sts	0x00C8, r24
		UCSR1B = _BV(RXCIE1) | _BV(RXEN1) | _BV(TXEN1); // Enable Rx/Tx, and Rx interrupts
     272:	88 e9       	ldi	r24, 0x98	; 152
     274:	80 93 c9 00 	sts	0x00C9, r24
		UCSR1C = _BV(UCSZ11) | _BV(UCSZ10); // Set to 8-bit mode
     278:	86 e0       	ldi	r24, 0x06	; 6
     27a:	80 93 ca 00 	sts	0x00CA, r24
		rx_buffer.RX_Head = 0;
     27e:	10 92 54 03 	sts	0x0354, r1
		rx_buffer.RX_Tail = 0;
     282:	10 92 55 03 	sts	0x0355, r1

		// Set baud rate to 9600
		UBRR1L = 207;
     286:	8f ec       	ldi	r24, 0xCF	; 207
     288:	80 93 cc 00 	sts	0x00CC, r24
}
     28c:	08 95       	ret

0000028e <send_char>:

// Sends one byte over serial
void send_char(char c)
{
     28e:	98 2f       	mov	r25, r24
	while(!(UCSR1A & _BV(UDRE1)));
     290:	80 91 c8 00 	lds	r24, 0x00C8
     294:	85 ff       	sbrs	r24, 5
     296:	fc cf       	rjmp	.-8      	; 0x290 <send_char+0x2>
	UDR1 = c;
     298:	90 93 ce 00 	sts	0x00CE, r25
}
     29c:	08 95       	ret

0000029e <received_data_available>:
 *  \retval false     The receive buffer is empty.
 */
bool received_data_available()
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = rx_buffer.RX_Head;
     29e:	90 91 54 03 	lds	r25, 0x0354
	uint8_t tempTail = rx_buffer.RX_Tail;
     2a2:	80 91 55 03 	lds	r24, 0x0355
     2a6:	20 e0       	ldi	r18, 0x00	; 0
     2a8:	98 13       	cpse	r25, r24
     2aa:	21 e0       	ldi	r18, 0x01	; 1
	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
//	return (_BV(RXC1) & UCSR1A);


}
     2ac:	82 2f       	mov	r24, r18
     2ae:	08 95       	ret

000002b0 <send_sensors>:

void send_sensors()
{
	send_char(read_sensor(SENSOR1));
     2b0:	86 e6       	ldi	r24, 0x66	; 102
     2b2:	7a df       	rcall	.-268    	; 0x1a8 <read_sensor>
     2b4:	ec df       	rcall	.-40     	; 0x28e <send_char>
	send_char(read_sensor(SENSOR2));
     2b6:	85 e6       	ldi	r24, 0x65	; 101
     2b8:	77 df       	rcall	.-274    	; 0x1a8 <read_sensor>
     2ba:	e9 df       	rcall	.-46     	; 0x28e <send_char>
	send_char(read_sensor(SENSOR3));
     2bc:	84 e6       	ldi	r24, 0x64	; 100
     2be:	74 df       	rcall	.-280    	; 0x1a8 <read_sensor>
     2c0:	e6 df       	rcall	.-52     	; 0x28e <send_char>
	send_char(read_sensor(SENSOR4));
     2c2:	81 e6       	ldi	r24, 0x61	; 97
     2c4:	71 df       	rcall	.-286    	; 0x1a8 <read_sensor>
     2c6:	e3 df       	rcall	.-58     	; 0x28e <send_char>
	send_char(read_sensor(EXT_PWR));
     2c8:	80 e6       	ldi	r24, 0x60	; 96
     2ca:	6e df       	rcall	.-292    	; 0x1a8 <read_sensor>
}
     2cc:	e0 cf       	rjmp	.-64     	; 0x28e <send_char>

000002ce <receive_char>:
 */
char receive_char()
{

	char ans;
	ans = rx_buffer.RX[rx_buffer.RX_Tail];
     2ce:	80 91 55 03 	lds	r24, 0x0355
     2d2:	e4 e5       	ldi	r30, 0x54	; 84
     2d4:	f2 e0       	ldi	r31, 0x02	; 2
     2d6:	e8 0f       	add	r30, r24
     2d8:	f1 1d       	adc	r31, r1
     2da:	80 81       	ld	r24, Z

	/* Advance buffer tail. */
	rx_buffer.RX_Tail = (rx_buffer.RX_Tail + 1);
     2dc:	90 91 55 03 	lds	r25, 0x0355
     2e0:	9f 5f       	subi	r25, 0xFF	; 255
     2e2:	90 93 55 03 	sts	0x0355, r25
	//send_char(ans); // Echo the received character to verify that we've received it to the sender
	return ans;
}
     2e6:	08 95       	ret

000002e8 <store_received_serial_data>:
 *
 */
void store_received_serial_data()
{
	/* Advance buffer head. */
	uint8_t tempRX_Head = (rx_buffer.RX_Head + 1);
     2e8:	90 91 54 03 	lds	r25, 0x0354
     2ec:	9f 5f       	subi	r25, 0xFF	; 255

	/* Check for overflow. */
	uint8_t tempRX_Tail = rx_buffer.RX_Tail;
     2ee:	80 91 55 03 	lds	r24, 0x0355
	// Get data
	uint8_t data = UDR1;
     2f2:	20 91 ce 00 	lds	r18, 0x00CE
	if (tempRX_Head != tempRX_Tail) {
     2f6:	98 17       	cp	r25, r24
     2f8:	41 f0       	breq	.+16     	; 0x30a <store_received_serial_data+0x22>
		rx_buffer.RX[rx_buffer.RX_Head] = data;
     2fa:	e0 91 54 03 	lds	r30, 0x0354
     2fe:	f0 e0       	ldi	r31, 0x00	; 0
     300:	ec 5a       	subi	r30, 0xAC	; 172
     302:	fd 4f       	sbci	r31, 0xFD	; 253
     304:	20 83       	st	Z, r18
		rx_buffer.RX_Head = tempRX_Head;
     306:	90 93 54 03 	sts	0x0354, r25
     30a:	08 95       	ret

0000030c <__vector_25>:
 *  Calls the common receive complete handler with pointer to the correct USART
 *  as argument.
 */

ISR(USART1_RX_vect)
{
     30c:	1f 92       	push	r1
     30e:	0f 92       	push	r0
     310:	0f b6       	in	r0, 0x3f	; 63
     312:	0f 92       	push	r0
     314:	11 24       	eor	r1, r1
     316:	2f 93       	push	r18
     318:	3f 93       	push	r19
     31a:	4f 93       	push	r20
     31c:	5f 93       	push	r21
     31e:	6f 93       	push	r22
     320:	7f 93       	push	r23
     322:	8f 93       	push	r24
     324:	9f 93       	push	r25
     326:	af 93       	push	r26
     328:	bf 93       	push	r27
     32a:	ef 93       	push	r30
     32c:	ff 93       	push	r31
	store_received_serial_data();
     32e:	dc df       	rcall	.-72     	; 0x2e8 <store_received_serial_data>
     330:	ff 91       	pop	r31
     332:	ef 91       	pop	r30
     334:	bf 91       	pop	r27
     336:	af 91       	pop	r26
     338:	9f 91       	pop	r25
     33a:	8f 91       	pop	r24
     33c:	7f 91       	pop	r23
     33e:	6f 91       	pop	r22
     340:	5f 91       	pop	r21
     342:	4f 91       	pop	r20
     344:	3f 91       	pop	r19
     346:	2f 91       	pop	r18
     348:	0f 90       	pop	r0
     34a:	0f be       	out	0x3f, r0	; 63
     34c:	0f 90       	pop	r0
     34e:	1f 90       	pop	r1
     350:	18 95       	reti

00000352 <set_vibration_motor>:


}


void set_vibration_motor(uint8_t whichOne, uint8_t val) {
     352:	26 2f       	mov	r18, r22
     354:	30 e0       	ldi	r19, 0x00	; 0
	if(whichOne == 48) {// 48 is ASCII 0
     356:	80 33       	cpi	r24, 0x30	; 48
     358:	39 f4       	brne	.+14     	; 0x368 <set_vibration_motor+0x16>
		OCR1A = val; // 8 bit PWM, so 0 is off, 255 is totally on
     35a:	30 93 89 00 	sts	0x0089, r19
     35e:	20 93 88 00 	sts	0x0088, r18
		vbr_values_temp[0] = val;
     362:	60 93 18 01 	sts	0x0118, r22
     366:	08 95       	ret
	}
	else {
		OCR1B = val;
     368:	30 93 8b 00 	sts	0x008B, r19
     36c:	20 93 8a 00 	sts	0x008A, r18
		vbr_values_temp[1] = val;
     370:	60 93 19 01 	sts	0x0119, r22
     374:	08 95       	ret

00000376 <disable_vibration_motors>:
	}
}

// Sets motors to 0, updates buffer
void disable_vibration_motors() {
	OCR1A = 0;
     376:	10 92 89 00 	sts	0x0089, r1
     37a:	10 92 88 00 	sts	0x0088, r1
	OCR1B = 0;
     37e:	10 92 8b 00 	sts	0x008B, r1
     382:	10 92 8a 00 	sts	0x008A, r1
	vbr_values_temp[0] = 0;
     386:	10 92 18 01 	sts	0x0118, r1
	vbr_values_temp[1] = 0;
     38a:	10 92 19 01 	sts	0x0119, r1
}
     38e:	08 95       	ret

00000390 <init_vbr>:
void init_vbr() {
	// Configure counter such that we use fast
	// PWM with 8-bit resolution at a frequency of
	// 8000000/(1*255) = ~31 KHz

	TCCR1A = _BV(COM1A1) | _BV(COM1B1) | _BV(WGM10);
     390:	81 ea       	ldi	r24, 0xA1	; 161
     392:	80 93 80 00 	sts	0x0080, r24
	TCCR1B = _BV(CS10) | _BV(WGM12);
     396:	89 e0       	ldi	r24, 0x09	; 9
     398:	80 93 81 00 	sts	0x0081, r24

	// Configure the two PWM as outputs:
	DDRB |= _BV(PB5) | _BV(PB6);  // PWM pins
     39c:	84 b1       	in	r24, 0x04	; 4
     39e:	80 66       	ori	r24, 0x60	; 96
     3a0:	84 b9       	out	0x04, r24	; 4

	// Turn off the motors. Necessary to prevent them from running on startup
	disable_vibration_motors();


}
     3a2:	e9 cf       	rjmp	.-46     	; 0x376 <disable_vibration_motors>

000003a4 <__vector_23>:


/* Interrupt takes roughly 65 us to run, happens every 8 ms */

ISR(TIMER0_OVF_vect)
{
     3a4:	1f 92       	push	r1
     3a6:	0f 92       	push	r0
     3a8:	0f b6       	in	r0, 0x3f	; 63
     3aa:	0f 92       	push	r0
     3ac:	11 24       	eor	r1, r1
     3ae:	2f 93       	push	r18
     3b0:	3f 93       	push	r19
     3b2:	8f 93       	push	r24
     3b4:	9f 93       	push	r25
     3b6:	af 93       	push	r26
     3b8:	bf 93       	push	r27
     3ba:	ef 93       	push	r30
     3bc:	ff 93       	push	r31
	int i;

	if(activity_state == 0) {
     3be:	80 91 31 01 	lds	r24, 0x0131
     3c2:	88 23       	and	r24, r24
     3c4:	f9 f4       	brne	.+62     	; 0x404 <__vector_23+0x60>
		if(activity_val > 20) {
     3c6:	90 91 32 01 	lds	r25, 0x0132
     3ca:	95 31       	cpi	r25, 0x15	; 21
     3cc:	18 f0       	brcs	.+6      	; 0x3d4 <__vector_23+0x30>
			led_values_temp[10] = activity_val;
     3ce:	90 93 2f 01 	sts	0x012F, r25
     3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <__vector_23+0x34>
		}
		else {
			led_values_temp[10] = 0;
     3d4:	10 92 2f 01 	sts	0x012F, r1
		}
		if(activity_dir == 0) {
     3d8:	80 91 33 01 	lds	r24, 0x0133
     3dc:	88 23       	and	r24, r24
     3de:	11 f4       	brne	.+4      	; 0x3e4 <__vector_23+0x40>
			activity_val+=1;
     3e0:	9f 5f       	subi	r25, 0xFF	; 255
     3e2:	01 c0       	rjmp	.+2      	; 0x3e6 <__vector_23+0x42>
		}
		else {
			activity_val-=1;
     3e4:	91 50       	subi	r25, 0x01	; 1
     3e6:	90 93 32 01 	sts	0x0132, r25
		}
		if(activity_val >= 254) {
     3ea:	80 91 32 01 	lds	r24, 0x0132
     3ee:	8e 3f       	cpi	r24, 0xFE	; 254
     3f0:	20 f0       	brcs	.+8      	; 0x3fa <__vector_23+0x56>
			activity_dir = 1;
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	80 93 33 01 	sts	0x0133, r24
     3f8:	0a c0       	rjmp	.+20     	; 0x40e <__vector_23+0x6a>
		}
		else if(activity_val <= 2) {
     3fa:	83 30       	cpi	r24, 0x03	; 3
     3fc:	40 f4       	brcc	.+16     	; 0x40e <__vector_23+0x6a>
			activity_dir = 0;
     3fe:	10 92 33 01 	sts	0x0133, r1
     402:	05 c0       	rjmp	.+10     	; 0x40e <__vector_23+0x6a>
		}
	}
	else if(activity_state == 1){
     404:	81 30       	cpi	r24, 0x01	; 1
     406:	19 f4       	brne	.+6      	; 0x40e <__vector_23+0x6a>
		led_values_temp[10] = 255;
     408:	8f ef       	ldi	r24, 0xFF	; 255
     40a:	80 93 2f 01 	sts	0x012F, r24
     40e:	20 e0       	ldi	r18, 0x00	; 0
     410:	30 e0       	ldi	r19, 0x00	; 0
	}

	// Transfer set_orb values into this cycle's buffer
	for(i = 0; i < 11; i++) {
		led_values[i] = led_values_temp[i];
     412:	f9 01       	movw	r30, r18
     414:	e6 5e       	subi	r30, 0xE6	; 230
     416:	fe 4f       	sbci	r31, 0xFE	; 254
     418:	d9 01       	movw	r26, r18
     41a:	ab 5d       	subi	r26, 0xDB	; 219
     41c:	be 4f       	sbci	r27, 0xFE	; 254
     41e:	8c 91       	ld	r24, X
     420:	80 83       	st	Z, r24
	else if(activity_state == 1){
		led_values_temp[10] = 255;
	}

	// Transfer set_orb values into this cycle's buffer
	for(i = 0; i < 11; i++) {
     422:	2f 5f       	subi	r18, 0xFF	; 255
     424:	3f 4f       	sbci	r19, 0xFF	; 255
     426:	2b 30       	cpi	r18, 0x0B	; 11
     428:	31 05       	cpc	r19, r1
     42a:	99 f7       	brne	.-26     	; 0x412 <__vector_23+0x6e>
		led_values[i] = led_values_temp[i];
	}

	// Turn on all eleven elements unless their value is 0
	if(led_values[0] != 0)
     42c:	80 91 1a 01 	lds	r24, 0x011A
     430:	88 23       	and	r24, r24
     432:	11 f0       	breq	.+4      	; 0x438 <__vector_23+0x94>
		PORTE |= _BV(REDLED1);
     434:	76 9a       	sbi	0x0e, 6	; 14
     436:	04 c0       	rjmp	.+8      	; 0x440 <__vector_23+0x9c>
	else {
		PORTE &= (0xFF - _BV(REDLED1));
     438:	76 98       	cbi	0x0e, 6	; 14
		led_values[0] = 255;
     43a:	8f ef       	ldi	r24, 0xFF	; 255
     43c:	80 93 1a 01 	sts	0x011A, r24
	}

	if(led_values[1] != 0)
     440:	80 91 1b 01 	lds	r24, 0x011B
     444:	88 23       	and	r24, r24
     446:	11 f0       	breq	.+4      	; 0x44c <__vector_23+0xa8>
		PORTD |= _BV(GREENLED1);
     448:	5c 9a       	sbi	0x0b, 4	; 11
     44a:	04 c0       	rjmp	.+8      	; 0x454 <__vector_23+0xb0>
	else {
		PORTD &= (0xFF - _BV(GREENLED1));
     44c:	5c 98       	cbi	0x0b, 4	; 11
		led_values[1] = 255;
     44e:	8f ef       	ldi	r24, 0xFF	; 255
     450:	80 93 1b 01 	sts	0x011B, r24
	}

	if(led_values[2] != 0)
     454:	80 91 1c 01 	lds	r24, 0x011C
     458:	88 23       	and	r24, r24
     45a:	11 f0       	breq	.+4      	; 0x460 <__vector_23+0xbc>
		PORTD |= _BV(BLUELED1);
     45c:	5e 9a       	sbi	0x0b, 6	; 11
     45e:	04 c0       	rjmp	.+8      	; 0x468 <__vector_23+0xc4>
	else {
		PORTD &= (0xFF - _BV(BLUELED1));
     460:	5e 98       	cbi	0x0b, 6	; 11
		led_values[2] = 255;
     462:	8f ef       	ldi	r24, 0xFF	; 255
     464:	80 93 1c 01 	sts	0x011C, r24
	}
	if(led_values[3] != 0)
     468:	80 91 1d 01 	lds	r24, 0x011D
     46c:	88 23       	and	r24, r24
     46e:	11 f0       	breq	.+4      	; 0x474 <__vector_23+0xd0>
		PORTC |= _BV(REDLED2);
     470:	46 9a       	sbi	0x08, 6	; 8
     472:	04 c0       	rjmp	.+8      	; 0x47c <__vector_23+0xd8>
	else {
		PORTC &= (0xFF - _BV(REDLED2));
     474:	46 98       	cbi	0x08, 6	; 8
		led_values[3] = 255;
     476:	8f ef       	ldi	r24, 0xFF	; 255
     478:	80 93 1d 01 	sts	0x011D, r24
	}

	if(led_values[4] != 0)
     47c:	80 91 1e 01 	lds	r24, 0x011E
     480:	88 23       	and	r24, r24
     482:	11 f0       	breq	.+4      	; 0x488 <__vector_23+0xe4>
		PORTD |= _BV(GREENLED2);
     484:	5f 9a       	sbi	0x0b, 7	; 11
     486:	04 c0       	rjmp	.+8      	; 0x490 <__vector_23+0xec>
	else {
		PORTD &= (0xFF - _BV(GREENLED2));
     488:	5f 98       	cbi	0x0b, 7	; 11
		led_values[4] = 255;
     48a:	8f ef       	ldi	r24, 0xFF	; 255
     48c:	80 93 1e 01 	sts	0x011E, r24
	}

	if(led_values[5] != 0)
     490:	80 91 1f 01 	lds	r24, 0x011F
     494:	88 23       	and	r24, r24
     496:	11 f0       	breq	.+4      	; 0x49c <__vector_23+0xf8>
		PORTB |= _BV(BLUELED2);
     498:	2f 9a       	sbi	0x05, 7	; 5
     49a:	04 c0       	rjmp	.+8      	; 0x4a4 <__vector_23+0x100>
	else {
		PORTB &= (0xFF - _BV(BLUELED2));
     49c:	2f 98       	cbi	0x05, 7	; 5
		led_values[5] = 255;
     49e:	8f ef       	ldi	r24, 0xFF	; 255
     4a0:	80 93 1f 01 	sts	0x011F, r24
	}
	if(led_values[6] != 0)
     4a4:	80 91 20 01 	lds	r24, 0x0120
     4a8:	88 23       	and	r24, r24
     4aa:	11 f0       	breq	.+4      	; 0x4b0 <__vector_23+0x10c>
		PORTD |= _BV(LED1);
     4ac:	58 9a       	sbi	0x0b, 0	; 11
     4ae:	04 c0       	rjmp	.+8      	; 0x4b8 <__vector_23+0x114>
	else {
		PORTD &= (0xFF - _BV(LED1));
     4b0:	58 98       	cbi	0x0b, 0	; 11
		led_values[6] = 255;
     4b2:	8f ef       	ldi	r24, 0xFF	; 255
     4b4:	80 93 20 01 	sts	0x0120, r24
	}

	if(led_values[7] != 0)
     4b8:	80 91 21 01 	lds	r24, 0x0121
     4bc:	88 23       	and	r24, r24
     4be:	11 f0       	breq	.+4      	; 0x4c4 <__vector_23+0x120>
		PORTD |= _BV(LED2);
     4c0:	59 9a       	sbi	0x0b, 1	; 11
     4c2:	04 c0       	rjmp	.+8      	; 0x4cc <__vector_23+0x128>
	else {
		PORTD &= (0xFF - _BV(LED2));
     4c4:	59 98       	cbi	0x0b, 1	; 11
		led_values[7] = 255;
     4c6:	8f ef       	ldi	r24, 0xFF	; 255
     4c8:	80 93 21 01 	sts	0x0121, r24
	}

	if(led_values[8] != 0)
     4cc:	80 91 22 01 	lds	r24, 0x0122
     4d0:	88 23       	and	r24, r24
     4d2:	11 f0       	breq	.+4      	; 0x4d8 <__vector_23+0x134>
		PORTE |= _BV(LED3);
     4d4:	72 9a       	sbi	0x0e, 2	; 14
     4d6:	04 c0       	rjmp	.+8      	; 0x4e0 <__vector_23+0x13c>
	else {
		PORTE &= (0xFF - _BV(LED3));
     4d8:	72 98       	cbi	0x0e, 2	; 14
		led_values[8] = 255;
     4da:	8f ef       	ldi	r24, 0xFF	; 255
     4dc:	80 93 22 01 	sts	0x0122, r24
	}

	if(led_values[9] != 0)
     4e0:	80 91 23 01 	lds	r24, 0x0123
     4e4:	88 23       	and	r24, r24
     4e6:	11 f0       	breq	.+4      	; 0x4ec <__vector_23+0x148>
		PORTF |= _BV(LED4);
     4e8:	8f 9a       	sbi	0x11, 7	; 17
     4ea:	04 c0       	rjmp	.+8      	; 0x4f4 <__vector_23+0x150>
	else {
		PORTF &= (0xFF - _BV(LED4));
     4ec:	8f 98       	cbi	0x11, 7	; 17
		led_values[9] = 255;
     4ee:	8f ef       	ldi	r24, 0xFF	; 255
     4f0:	80 93 23 01 	sts	0x0123, r24
	}

	if(led_values[10] != 0)
     4f4:	80 91 24 01 	lds	r24, 0x0124
     4f8:	88 23       	and	r24, r24
     4fa:	31 f0       	breq	.+12     	; 0x508 <__vector_23+0x164>
		PORTC |= _BV(ACTIVITY);
     4fc:	47 9a       	sbi	0x08, 7	; 8
     4fe:	80 91 30 01 	lds	r24, 0x0130
     502:	ea e1       	ldi	r30, 0x1A	; 26
     504:	f1 e0       	ldi	r31, 0x01	; 1
     506:	05 c0       	rjmp	.+10     	; 0x512 <__vector_23+0x16e>
	else {
		PORTC &= (0xFF - _BV(ACTIVITY));
     508:	47 98       	cbi	0x08, 7	; 8
		led_values[10] = 255;
     50a:	8f ef       	ldi	r24, 0xFF	; 255
     50c:	80 93 24 01 	sts	0x0124, r24
     510:	f6 cf       	rjmp	.-20     	; 0x4fe <__vector_23+0x15a>
     512:	90 81       	ld	r25, Z
     514:	98 17       	cp	r25, r24
     516:	08 f4       	brcc	.+2      	; 0x51a <__vector_23+0x176>
     518:	89 2f       	mov	r24, r25
     51a:	31 96       	adiw	r30, 0x01	; 1
	}
	// Find the smallest one of the eleven and set the next output compare to occur then
	// Set next_led_val to the smallest of the eleven values
	for(i = 0; i < 11; i++) {
     51c:	91 e0       	ldi	r25, 0x01	; 1
     51e:	e5 32       	cpi	r30, 0x25	; 37
     520:	f9 07       	cpc	r31, r25
     522:	b9 f7       	brne	.-18     	; 0x512 <__vector_23+0x16e>
     524:	80 93 30 01 	sts	0x0130, r24
		if(led_values[i] < next_led_val) {
			next_led_val = led_values[i];
		}
	}

	OCR0A = next_led_val;
     528:	87 bd       	out	0x27, r24	; 39
	sensor_broadcast_count += sensor_broadcast;
     52a:	80 91 35 01 	lds	r24, 0x0135
     52e:	90 91 34 01 	lds	r25, 0x0134
     532:	89 0f       	add	r24, r25
     534:	80 93 35 01 	sts	0x0135, r24

}
     538:	ff 91       	pop	r31
     53a:	ef 91       	pop	r30
     53c:	bf 91       	pop	r27
     53e:	af 91       	pop	r26
     540:	9f 91       	pop	r25
     542:	8f 91       	pop	r24
     544:	3f 91       	pop	r19
     546:	2f 91       	pop	r18
     548:	0f 90       	pop	r0
     54a:	0f be       	out	0x3f, r0	; 63
     54c:	0f 90       	pop	r0
     54e:	1f 90       	pop	r1
     550:	18 95       	reti

00000552 <__vector_21>:

	Interrupt take 29 us, executes eleven or fewer times during an 8ms cycle
*/

ISR(TIMER0_COMPA_vect)
{
     552:	1f 92       	push	r1
     554:	0f 92       	push	r0
     556:	0f b6       	in	r0, 0x3f	; 63
     558:	0f 92       	push	r0
     55a:	11 24       	eor	r1, r1
     55c:	8f 93       	push	r24
     55e:	9f 93       	push	r25
     560:	ef 93       	push	r30
     562:	ff 93       	push	r31
	int i;
	// If output compare is 255, nothing needs to be done, so exit
	if(next_led_val == 255) {
     564:	90 91 30 01 	lds	r25, 0x0130
     568:	9f 3f       	cpi	r25, 0xFF	; 255
     56a:	09 f4       	brne	.+2      	; 0x56e <__vector_21+0x1c>
     56c:	67 c0       	rjmp	.+206    	; 0x63c <__vector_21+0xea>
		return;
	}

	// If an LED value equals the next led value, toggle the pin to off
	if(led_values[0] == next_led_val) {
     56e:	80 91 1a 01 	lds	r24, 0x011A
     572:	89 17       	cp	r24, r25
     574:	21 f4       	brne	.+8      	; 0x57e <__vector_21+0x2c>
		PORTE &= (0xFF - _BV(REDLED1));
     576:	76 98       	cbi	0x0e, 6	; 14
		led_values[0] = 255;
     578:	8f ef       	ldi	r24, 0xFF	; 255
     57a:	80 93 1a 01 	sts	0x011A, r24
	}

	if(led_values[1] == next_led_val) {
     57e:	80 91 1b 01 	lds	r24, 0x011B
     582:	89 17       	cp	r24, r25
     584:	21 f4       	brne	.+8      	; 0x58e <__vector_21+0x3c>
		PORTD &= (0xFF - _BV(GREENLED1));
     586:	5c 98       	cbi	0x0b, 4	; 11
		led_values[1] = 255;
     588:	8f ef       	ldi	r24, 0xFF	; 255
     58a:	80 93 1b 01 	sts	0x011B, r24
	}

	if(led_values[2] == next_led_val) {
     58e:	80 91 1c 01 	lds	r24, 0x011C
     592:	89 17       	cp	r24, r25
     594:	21 f4       	brne	.+8      	; 0x59e <__vector_21+0x4c>
		PORTD &= (0xFF - _BV(BLUELED1));
     596:	5e 98       	cbi	0x0b, 6	; 11
		led_values[2] = 255;
     598:	8f ef       	ldi	r24, 0xFF	; 255
     59a:	80 93 1c 01 	sts	0x011C, r24
	}
	if(led_values[3] == next_led_val) {
     59e:	80 91 1d 01 	lds	r24, 0x011D
     5a2:	89 17       	cp	r24, r25
     5a4:	21 f4       	brne	.+8      	; 0x5ae <__vector_21+0x5c>
		PORTC &= (0xFF - _BV(REDLED2));
     5a6:	46 98       	cbi	0x08, 6	; 8
		led_values[3] = 255;
     5a8:	8f ef       	ldi	r24, 0xFF	; 255
     5aa:	80 93 1d 01 	sts	0x011D, r24
	}

	if(led_values[4] == next_led_val) {
     5ae:	80 91 1e 01 	lds	r24, 0x011E
     5b2:	89 17       	cp	r24, r25
     5b4:	21 f4       	brne	.+8      	; 0x5be <__vector_21+0x6c>
		PORTD &= (0xFF - _BV(GREENLED2));
     5b6:	5f 98       	cbi	0x0b, 7	; 11
		led_values[4] = 255;
     5b8:	8f ef       	ldi	r24, 0xFF	; 255
     5ba:	80 93 1e 01 	sts	0x011E, r24
	}

	if(led_values[5] == next_led_val) {
     5be:	80 91 1f 01 	lds	r24, 0x011F
     5c2:	89 17       	cp	r24, r25
     5c4:	21 f4       	brne	.+8      	; 0x5ce <__vector_21+0x7c>
		PORTB &= (0xFF - _BV(BLUELED2));
     5c6:	2f 98       	cbi	0x05, 7	; 5
		led_values[5] = 255;
     5c8:	8f ef       	ldi	r24, 0xFF	; 255
     5ca:	80 93 1f 01 	sts	0x011F, r24
	}
	if(led_values[6] == next_led_val) {
     5ce:	80 91 20 01 	lds	r24, 0x0120
     5d2:	89 17       	cp	r24, r25
     5d4:	21 f4       	brne	.+8      	; 0x5de <__vector_21+0x8c>
		PORTD &= (0xFF - _BV(LED1));
     5d6:	58 98       	cbi	0x0b, 0	; 11
		led_values[6] = 255;
     5d8:	8f ef       	ldi	r24, 0xFF	; 255
     5da:	80 93 20 01 	sts	0x0120, r24
	}

	if(led_values[7] == next_led_val) {
     5de:	80 91 21 01 	lds	r24, 0x0121
     5e2:	89 17       	cp	r24, r25
     5e4:	21 f4       	brne	.+8      	; 0x5ee <__vector_21+0x9c>
		PORTD &= (0xFF - _BV(LED2));
     5e6:	59 98       	cbi	0x0b, 1	; 11
		led_values[7] = 255;
     5e8:	8f ef       	ldi	r24, 0xFF	; 255
     5ea:	80 93 21 01 	sts	0x0121, r24
	}
	if(led_values[8] == next_led_val) {
     5ee:	80 91 22 01 	lds	r24, 0x0122
     5f2:	89 17       	cp	r24, r25
     5f4:	21 f4       	brne	.+8      	; 0x5fe <__vector_21+0xac>
		PORTE &= (0xFF - _BV(LED3));
     5f6:	72 98       	cbi	0x0e, 2	; 14
		led_values[8] = 255;
     5f8:	8f ef       	ldi	r24, 0xFF	; 255
     5fa:	80 93 22 01 	sts	0x0122, r24
	}

	if(led_values[9] == next_led_val) {
     5fe:	80 91 23 01 	lds	r24, 0x0123
     602:	89 17       	cp	r24, r25
     604:	21 f4       	brne	.+8      	; 0x60e <__vector_21+0xbc>
		PORTF &= (0xFF - _BV(LED4));
     606:	8f 98       	cbi	0x11, 7	; 17
		led_values[9] = 255;
     608:	8f ef       	ldi	r24, 0xFF	; 255
     60a:	80 93 23 01 	sts	0x0123, r24
	}
	if(led_values[10] == next_led_val) {
     60e:	80 91 24 01 	lds	r24, 0x0124
     612:	89 17       	cp	r24, r25
     614:	21 f4       	brne	.+8      	; 0x61e <__vector_21+0xcc>
		PORTC &= (0xFF - _BV(ACTIVITY));
     616:	47 98       	cbi	0x08, 7	; 8
		led_values[10] = 255;
     618:	8f ef       	ldi	r24, 0xFF	; 255
     61a:	80 93 24 01 	sts	0x0124, r24
     61e:	ea e1       	ldi	r30, 0x1A	; 26
     620:	f1 e0       	ldi	r31, 0x01	; 1
     622:	8f ef       	ldi	r24, 0xFF	; 255
     624:	90 81       	ld	r25, Z
     626:	98 17       	cp	r25, r24
     628:	08 f4       	brcc	.+2      	; 0x62c <__vector_21+0xda>
     62a:	89 2f       	mov	r24, r25
     62c:	31 96       	adiw	r30, 0x01	; 1
	}

	// Set the next led value to the smallest of the eleven
	next_led_val = 255;
	for(i = 0; i < 11; i++) {
     62e:	91 e0       	ldi	r25, 0x01	; 1
     630:	e5 32       	cpi	r30, 0x25	; 37
     632:	f9 07       	cpc	r31, r25
     634:	b9 f7       	brne	.-18     	; 0x624 <__vector_21+0xd2>
     636:	80 93 30 01 	sts	0x0130, r24
		if(led_values[i] < next_led_val) {
			next_led_val = led_values[i];
		}
	}
	OCR0A = next_led_val;
     63a:	87 bd       	out	0x27, r24	; 39
}
     63c:	ff 91       	pop	r31
     63e:	ef 91       	pop	r30
     640:	9f 91       	pop	r25
     642:	8f 91       	pop	r24
     644:	0f 90       	pop	r0
     646:	0f be       	out	0x3f, r0	; 63
     648:	0f 90       	pop	r0
     64a:	1f 90       	pop	r1
     64c:	18 95       	reti

0000064e <init_orb>:

void init_orb()
{
	// Set registers for normal operation, counter prescalar of 256, so count at 31.25 KHz
	// Overflow occurs every ~8 ms
	TCCR0A = 0x00;
     64e:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x04;
     650:	84 e0       	ldi	r24, 0x04	; 4
     652:	85 bd       	out	0x25, r24	; 37

	// Turn on OCR0A and TOV interrupts
	TIMSK0 = 0x03;
     654:	83 e0       	ldi	r24, 0x03	; 3
     656:	80 93 6e 00 	sts	0x006E, r24

	// Set all LEDs and vibration motors to outputs
	DDRB |= _BV(BLUELED2);
     65a:	27 9a       	sbi	0x04, 7	; 4
	DDRC |= _BV(REDLED2) | _BV(ACTIVITY);
     65c:	87 b1       	in	r24, 0x07	; 7
     65e:	80 6c       	ori	r24, 0xC0	; 192
     660:	87 b9       	out	0x07, r24	; 7
	DDRD |= _BV(LED1) | _BV(LED2) | _BV(GREENLED1) | _BV(BLUELED1) | _BV(GREENLED2);
     662:	8a b1       	in	r24, 0x0a	; 10
     664:	83 6d       	ori	r24, 0xD3	; 211
     666:	8a b9       	out	0x0a, r24	; 10
	DDRE |= _BV(LED3) | _BV(REDLED1);
     668:	8d b1       	in	r24, 0x0d	; 13
     66a:	84 64       	ori	r24, 0x44	; 68
     66c:	8d b9       	out	0x0d, r24	; 13
	DDRF |= _BV(LED4);
     66e:	87 9a       	sbi	0x10, 7	; 16


}
     670:	08 95       	ret

00000672 <set_orb0>:
}

// Sets the red, green and blue elements of the first LED with 8-bit resolution
void set_orb0(unsigned int red_led, unsigned int green_led, unsigned int blue_led)
{
	led_values_temp[0] = red_led;
     672:	80 93 25 01 	sts	0x0125, r24
	led_values_temp[1] = green_led;
     676:	60 93 26 01 	sts	0x0126, r22
	led_values_temp[2] = blue_led;
     67a:	40 93 27 01 	sts	0x0127, r20
}
     67e:	08 95       	ret

00000680 <set_orb1>:

// Sets the red, green and blue elements of the second LED with 8-bit resolution
void set_orb1(unsigned int red_led, unsigned int green_led, unsigned int blue_led)
{
	led_values_temp[3] = red_led;
     680:	80 93 28 01 	sts	0x0128, r24
	led_values_temp[4] = green_led;
     684:	60 93 29 01 	sts	0x0129, r22
	led_values_temp[5] = blue_led;
     688:	40 93 2a 01 	sts	0x012A, r20
}
     68c:	08 95       	ret

0000068e <set_orb>:

}

void set_orb(uint8_t whichOne, unsigned int red_led, unsigned int green_led, unsigned int blue_led)
{
	if(whichOne=='1') {
     68e:	81 33       	cpi	r24, 0x31	; 49
     690:	21 f4       	brne	.+8      	; 0x69a <set_orb+0xc>
		set_orb1(red_led, green_led, blue_led);
     692:	cb 01       	movw	r24, r22
     694:	ba 01       	movw	r22, r20
     696:	a9 01       	movw	r20, r18
     698:	f3 cf       	rjmp	.-26     	; 0x680 <set_orb1>
	}
	else {
		set_orb0(red_led, green_led, blue_led);
     69a:	cb 01       	movw	r24, r22
     69c:	ba 01       	movw	r22, r20
     69e:	a9 01       	movw	r20, r18
     6a0:	e8 cf       	rjmp	.-48     	; 0x672 <set_orb0>

000006a2 <set_led0>:
	}
}

void set_led0(unsigned int user)
{
	led_values_temp[6] = user;
     6a2:	80 93 2b 01 	sts	0x012B, r24
}
     6a6:	08 95       	ret

000006a8 <set_led1>:

void set_led1(unsigned int user)
{
	led_values_temp[7] = user;
     6a8:	80 93 2c 01 	sts	0x012C, r24
}
     6ac:	08 95       	ret

000006ae <set_led2>:

void set_led2(unsigned int user)
{
	led_values_temp[8] = user;
     6ae:	80 93 2d 01 	sts	0x012D, r24
}
     6b2:	08 95       	ret

000006b4 <set_led3>:

void set_led3(unsigned int user)
{
	led_values_temp[9] = user;
     6b4:	80 93 2e 01 	sts	0x012E, r24
}
     6b8:	08 95       	ret

000006ba <set_led>:
	led_values_temp[5] = blue_led;
}

void set_led(uint8_t whichOne, unsigned int intensity)
{
	switch(whichOne) {
     6ba:	81 33       	cpi	r24, 0x31	; 49
     6bc:	61 f0       	breq	.+24     	; 0x6d6 <set_led+0x1c>
     6be:	82 33       	cpi	r24, 0x32	; 50
     6c0:	18 f4       	brcc	.+6      	; 0x6c8 <set_led+0xe>
     6c2:	80 33       	cpi	r24, 0x30	; 48
     6c4:	71 f4       	brne	.+28     	; 0x6e2 <set_led+0x28>
     6c6:	05 c0       	rjmp	.+10     	; 0x6d2 <set_led+0x18>
     6c8:	82 33       	cpi	r24, 0x32	; 50
     6ca:	39 f0       	breq	.+14     	; 0x6da <set_led+0x20>
     6cc:	83 33       	cpi	r24, 0x33	; 51
     6ce:	49 f4       	brne	.+18     	; 0x6e2 <set_led+0x28>
     6d0:	06 c0       	rjmp	.+12     	; 0x6de <set_led+0x24>
		case '0':
			set_led0(intensity);
     6d2:	cb 01       	movw	r24, r22
     6d4:	e6 cf       	rjmp	.-52     	; 0x6a2 <set_led0>
			break;
		case '1':
			set_led1(intensity);
     6d6:	cb 01       	movw	r24, r22
     6d8:	e7 cf       	rjmp	.-50     	; 0x6a8 <set_led1>
			break;
		case '2':
			set_led2(intensity);
     6da:	cb 01       	movw	r24, r22
     6dc:	e8 cf       	rjmp	.-48     	; 0x6ae <set_led2>
			break;
		case '3':
			set_led3(intensity);
     6de:	cb 01       	movw	r24, r22
     6e0:	e9 cf       	rjmp	.-46     	; 0x6b4 <set_led3>
     6e2:	08 95       	ret

000006e4 <turn_off_leds>:


// Turns off all LEDs
void turn_off_leds()
{
	set_orb0(0,0,0);
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	60 e0       	ldi	r22, 0x00	; 0
     6ea:	70 e0       	ldi	r23, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	c0 df       	rcall	.-128    	; 0x672 <set_orb0>
	set_orb1(0,0,0);
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	70 e0       	ldi	r23, 0x00	; 0
     6fa:	40 e0       	ldi	r20, 0x00	; 0
     6fc:	50 e0       	ldi	r21, 0x00	; 0
     6fe:	c0 df       	rcall	.-128    	; 0x680 <set_orb1>
	set_led0(0);
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	ce df       	rcall	.-100    	; 0x6a2 <set_led0>
	set_led1(0);
     706:	80 e0       	ldi	r24, 0x00	; 0
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	ce df       	rcall	.-100    	; 0x6a8 <set_led1>
	set_led2(0);
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	ce df       	rcall	.-100    	; 0x6ae <set_led2>
	set_led3(0);
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	90 e0       	ldi	r25, 0x00	; 0
}
     716:	ce cf       	rjmp	.-100    	; 0x6b4 <set_led3>

00000718 <EVENT_USB_Device_Connect>:

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{

}
     718:	08 95       	ret

0000071a <EVENT_USB_Device_Disconnect>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	activity_state=0;
     71a:	10 92 31 01 	sts	0x0131, r1
	turn_off_motors();
     71e:	6c dd       	rcall	.-1320   	; 0x1f8 <turn_off_motors>
	turn_off_leds();
     720:	e1 df       	rcall	.-62     	; 0x6e4 <turn_off_leds>
	disable_servos();
     722:	8f dd       	rcall	.-1250   	; 0x242 <disable_servos>
	disable_vibration_motors();
}
     724:	28 ce       	rjmp	.-944    	; 0x376 <disable_vibration_motors>

00000726 <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     726:	80 91 0e 01 	lds	r24, 0x010E
     72a:	90 91 0f 01 	lds	r25, 0x010F
     72e:	00 97       	sbiw	r24, 0x00	; 0
     730:	29 f0       	breq	.+10     	; 0x73c <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     732:	01 97       	sbiw	r24, 0x01	; 1
     734:	90 93 0f 01 	sts	0x010F, r25
     738:	80 93 0e 01 	sts	0x010E, r24
     73c:	08 95       	ret

0000073e <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
     73e:	0f 93       	push	r16
     740:	1f 93       	push	r17
     742:	a8 01       	movw	r20, r16
	HIDReportEcho.ReportID   = ReportID;
     744:	ee e3       	ldi	r30, 0x3E	; 62
     746:	f2 e0       	ldi	r31, 0x02	; 2
     748:	60 93 3e 02 	sts	0x023E, r22
	OutGoingReport.ReportID   = ReportID;
     74c:	60 93 49 02 	sts	0x0249, r22

	HIDReportEcho.ReportSize = ReportSize;
     750:	00 93 3f 02 	sts	0x023F, r16
     754:	52 83       	std	Z+2, r21	; 0x02
	OutGoingReport.ReportSize = ReportSize;
     756:	00 93 4a 02 	sts	0x024A, r16
     75a:	50 93 4b 02 	sts	0x024B, r21
	memcpy(HIDReportEcho.ReportData, ReportData, ReportSize);
     75e:	33 96       	adiw	r30, 0x03	; 3
     760:	cf 01       	movw	r24, r30
     762:	b9 01       	movw	r22, r18
     764:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <memcpy>
}
     768:	1f 91       	pop	r17
     76a:	0f 91       	pop	r16
     76c:	08 95       	ret

0000076e <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     76e:	0f 93       	push	r16
     770:	1f 93       	push	r17
     772:	cf 93       	push	r28
     774:	df 93       	push	r29
     776:	fb 01       	movw	r30, r22
     778:	c9 01       	movw	r24, r18
     77a:	e8 01       	movw	r28, r16
	if (OutGoingReport.ReportID)
     77c:	20 91 49 02 	lds	r18, 0x0249
     780:	21 11       	cpse	r18, r1
	  *ReportID = OutGoingReport.ReportID;
     782:	20 83       	st	Z, r18

	memcpy(ReportData, OutGoingReport.ReportData, OutGoingReport.ReportSize);
     784:	2c e4       	ldi	r18, 0x4C	; 76
     786:	32 e0       	ldi	r19, 0x02	; 2
     788:	40 91 4a 02 	lds	r20, 0x024A
     78c:	50 91 4b 02 	lds	r21, 0x024B
     790:	b9 01       	movw	r22, r18
     792:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <memcpy>

	*ReportSize = OutGoingReport.ReportSize;
     796:	80 91 4a 02 	lds	r24, 0x024A
     79a:	90 91 4b 02 	lds	r25, 0x024B
     79e:	99 83       	std	Y+1, r25	; 0x01
     7a0:	88 83       	st	Y, r24
	return false;
}
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	df 91       	pop	r29
     7a6:	cf 91       	pop	r28
     7a8:	1f 91       	pop	r17
     7aa:	0f 91       	pop	r16
     7ac:	08 95       	ret

000007ae <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&Generic_HID_Interface);
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	91 e0       	ldi	r25, 0x01	; 1
     7b2:	0c 94 17 0d 	jmp	0x1a2e	; 0x1a2e <HID_Device_ProcessControlRequest>

000007b6 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Generic_HID_Interface);
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	91 e0       	ldi	r25, 0x01	; 1
     7ba:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <HID_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     7be:	e2 ee       	ldi	r30, 0xE2	; 226
     7c0:	f0 e0       	ldi	r31, 0x00	; 0
     7c2:	80 81       	ld	r24, Z
     7c4:	84 60       	ori	r24, 0x04	; 4
     7c6:	80 83       	st	Z, r24

	USB_Device_EnableSOFEvents();

}
     7c8:	08 95       	ret

000007ca <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     7ca:	84 b7       	in	r24, 0x34	; 52
     7cc:	87 7f       	andi	r24, 0xF7	; 247
     7ce:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     7d0:	88 e1       	ldi	r24, 0x18	; 24
     7d2:	0f b6       	in	r0, 0x3f	; 63
     7d4:	f8 94       	cli
     7d6:	80 93 60 00 	sts	0x0060, r24
     7da:	10 92 60 00 	sts	0x0060, r1
     7de:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	20 e8       	ldi	r18, 0x80	; 128
     7e6:	0f b6       	in	r0, 0x3f	; 63
     7e8:	f8 94       	cli
     7ea:	20 93 61 00 	sts	0x0061, r18
     7ee:	80 93 61 00 	sts	0x0061, r24
     7f2:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRB  |=  LEDS_PORTB_LEDS;
     7f4:	20 9a       	sbi	0x04, 0	; 4
				PORTB |=  LEDS_PORTB_LEDS;
     7f6:	28 9a       	sbi	0x05, 0	; 5
				DDRD  |=  LEDS_PORTD_LEDS;
     7f8:	55 9a       	sbi	0x0a, 5	; 10
				PORTD |=  LEDS_PORTD_LEDS;
     7fa:	5d 9a       	sbi	0x0b, 5	; 11
				DDRC  |=  LEDS_PORTC_LEDS;
     7fc:	3f 9a       	sbi	0x07, 7	; 7
				PORTC &= ~LEDS_PORTC_LEDS;
     7fe:	47 98       	cbi	0x08, 7	; 8

	/* Hardware Initialization */
	LEDs_Init();
	init_analog();
     800:	c7 dc       	rcall	.-1650   	; 0x190 <init_analog>
	init_orb();
     802:	25 df       	rcall	.-438    	; 0x64e <init_orb>
	init_vbr();
     804:	c5 dd       	rcall	.-1142   	; 0x390 <init_vbr>
	init_tiny_comm();
     806:	e4 dc       	rcall	.-1592   	; 0x1d0 <init_tiny_comm>
	USB_Init();
     808:	c0 d5       	rcall	.+2944   	; 0x138a <USB_Init>
	serial_init();
}
     80a:	30 cd       	rjmp	.-1440   	; 0x26c <serial_init>

0000080c <main>:

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
     80c:	2f 92       	push	r2
     80e:	3f 92       	push	r3
     810:	4f 92       	push	r4
     812:	5f 92       	push	r5
     814:	6f 92       	push	r6
     816:	7f 92       	push	r7
     818:	8f 92       	push	r8
     81a:	9f 92       	push	r9
     81c:	af 92       	push	r10
     81e:	bf 92       	push	r11
     820:	cf 92       	push	r12
     822:	df 92       	push	r13
     824:	ef 92       	push	r14
     826:	ff 92       	push	r15
     828:	0f 93       	push	r16
     82a:	1f 93       	push	r17
     82c:	df 93       	push	r29
     82e:	cf 93       	push	r28
     830:	cd b7       	in	r28, 0x3d	; 61
     832:	de b7       	in	r29, 0x3e	; 62
     834:	2e 97       	sbiw	r28, 0x0e	; 14
     836:	0f b6       	in	r0, 0x3f	; 63
     838:	f8 94       	cli
     83a:	de bf       	out	0x3e, r29	; 62
     83c:	0f be       	out	0x3f, r0	; 63
     83e:	cd bf       	out	0x3d, r28	; 61
	unsigned long int exit_count = 0;
	unsigned long int max_count = 500000;
	uint8_t timeout = 0;
	char usb_data; // Flag that marks if usb_data is received

	SetupHardware();
     840:	c4 df       	rcall	.-120    	; 0x7ca <SetupHardware>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     842:	78 94       	sei
				__builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				sei();
				#endif

				GCC_MEMORY_BARRIER();
     844:	66 24       	eor	r6, r6
     846:	77 24       	eor	r7, r7
     848:	aa 24       	eor	r10, r10
     84a:	bb 24       	eor	r11, r11
     84c:	65 01       	movw	r12, r10
     84e:	50 e2       	ldi	r21, 0x20	; 32
     850:	e5 2e       	mov	r14, r21
     852:	51 ea       	ldi	r21, 0xA1	; 161
     854:	f5 2e       	mov	r15, r21
     856:	57 e0       	ldi	r21, 0x07	; 7
     858:	05 2f       	mov	r16, r21
     85a:	11 2d       	mov	r17, r1
     85c:	99 24       	eor	r9, r9
				{
					activity_state = 0;
					exit_count = max_count+5;
				}
				else
					activity_state = 1;
     85e:	88 24       	eor	r8, r8
     860:	83 94       	inc	r8
     862:	40 e4       	ldi	r20, 0x40	; 64
     864:	44 2e       	mov	r4, r20
     866:	4f e1       	ldi	r20, 0x1F	; 31
     868:	54 2e       	mov	r5, r20
					exit_count = 0;
				}
				break;
				// If 'S', use bytes 1-2 to set servo position
				case 'S':
				activity_state=1;
     86a:	32 e0       	ldi	r19, 0x02	; 2
     86c:	23 2e       	mov	r2, r19
     86e:	31 2c       	mov	r3, r1
     870:	2c 0e       	add	r2, r28
     872:	3d 1e       	adc	r3, r29
				for(int t = 1; t < 3; t++)
     874:	ce 01       	movw	r24, r28
     876:	04 96       	adiw	r24, 0x04	; 4
     878:	9c 87       	std	Y+12, r25	; 0x0c
     87a:	8b 87       	std	Y+11, r24	; 0x0b
				}
				break;
				// If 'M', use bytes 1-3 to set motor speed and direction
				case 'M':
				activity_state=1;
				for(int t = 1; t < 4; t++)
     87c:	fe 01       	movw	r30, r28
     87e:	35 96       	adiw	r30, 0x05	; 5
     880:	fe 87       	std	Y+14, r31	; 0x0e
     882:	ed 87       	std	Y+13, r30	; 0x0d
			serial_data[0] = receive_char();
			switch(serial_data[0]) {
				// If O, set an RGB LED using 4 bytes of serial data
				case 'O':
				activity_state=1;
				for(int t = 1; t < 5; t++)
     884:	ce 01       	movw	r24, r28
     886:	06 96       	adiw	r24, 0x06	; 6
     888:	9a 87       	std	Y+10, r25	; 0x0a
     88a:	89 87       	std	Y+9, r24	; 0x09
     88c:	0a c0       	rjmp	.+20     	; 0x8a2 <main+0x96>
     88e:	aa 24       	eor	r10, r10
     890:	bb 24       	eor	r11, r11
     892:	65 01       	movw	r12, r10
     894:	20 e4       	ldi	r18, 0x40	; 64
     896:	e2 2e       	mov	r14, r18
     898:	2b e4       	ldi	r18, 0x4B	; 75
     89a:	f2 2e       	mov	r15, r18
     89c:	2c e4       	ldi	r18, 0x4C	; 76
     89e:	02 2f       	mov	r16, r18
     8a0:	11 2d       	mov	r17, r1
	GlobalInterruptEnable();

	for (;;)
	{
		// Necessary LUFA library calls that need be run periodically to check USB for data
		HID_Device_USBTask(&Generic_HID_Interface);
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	91 e0       	ldi	r25, 0x01	; 1
     8a6:	d3 d7       	rcall	.+4006   	; 0x184e <HID_Device_USBTask>
		USB_USBTask();
     8a8:	bd d7       	rcall	.+3962   	; 0x1824 <USB_USBTask>

		if(sensor_broadcast_count > 30)
     8aa:	80 91 35 01 	lds	r24, 0x0135
     8ae:	8f 31       	cpi	r24, 0x1F	; 31
     8b0:	18 f0       	brcs	.+6      	; 0x8b8 <main+0xac>
		{
			sensor_broadcast_count = 0;
     8b2:	10 92 35 01 	sts	0x0135, r1
			send_sensors();
     8b6:	fc dc       	rcall	.-1544   	; 0x2b0 <send_sensors>
		}

		// If we reach an idle timer count of 500,000 (in USB mode) or 5 million (in serial mode), ~5 (or 50) seconds has elapsed and we turn everything off and go back to idle mode
		if(exit_count == max_count && exit_count <= max_count+5) {
     8b8:	ae 14       	cp	r10, r14
     8ba:	bf 04       	cpc	r11, r15
     8bc:	c0 06       	cpc	r12, r16
     8be:	d1 06       	cpc	r13, r17
     8c0:	89 f4       	brne	.+34     	; 0x8e4 <main+0xd8>
     8c2:	d6 01       	movw	r26, r12
     8c4:	c5 01       	movw	r24, r10
     8c6:	05 96       	adiw	r24, 0x05	; 5
     8c8:	a1 1d       	adc	r26, r1
     8ca:	b1 1d       	adc	r27, r1
     8cc:	8a 15       	cp	r24, r10
     8ce:	9b 05       	cpc	r25, r11
     8d0:	ac 05       	cpc	r26, r12
     8d2:	bd 05       	cpc	r27, r13
     8d4:	88 f0       	brcs	.+34     	; 0x8f8 <main+0xec>
			turn_off_motors();
     8d6:	90 dc       	rcall	.-1760   	; 0x1f8 <turn_off_motors>
			turn_off_leds();
     8d8:	05 df       	rcall	.-502    	; 0x6e4 <turn_off_leds>
			disable_servos();
     8da:	b3 dc       	rcall	.-1690   	; 0x242 <disable_servos>
			disable_vibration_motors();
     8dc:	4c dd       	rcall	.-1384   	; 0x376 <disable_vibration_motors>
			activity_state = 0; // Idle mode flag
     8de:	10 92 31 01 	sts	0x0131, r1
     8e2:	05 c0       	rjmp	.+10     	; 0x8ee <main+0xe2>
			exit_count++;
		}
		// Otherwise count up!
		else if(exit_count < max_count) {
     8e4:	ae 14       	cp	r10, r14
     8e6:	bf 04       	cpc	r11, r15
     8e8:	c0 06       	cpc	r12, r16
     8ea:	d1 06       	cpc	r13, r17
     8ec:	28 f4       	brcc	.+10     	; 0x8f8 <main+0xec>
			exit_count++;
     8ee:	08 94       	sec
     8f0:	a1 1c       	adc	r10, r1
     8f2:	b1 1c       	adc	r11, r1
     8f4:	c1 1c       	adc	r12, r1
     8f6:	d1 1c       	adc	r13, r1
		}

		// Check if we've received data over serial, this is experimental
		if(received_data_available()!=0)
     8f8:	d2 dc       	rcall	.-1628   	; 0x29e <received_data_available>
     8fa:	88 23       	and	r24, r24
     8fc:	09 f4       	brne	.+2      	; 0x900 <main+0xf4>
     8fe:	94 c1       	rjmp	.+808    	; 0xc28 <__stack+0x129>
		{
			max_count = 5000000; // Set the time out to 5,000,000, so now we time out in 50 seconds instead of 5
			serial_data[0] = receive_char();
     900:	e6 dc       	rcall	.-1588   	; 0x2ce <receive_char>
     902:	89 83       	std	Y+1, r24	; 0x01
			switch(serial_data[0]) {
     904:	82 35       	cpi	r24, 0x52	; 82
     906:	09 f4       	brne	.+2      	; 0x90a <main+0xfe>
     908:	06 c1       	rjmp	.+524    	; 0xb16 <__stack+0x17>
     90a:	83 35       	cpi	r24, 0x53	; 83
     90c:	80 f4       	brcc	.+32     	; 0x92e <main+0x122>
     90e:	8c 34       	cpi	r24, 0x4C	; 76
     910:	09 f4       	brne	.+2      	; 0x914 <main+0x108>
     912:	47 c0       	rjmp	.+142    	; 0x9a2 <main+0x196>
     914:	8d 34       	cpi	r24, 0x4D	; 77
     916:	20 f4       	brcc	.+8      	; 0x920 <main+0x114>
     918:	87 34       	cpi	r24, 0x47	; 71
     91a:	09 f0       	breq	.+2      	; 0x91e <main+0x112>
     91c:	bb cf       	rjmp	.-138    	; 0x894 <main+0x88>
     91e:	02 c1       	rjmp	.+516    	; 0xb24 <__stack+0x25>
     920:	8d 34       	cpi	r24, 0x4D	; 77
     922:	09 f4       	brne	.+2      	; 0x926 <main+0x11a>
     924:	61 c0       	rjmp	.+194    	; 0x9e8 <main+0x1dc>
     926:	8f 34       	cpi	r24, 0x4F	; 79
     928:	09 f0       	breq	.+2      	; 0x92c <main+0x120>
     92a:	b4 cf       	rjmp	.-152    	; 0x894 <main+0x88>
     92c:	13 c0       	rjmp	.+38     	; 0x954 <main+0x148>
     92e:	88 35       	cpi	r24, 0x58	; 88
     930:	09 f4       	brne	.+2      	; 0x934 <main+0x128>
     932:	ee c0       	rjmp	.+476    	; 0xb10 <__stack+0x11>
     934:	89 35       	cpi	r24, 0x59	; 89
     936:	38 f4       	brcc	.+14     	; 0x946 <main+0x13a>
     938:	83 35       	cpi	r24, 0x53	; 83
     93a:	09 f4       	brne	.+2      	; 0x93e <main+0x132>
     93c:	9c c0       	rjmp	.+312    	; 0xa76 <main+0x26a>
     93e:	86 35       	cpi	r24, 0x56	; 86
     940:	09 f0       	breq	.+2      	; 0x944 <main+0x138>
     942:	a8 cf       	rjmp	.-176    	; 0x894 <main+0x88>
     944:	76 c0       	rjmp	.+236    	; 0xa32 <main+0x226>
     946:	83 37       	cpi	r24, 0x73	; 115
     948:	09 f4       	brne	.+2      	; 0x94c <main+0x140>
     94a:	b8 c0       	rjmp	.+368    	; 0xabc <main+0x2b0>
     94c:	8a 37       	cpi	r24, 0x7A	; 122
     94e:	09 f0       	breq	.+2      	; 0x952 <main+0x146>
     950:	a1 cf       	rjmp	.-190    	; 0x894 <main+0x88>
     952:	5a c1       	rjmp	.+692    	; 0xc08 <__stack+0x109>
				// If O, set an RGB LED using 4 bytes of serial data
				case 'O':
				activity_state=1;
     954:	80 92 31 01 	sts	0x0131, r8
     958:	81 01       	movw	r16, r2
     95a:	18 c0       	rjmp	.+48     	; 0x98c <main+0x180>
     95c:	c2 01       	movw	r24, r4
     95e:	01 97       	sbiw	r24, 0x01	; 1
     960:	f1 f7       	brne	.-4      	; 0x95e <main+0x152>
				{
					timeout = 0;
					// Wait up to 500ms for the next byte
					while(!received_data_available() && timeout < 250) {
						_delay_ms(2);
						timeout++;
     962:	93 94       	inc	r9
				activity_state=1;
				for(int t = 1; t < 5; t++)
				{
					timeout = 0;
					// Wait up to 500ms for the next byte
					while(!received_data_available() && timeout < 250) {
     964:	9c dc       	rcall	.-1736   	; 0x29e <received_data_available>
     966:	88 23       	and	r24, r24
     968:	21 f4       	brne	.+8      	; 0x972 <main+0x166>
     96a:	9a ef       	ldi	r25, 0xFA	; 250
     96c:	99 16       	cp	r9, r25
     96e:	b1 f7       	brne	.-20     	; 0x95c <main+0x150>
     970:	91 cf       	rjmp	.-222    	; 0x894 <main+0x88>
						_delay_ms(2);
						timeout++;
					}
					if(timeout >= 250)
     972:	e9 ef       	ldi	r30, 0xF9	; 249
     974:	e9 15       	cp	r30, r9
     976:	08 f4       	brcc	.+2      	; 0x97a <main+0x16e>
     978:	8d cf       	rjmp	.-230    	; 0x894 <main+0x88>
						break;
					serial_data[t] = receive_char();
     97a:	a9 dc       	rcall	.-1710   	; 0x2ce <receive_char>
     97c:	f8 01       	movw	r30, r16
     97e:	81 93       	st	Z+, r24
     980:	8f 01       	movw	r16, r30
			serial_data[0] = receive_char();
			switch(serial_data[0]) {
				// If O, set an RGB LED using 4 bytes of serial data
				case 'O':
				activity_state=1;
				for(int t = 1; t < 5; t++)
     982:	89 85       	ldd	r24, Y+9	; 0x09
     984:	9a 85       	ldd	r25, Y+10	; 0x0a
     986:	e8 17       	cp	r30, r24
     988:	f9 07       	cpc	r31, r25
     98a:	11 f0       	breq	.+4      	; 0x990 <main+0x184>
     98c:	99 24       	eor	r9, r9
     98e:	ea cf       	rjmp	.-44     	; 0x964 <main+0x158>
					if(timeout >= 250)
						break;
					serial_data[t] = receive_char();
				}
				if(timeout < 250) {
					set_orb(serial_data[1], serial_data[2], serial_data[3], serial_data[4]);
     990:	6b 81       	ldd	r22, Y+3	; 0x03
     992:	4c 81       	ldd	r20, Y+4	; 0x04
     994:	2d 81       	ldd	r18, Y+5	; 0x05
     996:	8a 81       	ldd	r24, Y+2	; 0x02
     998:	70 e0       	ldi	r23, 0x00	; 0
     99a:	50 e0       	ldi	r21, 0x00	; 0
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	77 de       	rcall	.-786    	; 0x68e <set_orb>
     9a0:	76 cf       	rjmp	.-276    	; 0x88e <main+0x82>
					exit_count = 0;  // Reset time-out counter
				}
				break;
				// If 'L', set an LED's intensity with 2 bytes of serial data
				case 'L':
				activity_state=1;
     9a2:	80 92 31 01 	sts	0x0131, r8
     9a6:	81 01       	movw	r16, r2
     9a8:	18 c0       	rjmp	.+48     	; 0x9da <main+0x1ce>
     9aa:	c2 01       	movw	r24, r4
     9ac:	01 97       	sbiw	r24, 0x01	; 1
     9ae:	f1 f7       	brne	.-4      	; 0x9ac <main+0x1a0>
				for(int t = 1; t < 3; t++)
				{
					timeout = 0;
					while(!received_data_available() && timeout < 250) {
						_delay_ms(2);
						timeout++;
     9b0:	93 94       	inc	r9
				case 'L':
				activity_state=1;
				for(int t = 1; t < 3; t++)
				{
					timeout = 0;
					while(!received_data_available() && timeout < 250) {
     9b2:	75 dc       	rcall	.-1814   	; 0x29e <received_data_available>
     9b4:	88 23       	and	r24, r24
     9b6:	21 f4       	brne	.+8      	; 0x9c0 <main+0x1b4>
     9b8:	9a ef       	ldi	r25, 0xFA	; 250
     9ba:	99 16       	cp	r9, r25
     9bc:	b1 f7       	brne	.-20     	; 0x9aa <main+0x19e>
     9be:	6a cf       	rjmp	.-300    	; 0x894 <main+0x88>
						_delay_ms(2);
						timeout++;
					}
					if(timeout >= 250)
     9c0:	e9 ef       	ldi	r30, 0xF9	; 249
     9c2:	e9 15       	cp	r30, r9
     9c4:	08 f4       	brcc	.+2      	; 0x9c8 <main+0x1bc>
     9c6:	66 cf       	rjmp	.-308    	; 0x894 <main+0x88>
					break;
					serial_data[t] = receive_char();
     9c8:	82 dc       	rcall	.-1788   	; 0x2ce <receive_char>
     9ca:	f8 01       	movw	r30, r16
     9cc:	81 93       	st	Z+, r24
     9ce:	8f 01       	movw	r16, r30
				}
				break;
				// If 'L', set an LED's intensity with 2 bytes of serial data
				case 'L':
				activity_state=1;
				for(int t = 1; t < 3; t++)
     9d0:	8b 85       	ldd	r24, Y+11	; 0x0b
     9d2:	9c 85       	ldd	r25, Y+12	; 0x0c
     9d4:	e8 17       	cp	r30, r24
     9d6:	f9 07       	cpc	r31, r25
     9d8:	11 f0       	breq	.+4      	; 0x9de <main+0x1d2>
     9da:	99 24       	eor	r9, r9
     9dc:	ea cf       	rjmp	.-44     	; 0x9b2 <main+0x1a6>
					if(timeout >= 250)
					break;
					serial_data[t] = receive_char();
				}
				if(timeout < 250) {
					set_led(serial_data[1], serial_data[2]);
     9de:	6b 81       	ldd	r22, Y+3	; 0x03
     9e0:	8a 81       	ldd	r24, Y+2	; 0x02
     9e2:	70 e0       	ldi	r23, 0x00	; 0
     9e4:	6a de       	rcall	.-812    	; 0x6ba <set_led>
     9e6:	53 cf       	rjmp	.-346    	; 0x88e <main+0x82>
					exit_count = 0;  // Reset time-out counter
				}
				break;
				// If 'M', use bytes 1-3 to set motor speed and direction
				case 'M':
				activity_state=1;
     9e8:	80 92 31 01 	sts	0x0131, r8
     9ec:	81 01       	movw	r16, r2
     9ee:	18 c0       	rjmp	.+48     	; 0xa20 <main+0x214>
     9f0:	c2 01       	movw	r24, r4
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	f1 f7       	brne	.-4      	; 0x9f2 <main+0x1e6>
				for(int t = 1; t < 4; t++)
				{
					timeout = 0;
					while(!received_data_available() && timeout < 250) {
						_delay_ms(2);
						timeout++;
     9f6:	93 94       	inc	r9
				case 'M':
				activity_state=1;
				for(int t = 1; t < 4; t++)
				{
					timeout = 0;
					while(!received_data_available() && timeout < 250) {
     9f8:	52 dc       	rcall	.-1884   	; 0x29e <received_data_available>
     9fa:	88 23       	and	r24, r24
     9fc:	21 f4       	brne	.+8      	; 0xa06 <main+0x1fa>
     9fe:	9a ef       	ldi	r25, 0xFA	; 250
     a00:	99 16       	cp	r9, r25
     a02:	b1 f7       	brne	.-20     	; 0x9f0 <main+0x1e4>
     a04:	47 cf       	rjmp	.-370    	; 0x894 <main+0x88>
						_delay_ms(2);
						timeout++;
					}
					if(timeout >= 250)
     a06:	e9 ef       	ldi	r30, 0xF9	; 249
     a08:	e9 15       	cp	r30, r9
     a0a:	08 f4       	brcc	.+2      	; 0xa0e <main+0x202>
     a0c:	43 cf       	rjmp	.-378    	; 0x894 <main+0x88>
					break;
					serial_data[t] = receive_char();
     a0e:	5f dc       	rcall	.-1858   	; 0x2ce <receive_char>
     a10:	f8 01       	movw	r30, r16
     a12:	81 93       	st	Z+, r24
     a14:	8f 01       	movw	r16, r30
				}
				break;
				// If 'M', use bytes 1-3 to set motor speed and direction
				case 'M':
				activity_state=1;
				for(int t = 1; t < 4; t++)
     a16:	8d 85       	ldd	r24, Y+13	; 0x0d
     a18:	9e 85       	ldd	r25, Y+14	; 0x0e
     a1a:	e8 17       	cp	r30, r24
     a1c:	f9 07       	cpc	r31, r25
     a1e:	11 f0       	breq	.+4      	; 0xa24 <main+0x218>
     a20:	99 24       	eor	r9, r9
     a22:	ea cf       	rjmp	.-44     	; 0x9f8 <main+0x1ec>
					if(timeout >= 250)
					break;
					serial_data[t] = receive_char();
				}
				if(timeout < 250) {
					set_motor(serial_data[1]-48, serial_data[2]-48, serial_data[3]);
     a24:	8a 81       	ldd	r24, Y+2	; 0x02
     a26:	6b 81       	ldd	r22, Y+3	; 0x03
     a28:	60 53       	subi	r22, 0x30	; 48
     a2a:	80 53       	subi	r24, 0x30	; 48
     a2c:	4c 81       	ldd	r20, Y+4	; 0x04
     a2e:	e6 db       	rcall	.-2100   	; 0x1fc <set_motor>
     a30:	2e cf       	rjmp	.-420    	; 0x88e <main+0x82>
					exit_count = 0;  // Reset time-out counter
				}
				break;
				// If 'V', use bytes 1-2 to set vibration motor intensity
				case 'V':
				activity_state=1;
     a32:	80 92 31 01 	sts	0x0131, r8
     a36:	81 01       	movw	r16, r2
     a38:	18 c0       	rjmp	.+48     	; 0xa6a <main+0x25e>
     a3a:	c2 01       	movw	r24, r4
     a3c:	01 97       	sbiw	r24, 0x01	; 1
     a3e:	f1 f7       	brne	.-4      	; 0xa3c <main+0x230>
				for(int t = 1; t < 3; t++)
				{
					timeout = 0;
					while(!received_data_available() && timeout < 250) {
						_delay_ms(2);
						timeout++;
     a40:	93 94       	inc	r9
				case 'V':
				activity_state=1;
				for(int t = 1; t < 3; t++)
				{
					timeout = 0;
					while(!received_data_available() && timeout < 250) {
     a42:	2d dc       	rcall	.-1958   	; 0x29e <received_data_available>
     a44:	88 23       	and	r24, r24
     a46:	21 f4       	brne	.+8      	; 0xa50 <main+0x244>
     a48:	9a ef       	ldi	r25, 0xFA	; 250
     a4a:	99 16       	cp	r9, r25
     a4c:	b1 f7       	brne	.-20     	; 0xa3a <main+0x22e>
     a4e:	22 cf       	rjmp	.-444    	; 0x894 <main+0x88>
						_delay_ms(2);
						timeout++;
					}
					if(timeout >= 250)
     a50:	e9 ef       	ldi	r30, 0xF9	; 249
     a52:	e9 15       	cp	r30, r9
     a54:	08 f4       	brcc	.+2      	; 0xa58 <main+0x24c>
     a56:	1e cf       	rjmp	.-452    	; 0x894 <main+0x88>
					break;
					serial_data[t] = receive_char();
     a58:	3a dc       	rcall	.-1932   	; 0x2ce <receive_char>
     a5a:	f8 01       	movw	r30, r16
     a5c:	81 93       	st	Z+, r24
     a5e:	8f 01       	movw	r16, r30
				}
				break;
				// If 'V', use bytes 1-2 to set vibration motor intensity
				case 'V':
				activity_state=1;
				for(int t = 1; t < 3; t++)
     a60:	8b 85       	ldd	r24, Y+11	; 0x0b
     a62:	9c 85       	ldd	r25, Y+12	; 0x0c
     a64:	e8 17       	cp	r30, r24
     a66:	f9 07       	cpc	r31, r25
     a68:	11 f0       	breq	.+4      	; 0xa6e <main+0x262>
     a6a:	99 24       	eor	r9, r9
     a6c:	ea cf       	rjmp	.-44     	; 0xa42 <main+0x236>
					if(timeout >= 250)
					break;
					serial_data[t] = receive_char();
				}
				if(timeout < 250) {
					set_vibration_motor(serial_data[1], serial_data[2]);
     a6e:	8a 81       	ldd	r24, Y+2	; 0x02
     a70:	6b 81       	ldd	r22, Y+3	; 0x03
     a72:	6f dc       	rcall	.-1826   	; 0x352 <set_vibration_motor>
     a74:	0c cf       	rjmp	.-488    	; 0x88e <main+0x82>
					exit_count = 0;
				}
				break;
				// If 'S', use bytes 1-2 to set servo position
				case 'S':
				activity_state=1;
     a76:	80 92 31 01 	sts	0x0131, r8
     a7a:	81 01       	movw	r16, r2
     a7c:	18 c0       	rjmp	.+48     	; 0xaae <main+0x2a2>
     a7e:	c2 01       	movw	r24, r4
     a80:	01 97       	sbiw	r24, 0x01	; 1
     a82:	f1 f7       	brne	.-4      	; 0xa80 <main+0x274>
				for(int t = 1; t < 3; t++)
				{
					timeout = 0;
					while(!received_data_available() && timeout < 250) {
						_delay_ms(2);
						timeout++;
     a84:	93 94       	inc	r9
				case 'S':
				activity_state=1;
				for(int t = 1; t < 3; t++)
				{
					timeout = 0;
					while(!received_data_available() && timeout < 250) {
     a86:	0b dc       	rcall	.-2026   	; 0x29e <received_data_available>
     a88:	88 23       	and	r24, r24
     a8a:	21 f4       	brne	.+8      	; 0xa94 <main+0x288>
     a8c:	9a ef       	ldi	r25, 0xFA	; 250
     a8e:	99 16       	cp	r9, r25
     a90:	b1 f7       	brne	.-20     	; 0xa7e <main+0x272>
     a92:	00 cf       	rjmp	.-512    	; 0x894 <main+0x88>
						_delay_ms(2);
						timeout++;
					}
					if(timeout >= 250)
     a94:	e9 ef       	ldi	r30, 0xF9	; 249
     a96:	e9 15       	cp	r30, r9
     a98:	08 f4       	brcc	.+2      	; 0xa9c <main+0x290>
     a9a:	fc ce       	rjmp	.-520    	; 0x894 <main+0x88>
					break;
					serial_data[t] = receive_char();
     a9c:	18 dc       	rcall	.-2000   	; 0x2ce <receive_char>
     a9e:	f8 01       	movw	r30, r16
     aa0:	81 93       	st	Z+, r24
     aa2:	8f 01       	movw	r16, r30
				}
				break;
				// If 'S', use bytes 1-2 to set servo position
				case 'S':
				activity_state=1;
				for(int t = 1; t < 3; t++)
     aa4:	8b 85       	ldd	r24, Y+11	; 0x0b
     aa6:	9c 85       	ldd	r25, Y+12	; 0x0c
     aa8:	e8 17       	cp	r30, r24
     aaa:	f9 07       	cpc	r31, r25
     aac:	11 f0       	breq	.+4      	; 0xab2 <main+0x2a6>
     aae:	99 24       	eor	r9, r9
     ab0:	ea cf       	rjmp	.-44     	; 0xa86 <main+0x27a>
					if(timeout >= 250)
					break;
					serial_data[t] = receive_char();
				}
				if(timeout < 250) {
					set_servo(serial_data[1]-48, serial_data[2]);
     ab2:	8a 81       	ldd	r24, Y+2	; 0x02
     ab4:	80 53       	subi	r24, 0x30	; 48
     ab6:	6b 81       	ldd	r22, Y+3	; 0x03
     ab8:	c6 db       	rcall	.-2164   	; 0x246 <set_servo>
     aba:	e9 ce       	rjmp	.-558    	; 0x88e <main+0x82>
					exit_count = 0;
				}
				break;
				// If 's', return sensor values of the selected sensor port
				case 's':
				activity_state=1;
     abc:	80 92 31 01 	sts	0x0131, r8
     ac0:	04 c0       	rjmp	.+8      	; 0xaca <main+0x2be>
     ac2:	c2 01       	movw	r24, r4
     ac4:	01 97       	sbiw	r24, 0x01	; 1
     ac6:	f1 f7       	brne	.-4      	; 0xac4 <main+0x2b8>
				while(!received_data_available() && timeout < 250) {
					_delay_ms(2);
					timeout++;
     ac8:	93 94       	inc	r9
				}
				break;
				// If 's', return sensor values of the selected sensor port
				case 's':
				activity_state=1;
				while(!received_data_available() && timeout < 250) {
     aca:	e9 db       	rcall	.-2094   	; 0x29e <received_data_available>
     acc:	88 23       	and	r24, r24
     ace:	21 f4       	brne	.+8      	; 0xad8 <main+0x2cc>
     ad0:	99 ef       	ldi	r25, 0xF9	; 249
     ad2:	99 15       	cp	r25, r9
     ad4:	b0 f7       	brcc	.-20     	; 0xac2 <main+0x2b6>
     ad6:	de ce       	rjmp	.-580    	; 0x894 <main+0x88>
					_delay_ms(2);
					timeout++;
				}
				if(timeout < 250)
     ad8:	e9 ef       	ldi	r30, 0xF9	; 249
     ada:	e9 15       	cp	r30, r9
     adc:	08 f4       	brcc	.+2      	; 0xae0 <main+0x2d4>
     ade:	da ce       	rjmp	.-588    	; 0x894 <main+0x88>
				{
					serial_data[1] = receive_char();
     ae0:	f6 db       	rcall	.-2068   	; 0x2ce <receive_char>
     ae2:	8a 83       	std	Y+2, r24	; 0x02
					if(serial_data[1]=='0')
     ae4:	80 33       	cpi	r24, 0x30	; 48
     ae6:	11 f4       	brne	.+4      	; 0xaec <main+0x2e0>
					{
						send_char(read_sensor(SENSOR1));
     ae8:	86 e6       	ldi	r24, 0x66	; 102
     aea:	03 c0       	rjmp	.+6      	; 0xaf2 <main+0x2e6>
					}
					else if(serial_data[1]=='1')
     aec:	81 33       	cpi	r24, 0x31	; 49
     aee:	21 f4       	brne	.+8      	; 0xaf8 <main+0x2ec>
					{
						send_char(read_sensor(SENSOR2));
     af0:	85 e6       	ldi	r24, 0x65	; 101
     af2:	5a db       	rcall	.-2380   	; 0x1a8 <read_sensor>
     af4:	cc db       	rcall	.-2152   	; 0x28e <send_char>
     af6:	cb ce       	rjmp	.-618    	; 0x88e <main+0x82>
					}
					else if(serial_data[1]=='2')
     af8:	82 33       	cpi	r24, 0x32	; 50
     afa:	11 f4       	brne	.+4      	; 0xb00 <__stack+0x1>
					{
						send_char(read_sensor(SENSOR3));
     afc:	84 e6       	ldi	r24, 0x64	; 100
     afe:	f9 cf       	rjmp	.-14     	; 0xaf2 <main+0x2e6>
					}
					else if(serial_data[1]=='3')
     b00:	83 33       	cpi	r24, 0x33	; 51
     b02:	11 f4       	brne	.+4      	; 0xb08 <__stack+0x9>
					{
						send_char(read_sensor(SENSOR4));
     b04:	81 e6       	ldi	r24, 0x61	; 97
     b06:	f5 cf       	rjmp	.-22     	; 0xaf2 <main+0x2e6>
					}
					else if(serial_data[1]=='4')
     b08:	84 33       	cpi	r24, 0x34	; 52
     b0a:	09 f0       	breq	.+2      	; 0xb0e <__stack+0xf>
     b0c:	c0 ce       	rjmp	.-640    	; 0x88e <main+0x82>
     b0e:	61 c0       	rjmp	.+194    	; 0xbd2 <__stack+0xd3>
					exit_count = 0;
				}
				break;
				// Fast way to turn everything off
				case 'X':
				activity_state=1;
     b10:	80 92 31 01 	sts	0x0131, r8
     b14:	02 c0       	rjmp	.+4      	; 0xb1a <__stack+0x1b>
				sensor_broadcast_count = 0;
				exit_count = 0;
				break;
				// Fast way to turn everything off AND go to idle state
				case 'R':
				activity_state=0; // idle mode flag
     b16:	10 92 31 01 	sts	0x0131, r1
				turn_off_motors();
     b1a:	6e db       	rcall	.-2340   	; 0x1f8 <turn_off_motors>
				turn_off_leds();
     b1c:	e3 dd       	rcall	.-1082   	; 0x6e4 <turn_off_leds>
				disable_servos();
     b1e:	91 db       	rcall	.-2270   	; 0x242 <disable_servos>
				disable_vibration_motors();
     b20:	2a dc       	rcall	.-1964   	; 0x376 <disable_vibration_motors>
     b22:	6d c0       	rjmp	.+218    	; 0xbfe <__stack+0xff>
				sensor_broadcast = 0;
				sensor_broadcast_count = 0;
				exit_count = 0;
				break;
				case 'G':
				activity_state=1;
     b24:	80 92 31 01 	sts	0x0131, r8
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__stack+0x33>
     b2a:	c2 01       	movw	r24, r4
     b2c:	01 97       	sbiw	r24, 0x01	; 1
     b2e:	f1 f7       	brne	.-4      	; 0xb2c <__stack+0x2d>
				while(!received_data_available() && timeout < 250) {
					_delay_ms(2);
					timeout++;
     b30:	93 94       	inc	r9
				sensor_broadcast_count = 0;
				exit_count = 0;
				break;
				case 'G':
				activity_state=1;
				while(!received_data_available() && timeout < 250) {
     b32:	b5 db       	rcall	.-2198   	; 0x29e <received_data_available>
     b34:	88 23       	and	r24, r24
     b36:	21 f4       	brne	.+8      	; 0xb40 <__stack+0x41>
     b38:	f9 ef       	ldi	r31, 0xF9	; 249
     b3a:	f9 15       	cp	r31, r9
     b3c:	b0 f7       	brcc	.-20     	; 0xb2a <__stack+0x2b>
     b3e:	aa ce       	rjmp	.-684    	; 0x894 <main+0x88>
					_delay_ms(2);
					timeout++;
				}
				// If you didn't timeout, provide the requested data
				if(timeout < 250)
     b40:	89 ef       	ldi	r24, 0xF9	; 249
     b42:	89 15       	cp	r24, r9
     b44:	08 f4       	brcc	.+2      	; 0xb48 <__stack+0x49>
     b46:	a6 ce       	rjmp	.-692    	; 0x894 <main+0x88>
				{
					serial_data[1] = receive_char();
     b48:	c2 db       	rcall	.-2172   	; 0x2ce <receive_char>
     b4a:	8a 83       	std	Y+2, r24	; 0x02
					if(serial_data[1] == '0') {
     b4c:	80 33       	cpi	r24, 0x30	; 48
     b4e:	59 f4       	brne	.+22     	; 0xb66 <__stack+0x67>
     b50:	05 e2       	ldi	r16, 0x25	; 37
     b52:	11 e0       	ldi	r17, 0x01	; 1
						for(int i = 0; i < 7; i++) {
							send_char(led_values_temp[i]);
     b54:	f8 01       	movw	r30, r16
     b56:	81 91       	ld	r24, Z+
     b58:	8f 01       	movw	r16, r30
     b5a:	99 db       	rcall	.-2254   	; 0x28e <send_char>
				// If you didn't timeout, provide the requested data
				if(timeout < 250)
				{
					serial_data[1] = receive_char();
					if(serial_data[1] == '0') {
						for(int i = 0; i < 7; i++) {
     b5c:	f1 e0       	ldi	r31, 0x01	; 1
     b5e:	0c 32       	cpi	r16, 0x2C	; 44
     b60:	1f 07       	cpc	r17, r31
     b62:	c1 f7       	brne	.-16     	; 0xb54 <__stack+0x55>
     b64:	94 ce       	rjmp	.-728    	; 0x88e <main+0x82>
							send_char(led_values_temp[i]);
						}
					}
					else if(serial_data[1] == '1') {
     b66:	81 33       	cpi	r24, 0x31	; 49
     b68:	a1 f4       	brne	.+40     	; 0xb92 <__stack+0x93>
						for(int i = 7; i < 10; i++) {
							send_char(led_values_temp[i]);
     b6a:	80 91 2c 01 	lds	r24, 0x012C
     b6e:	8f db       	rcall	.-2274   	; 0x28e <send_char>
     b70:	80 91 2d 01 	lds	r24, 0x012D
     b74:	8c db       	rcall	.-2280   	; 0x28e <send_char>
     b76:	80 91 2e 01 	lds	r24, 0x012E
     b7a:	89 db       	rcall	.-2286   	; 0x28e <send_char>
     b7c:	04 e1       	ldi	r16, 0x14	; 20
     b7e:	11 e0       	ldi	r17, 0x01	; 1
						}
						for(int i = 0; i < 4; i++) {
							send_char(servo_values_temp[i]);
     b80:	f8 01       	movw	r30, r16
     b82:	81 91       	ld	r24, Z+
     b84:	8f 01       	movw	r16, r30
     b86:	83 db       	rcall	.-2298   	; 0x28e <send_char>
					}
					else if(serial_data[1] == '1') {
						for(int i = 7; i < 10; i++) {
							send_char(led_values_temp[i]);
						}
						for(int i = 0; i < 4; i++) {
     b88:	f1 e0       	ldi	r31, 0x01	; 1
     b8a:	08 31       	cpi	r16, 0x18	; 24
     b8c:	1f 07       	cpc	r17, r31
     b8e:	c1 f7       	brne	.-16     	; 0xb80 <__stack+0x81>
     b90:	7e ce       	rjmp	.-772    	; 0x88e <main+0x82>
							send_char(servo_values_temp[i]);
						}
					}
					else if(serial_data[1] == '2') {
     b92:	82 33       	cpi	r24, 0x32	; 50
     b94:	81 f4       	brne	.+32     	; 0xbb6 <__stack+0xb7>
     b96:	00 e1       	ldi	r16, 0x10	; 16
     b98:	11 e0       	ldi	r17, 0x01	; 1
						for(int i = 0; i < 4; i++) {
							send_char(motor_vals[i]);
     b9a:	f8 01       	movw	r30, r16
     b9c:	81 91       	ld	r24, Z+
     b9e:	8f 01       	movw	r16, r30
     ba0:	76 db       	rcall	.-2324   	; 0x28e <send_char>
						for(int i = 0; i < 4; i++) {
							send_char(servo_values_temp[i]);
						}
					}
					else if(serial_data[1] == '2') {
						for(int i = 0; i < 4; i++) {
     ba2:	f1 e0       	ldi	r31, 0x01	; 1
     ba4:	04 31       	cpi	r16, 0x14	; 20
     ba6:	1f 07       	cpc	r17, r31
     ba8:	c1 f7       	brne	.-16     	; 0xb9a <__stack+0x9b>
							send_char(motor_vals[i]);
						}
						send_char(vbr_values_temp[0]);
     baa:	80 91 18 01 	lds	r24, 0x0118
     bae:	6f db       	rcall	.-2338   	; 0x28e <send_char>
						send_char(vbr_values_temp[1]);
     bb0:	80 91 19 01 	lds	r24, 0x0119
     bb4:	9f cf       	rjmp	.-194    	; 0xaf4 <main+0x2e8>
					}
					else if(serial_data[1] == '3') {
     bb6:	83 33       	cpi	r24, 0x33	; 51
     bb8:	71 f4       	brne	.+28     	; 0xbd6 <__stack+0xd7>
						send_char(read_sensor(SENSOR1));
     bba:	86 e6       	ldi	r24, 0x66	; 102
     bbc:	f5 da       	rcall	.-2582   	; 0x1a8 <read_sensor>
     bbe:	67 db       	rcall	.-2354   	; 0x28e <send_char>
						send_char(read_sensor(SENSOR2));
     bc0:	85 e6       	ldi	r24, 0x65	; 101
     bc2:	f2 da       	rcall	.-2588   	; 0x1a8 <read_sensor>
     bc4:	64 db       	rcall	.-2360   	; 0x28e <send_char>
						send_char(read_sensor(SENSOR3));
     bc6:	84 e6       	ldi	r24, 0x64	; 100
     bc8:	ef da       	rcall	.-2594   	; 0x1a8 <read_sensor>
     bca:	61 db       	rcall	.-2366   	; 0x28e <send_char>
						send_char(read_sensor(SENSOR4));
     bcc:	81 e6       	ldi	r24, 0x61	; 97
     bce:	ec da       	rcall	.-2600   	; 0x1a8 <read_sensor>
     bd0:	5e db       	rcall	.-2372   	; 0x28e <send_char>
						send_char(read_sensor(EXT_PWR));
     bd2:	80 e6       	ldi	r24, 0x60	; 96
     bd4:	8e cf       	rjmp	.-228    	; 0xaf2 <main+0x2e6>

					}
					// Returns hardware/firmware version
					else if(serial_data[1] == '4') {
     bd6:	84 33       	cpi	r24, 0x34	; 52
     bd8:	51 f4       	brne	.+20     	; 0xbee <__stack+0xef>
						// hardware version
						send_char(0x03);
     bda:	83 e0       	ldi	r24, 0x03	; 3
     bdc:	58 db       	rcall	.-2384   	; 0x28e <send_char>
						send_char(0x00);
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	56 db       	rcall	.-2388   	; 0x28e <send_char>
						// firmware version
						send_char(MAJOR_FIRMWARE_VERSION);
     be2:	82 e0       	ldi	r24, 0x02	; 2
     be4:	54 db       	rcall	.-2392   	; 0x28e <send_char>
						send_char(MINOR_FIRMWARE_VERSION);
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	52 db       	rcall	.-2396   	; 0x28e <send_char>
						send_char(MINOR_FIRMWARE_VERSION2);
     bea:	89 e6       	ldi	r24, 0x69	; 105
     bec:	83 cf       	rjmp	.-250    	; 0xaf4 <main+0x2e8>
						}
					// Turns sensor broadcasting on
					else if(serial_data[1] == '5') {
     bee:	85 33       	cpi	r24, 0x35	; 53
     bf0:	19 f4       	brne	.+6      	; 0xbf8 <__stack+0xf9>
						sensor_broadcast = 1;
     bf2:	80 92 34 01 	sts	0x0134, r8
     bf6:	4b ce       	rjmp	.-874    	; 0x88e <main+0x82>
						}
					// Turns sensor broadcasting off
					else if(serial_data[1] == '6') {
     bf8:	86 33       	cpi	r24, 0x36	; 54
     bfa:	09 f0       	breq	.+2      	; 0xbfe <__stack+0xff>
     bfc:	48 ce       	rjmp	.-880    	; 0x88e <main+0x82>
						sensor_broadcast = 0;
     bfe:	10 92 34 01 	sts	0x0134, r1
						sensor_broadcast_count = 0;
     c02:	10 92 35 01 	sts	0x0135, r1
     c06:	43 ce       	rjmp	.-890    	; 0x88e <main+0x82>
						exit_count = 0;
				}
				break;
				// Returns an incrementing counter - used to measure cycle time and as a keep-alive.
				case 'z':
					activity_state=1;
     c08:	80 92 31 01 	sts	0x0131, r8
					send_char(count);
     c0c:	86 2d       	mov	r24, r6
     c0e:	3f db       	rcall	.-2434   	; 0x28e <send_char>
					count++;
     c10:	08 94       	sec
     c12:	61 1c       	adc	r6, r1
     c14:	71 1c       	adc	r7, r1
					if(count > 255) {
     c16:	8f ef       	ldi	r24, 0xFF	; 255
     c18:	68 16       	cp	r6, r24
     c1a:	71 04       	cpc	r7, r1
     c1c:	09 f0       	breq	.+2      	; 0xc20 <__stack+0x121>
     c1e:	0c f4       	brge	.+2      	; 0xc22 <__stack+0x123>
     c20:	36 ce       	rjmp	.-916    	; 0x88e <main+0x82>
     c22:	66 24       	eor	r6, r6
     c24:	77 24       	eor	r7, r7
     c26:	33 ce       	rjmp	.-922    	; 0x88e <main+0x82>
		}
		else
		{
			usb_data = 1;
		// HID Reports are 8 bytes long. The first byte specifies the function of that report (set motors, get light sensor values, etc).
			switch(HIDReportEcho.ReportData[0]) {
     c28:	80 91 41 02 	lds	r24, 0x0241
     c2c:	82 35       	cpi	r24, 0x52	; 82
     c2e:	09 f4       	brne	.+2      	; 0xc32 <__stack+0x133>
     c30:	66 c0       	rjmp	.+204    	; 0xcfe <__stack+0x1ff>
     c32:	83 35       	cpi	r24, 0x53	; 83
     c34:	70 f4       	brcc	.+28     	; 0xc52 <__stack+0x153>
     c36:	8c 34       	cpi	r24, 0x4C	; 76
     c38:	51 f1       	breq	.+84     	; 0xc8e <__stack+0x18f>
     c3a:	8d 34       	cpi	r24, 0x4D	; 77
     c3c:	20 f4       	brcc	.+8      	; 0xc46 <__stack+0x147>
     c3e:	87 34       	cpi	r24, 0x47	; 71
     c40:	09 f0       	breq	.+2      	; 0xc44 <__stack+0x145>
     c42:	2f ce       	rjmp	.-930    	; 0x8a2 <main+0x96>
     c44:	61 c0       	rjmp	.+194    	; 0xd08 <__stack+0x209>
     c46:	8d 34       	cpi	r24, 0x4D	; 77
     c48:	49 f1       	breq	.+82     	; 0xc9c <__stack+0x19d>
     c4a:	8f 34       	cpi	r24, 0x4F	; 79
     c4c:	09 f0       	breq	.+2      	; 0xc50 <__stack+0x151>
     c4e:	29 ce       	rjmp	.-942    	; 0x8a2 <main+0x96>
     c50:	11 c0       	rjmp	.+34     	; 0xc74 <__stack+0x175>
     c52:	88 35       	cpi	r24, 0x58	; 88
     c54:	09 f4       	brne	.+2      	; 0xc58 <__stack+0x159>
     c56:	53 c0       	rjmp	.+166    	; 0xcfe <__stack+0x1ff>
     c58:	89 35       	cpi	r24, 0x59	; 89
     c5a:	30 f4       	brcc	.+12     	; 0xc68 <__stack+0x169>
     c5c:	83 35       	cpi	r24, 0x53	; 83
     c5e:	71 f1       	breq	.+92     	; 0xcbc <__stack+0x1bd>
     c60:	86 35       	cpi	r24, 0x56	; 86
     c62:	09 f0       	breq	.+2      	; 0xc66 <__stack+0x167>
     c64:	1e ce       	rjmp	.-964    	; 0x8a2 <main+0x96>
     c66:	24 c0       	rjmp	.+72     	; 0xcb0 <__stack+0x1b1>
     c68:	83 37       	cpi	r24, 0x73	; 115
     c6a:	79 f1       	breq	.+94     	; 0xcca <__stack+0x1cb>
     c6c:	8a 37       	cpi	r24, 0x7A	; 122
     c6e:	09 f0       	breq	.+2      	; 0xc72 <__stack+0x173>
     c70:	18 ce       	rjmp	.-976    	; 0x8a2 <main+0x96>
     c72:	b4 c0       	rjmp	.+360    	; 0xddc <__stack+0x2dd>
				// If O, set an RGB LED using bytes 1-4 of the HID report
				case 'O':
					set_orb(HIDReportEcho.ReportData[1], HIDReportEcho.ReportData[2], HIDReportEcho.ReportData[3], HIDReportEcho.ReportData[4]);
     c74:	60 91 43 02 	lds	r22, 0x0243
     c78:	40 91 44 02 	lds	r20, 0x0244
     c7c:	20 91 45 02 	lds	r18, 0x0245
     c80:	80 91 42 02 	lds	r24, 0x0242
     c84:	70 e0       	ldi	r23, 0x00	; 0
     c86:	50 e0       	ldi	r21, 0x00	; 0
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	01 dd       	rcall	.-1534   	; 0x68e <set_orb>
     c8c:	b3 c0       	rjmp	.+358    	; 0xdf4 <__stack+0x2f5>
					break;
				// If 'L', set an LED's intensity with bytes 1-2 of the HID report
				case 'L':
					set_led(HIDReportEcho.ReportData[1], HIDReportEcho.ReportData[2]);
     c8e:	60 91 43 02 	lds	r22, 0x0243
     c92:	80 91 42 02 	lds	r24, 0x0242
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	10 dd       	rcall	.-1504   	; 0x6ba <set_led>
     c9a:	ac c0       	rjmp	.+344    	; 0xdf4 <__stack+0x2f5>
					break;
				// If 'M', use bytes 1-3 to set motor speed and direction
				case 'M':
					set_motor(HIDReportEcho.ReportData[1]-48, HIDReportEcho.ReportData[2]-48, HIDReportEcho.ReportData[3]);
     c9c:	80 91 42 02 	lds	r24, 0x0242
     ca0:	60 91 43 02 	lds	r22, 0x0243
     ca4:	60 53       	subi	r22, 0x30	; 48
     ca6:	80 53       	subi	r24, 0x30	; 48
     ca8:	40 91 44 02 	lds	r20, 0x0244
     cac:	a7 da       	rcall	.-2738   	; 0x1fc <set_motor>
     cae:	a2 c0       	rjmp	.+324    	; 0xdf4 <__stack+0x2f5>
					break;
				// If 'V', use bytes 1-2 to set vibration motor intensity
				case 'V':
					set_vibration_motor(HIDReportEcho.ReportData[1], HIDReportEcho.ReportData[2]);
     cb0:	80 91 42 02 	lds	r24, 0x0242
     cb4:	60 91 43 02 	lds	r22, 0x0243
     cb8:	4c db       	rcall	.-2408   	; 0x352 <set_vibration_motor>
     cba:	9c c0       	rjmp	.+312    	; 0xdf4 <__stack+0x2f5>
					break;
				// If 'S', use bytes 1-2 to set servo position
				case 'S':
					set_servo(HIDReportEcho.ReportData[1]-48, HIDReportEcho.ReportData[2]);
     cbc:	80 91 42 02 	lds	r24, 0x0242
     cc0:	80 53       	subi	r24, 0x30	; 48
     cc2:	60 91 43 02 	lds	r22, 0x0243
     cc6:	bf da       	rcall	.-2690   	; 0x246 <set_servo>
     cc8:	95 c0       	rjmp	.+298    	; 0xdf4 <__stack+0x2f5>
					break;
				// If 's', return sensor values of the selected sensor port
				case 's':
					if(HIDReportEcho.ReportData[1]=='0')
     cca:	80 91 42 02 	lds	r24, 0x0242
     cce:	80 33       	cpi	r24, 0x30	; 48
     cd0:	11 f4       	brne	.+4      	; 0xcd6 <__stack+0x1d7>
					{
						OutGoingReport.ReportData[0] = read_sensor(SENSOR1);
     cd2:	86 e6       	ldi	r24, 0x66	; 102
     cd4:	10 c0       	rjmp	.+32     	; 0xcf6 <__stack+0x1f7>
					}
					else if(HIDReportEcho.ReportData[1]=='1')
     cd6:	81 33       	cpi	r24, 0x31	; 49
     cd8:	11 f4       	brne	.+4      	; 0xcde <__stack+0x1df>
					{
						OutGoingReport.ReportData[0] = read_sensor(SENSOR2);
     cda:	85 e6       	ldi	r24, 0x65	; 101
     cdc:	0c c0       	rjmp	.+24     	; 0xcf6 <__stack+0x1f7>
					}
					else if(HIDReportEcho.ReportData[1]=='2')
     cde:	82 33       	cpi	r24, 0x32	; 50
     ce0:	11 f4       	brne	.+4      	; 0xce6 <__stack+0x1e7>
					{
						OutGoingReport.ReportData[0] = read_sensor(SENSOR3);
     ce2:	84 e6       	ldi	r24, 0x64	; 100
     ce4:	08 c0       	rjmp	.+16     	; 0xcf6 <__stack+0x1f7>
					}
					else if(HIDReportEcho.ReportData[1]=='3')
     ce6:	83 33       	cpi	r24, 0x33	; 51
     ce8:	11 f4       	brne	.+4      	; 0xcee <__stack+0x1ef>
					{
						OutGoingReport.ReportData[0] = read_sensor(SENSOR4);
     cea:	81 e6       	ldi	r24, 0x61	; 97
     cec:	04 c0       	rjmp	.+8      	; 0xcf6 <__stack+0x1f7>
					}
					else if(HIDReportEcho.ReportData[1]=='4')
     cee:	84 33       	cpi	r24, 0x34	; 52
     cf0:	09 f0       	breq	.+2      	; 0xcf4 <__stack+0x1f5>
     cf2:	80 c0       	rjmp	.+256    	; 0xdf4 <__stack+0x2f5>
					{
						OutGoingReport.ReportData[0] = read_sensor(EXT_PWR);
     cf4:	80 e6       	ldi	r24, 0x60	; 96
     cf6:	58 da       	rcall	.-2896   	; 0x1a8 <read_sensor>
     cf8:	80 93 4c 02 	sts	0x024C, r24
     cfc:	7b c0       	rjmp	.+246    	; 0xdf4 <__stack+0x2f5>
					disable_servos();
					disable_vibration_motors();
					break;
				// Fast way to turn everything off AND go to idle state
				case 'R':
					turn_off_motors();
     cfe:	7c da       	rcall	.-2824   	; 0x1f8 <turn_off_motors>
					turn_off_leds();
     d00:	f1 dc       	rcall	.-1566   	; 0x6e4 <turn_off_leds>
					disable_servos();
     d02:	9f da       	rcall	.-2754   	; 0x242 <disable_servos>
					disable_vibration_motors();
     d04:	38 db       	rcall	.-2448   	; 0x376 <disable_vibration_motors>
     d06:	76 c0       	rjmp	.+236    	; 0xdf4 <__stack+0x2f5>
					// Turn off everything
					break;
				case 'G':
					if(HIDReportEcho.ReportData[1] == '0') {
     d08:	80 91 42 02 	lds	r24, 0x0242
     d0c:	80 33       	cpi	r24, 0x30	; 48
     d0e:	59 f4       	brne	.+22     	; 0xd26 <__stack+0x227>
     d10:	e5 e2       	ldi	r30, 0x25	; 37
     d12:	f1 e0       	ldi	r31, 0x01	; 1
     d14:	ac e4       	ldi	r26, 0x4C	; 76
     d16:	b2 e0       	ldi	r27, 0x02	; 2
						for(int i = 0; i < 7; i++) {
							OutGoingReport.ReportData[i] = led_values_temp[i];
     d18:	81 91       	ld	r24, Z+
     d1a:	8d 93       	st	X+, r24
					disable_vibration_motors();
					// Turn off everything
					break;
				case 'G':
					if(HIDReportEcho.ReportData[1] == '0') {
						for(int i = 0; i < 7; i++) {
     d1c:	91 e0       	ldi	r25, 0x01	; 1
     d1e:	ec 32       	cpi	r30, 0x2C	; 44
     d20:	f9 07       	cpc	r31, r25
     d22:	d1 f7       	brne	.-12     	; 0xd18 <__stack+0x219>
     d24:	67 c0       	rjmp	.+206    	; 0xdf4 <__stack+0x2f5>
							OutGoingReport.ReportData[i] = led_values_temp[i];
						}
					}
					else if(HIDReportEcho.ReportData[1] == '1') {
     d26:	81 33       	cpi	r24, 0x31	; 49
     d28:	b9 f4       	brne	.+46     	; 0xd58 <__stack+0x259>
						for(int i = 7; i < 10; i++) {
							OutGoingReport.ReportData[i-7] = led_values_temp[i];
     d2a:	80 91 2c 01 	lds	r24, 0x012C
     d2e:	80 93 4c 02 	sts	0x024C, r24
     d32:	80 91 2d 01 	lds	r24, 0x012D
     d36:	80 93 4d 02 	sts	0x024D, r24
     d3a:	80 91 2e 01 	lds	r24, 0x012E
     d3e:	80 93 4e 02 	sts	0x024E, r24
     d42:	e4 e1       	ldi	r30, 0x14	; 20
     d44:	f1 e0       	ldi	r31, 0x01	; 1
     d46:	af e4       	ldi	r26, 0x4F	; 79
     d48:	b2 e0       	ldi	r27, 0x02	; 2
						}
						for(int i = 0; i < 4; i++) {
							OutGoingReport.ReportData[i+3] = servo_values_temp[i];
     d4a:	81 91       	ld	r24, Z+
     d4c:	8d 93       	st	X+, r24
					}
					else if(HIDReportEcho.ReportData[1] == '1') {
						for(int i = 7; i < 10; i++) {
							OutGoingReport.ReportData[i-7] = led_values_temp[i];
						}
						for(int i = 0; i < 4; i++) {
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	e8 31       	cpi	r30, 0x18	; 24
     d52:	f8 07       	cpc	r31, r24
     d54:	d1 f7       	brne	.-12     	; 0xd4a <__stack+0x24b>
     d56:	4e c0       	rjmp	.+156    	; 0xdf4 <__stack+0x2f5>
							OutGoingReport.ReportData[i+3] = servo_values_temp[i];
						}
					}
					else if(HIDReportEcho.ReportData[1] == '2') {
     d58:	82 33       	cpi	r24, 0x32	; 50
     d5a:	c9 f4       	brne	.+50     	; 0xd8e <__stack+0x28f>
						for(int i = 0; i < 4; i++) {
							OutGoingReport.ReportData[i] = motor_vals[i];
     d5c:	80 91 10 01 	lds	r24, 0x0110
     d60:	80 93 4c 02 	sts	0x024C, r24
     d64:	80 91 11 01 	lds	r24, 0x0111
     d68:	80 93 4d 02 	sts	0x024D, r24
     d6c:	80 91 12 01 	lds	r24, 0x0112
     d70:	80 93 4e 02 	sts	0x024E, r24
     d74:	80 91 13 01 	lds	r24, 0x0113
     d78:	80 93 4f 02 	sts	0x024F, r24
						}
						OutGoingReport.ReportData[4] = vbr_values_temp[0];
     d7c:	80 91 18 01 	lds	r24, 0x0118
     d80:	80 93 50 02 	sts	0x0250, r24
						OutGoingReport.ReportData[5] = vbr_values_temp[1];
     d84:	80 91 19 01 	lds	r24, 0x0119
     d88:	80 93 51 02 	sts	0x0251, r24
     d8c:	33 c0       	rjmp	.+102    	; 0xdf4 <__stack+0x2f5>
					}
					else if(HIDReportEcho.ReportData[1] == '3') {
     d8e:	83 33       	cpi	r24, 0x33	; 51
     d90:	a9 f4       	brne	.+42     	; 0xdbc <__stack+0x2bd>
						OutGoingReport.ReportData[0] = read_sensor(SENSOR1);
     d92:	86 e6       	ldi	r24, 0x66	; 102
     d94:	09 da       	rcall	.-3054   	; 0x1a8 <read_sensor>
     d96:	80 93 4c 02 	sts	0x024C, r24
						OutGoingReport.ReportData[1] = read_sensor(SENSOR2);
     d9a:	85 e6       	ldi	r24, 0x65	; 101
     d9c:	05 da       	rcall	.-3062   	; 0x1a8 <read_sensor>
     d9e:	80 93 4d 02 	sts	0x024D, r24
						OutGoingReport.ReportData[2] = read_sensor(SENSOR3);
     da2:	84 e6       	ldi	r24, 0x64	; 100
     da4:	01 da       	rcall	.-3070   	; 0x1a8 <read_sensor>
     da6:	80 93 4e 02 	sts	0x024E, r24
						OutGoingReport.ReportData[3] = read_sensor(SENSOR4);
     daa:	81 e6       	ldi	r24, 0x61	; 97
     dac:	fd d9       	rcall	.-3078   	; 0x1a8 <read_sensor>
     dae:	80 93 4f 02 	sts	0x024F, r24
						OutGoingReport.ReportData[4] = read_sensor(EXT_PWR);
     db2:	80 e6       	ldi	r24, 0x60	; 96
     db4:	f9 d9       	rcall	.-3086   	; 0x1a8 <read_sensor>
     db6:	80 93 50 02 	sts	0x0250, r24
     dba:	1c c0       	rjmp	.+56     	; 0xdf4 <__stack+0x2f5>

					}
					// Returns hardware/firmware version
					else if(HIDReportEcho.ReportData[1] == '4') {
     dbc:	84 33       	cpi	r24, 0x34	; 52
     dbe:	d1 f4       	brne	.+52     	; 0xdf4 <__stack+0x2f5>
						// hardware version
						OutGoingReport.ReportData[0] = 3;
     dc0:	93 e0       	ldi	r25, 0x03	; 3
     dc2:	90 93 4c 02 	sts	0x024C, r25
						OutGoingReport.ReportData[1] = 0;
     dc6:	10 92 4d 02 	sts	0x024D, r1
						// firmware version
						OutGoingReport.ReportData[2] = MAJOR_FIRMWARE_VERSION;
     dca:	e2 e0       	ldi	r30, 0x02	; 2
     dcc:	e0 93 4e 02 	sts	0x024E, r30
						OutGoingReport.ReportData[3] = MINOR_FIRMWARE_VERSION;
     dd0:	80 92 4f 02 	sts	0x024F, r8
						OutGoingReport.ReportData[4] = MINOR_FIRMWARE_VERSION2;
     dd4:	f9 e6       	ldi	r31, 0x69	; 105
     dd6:	f0 93 50 02 	sts	0x0250, r31
     dda:	0c c0       	rjmp	.+24     	; 0xdf4 <__stack+0x2f5>

					}
					break;
				// Returns an incrementing counter - used to measure cycle time and as a keep-alive.
				case 'z':
					OutGoingReport.ReportData[0] = count;
     ddc:	60 92 4c 02 	sts	0x024C, r6
					count++;
     de0:	08 94       	sec
     de2:	61 1c       	adc	r6, r1
     de4:	71 1c       	adc	r7, r1
					if(count > 255) {
     de6:	8f ef       	ldi	r24, 0xFF	; 255
     de8:	68 16       	cp	r6, r24
     dea:	71 04       	cpc	r7, r1
     dec:	19 f0       	breq	.+6      	; 0xdf4 <__stack+0x2f5>
     dee:	14 f0       	brlt	.+4      	; 0xdf4 <__stack+0x2f5>
     df0:	66 24       	eor	r6, r6
     df2:	77 24       	eor	r7, r7
					break;
			}
			// Only if there was valid data, set the last byte of the outgoing report, and reset the exit_count, max_count things
			if(usb_data == 1) {
				// Reset idle mode
				if(HIDReportEcho.ReportData[0] == 'R')
     df4:	80 91 41 02 	lds	r24, 0x0241
     df8:	82 35       	cpi	r24, 0x52	; 82
     dfa:	19 f4       	brne	.+6      	; 0xe02 <__stack+0x303>
				{
					activity_state = 0;
     dfc:	10 92 31 01 	sts	0x0131, r1
     e00:	02 c0       	rjmp	.+4      	; 0xe06 <__stack+0x307>
					exit_count = max_count+5;
				}
				else
					activity_state = 1;
     e02:	80 92 31 01 	sts	0x0131, r8
				HIDReportEcho.ReportData[0] = 0x00;
     e06:	10 92 41 02 	sts	0x0241, r1
				// Sets last byte of outgoing report to last byte of incoming report so an outgoing report can be matched to its incoming request
				OutGoingReport.ReportData[7]= HIDReportEcho.ReportData[7];
     e0a:	80 91 48 02 	lds	r24, 0x0248
     e0e:	80 93 53 02 	sts	0x0253, r24
     e12:	aa 24       	eor	r10, r10
     e14:	bb 24       	eor	r11, r11
     e16:	65 01       	movw	r12, r10
     e18:	90 e2       	ldi	r25, 0x20	; 32
     e1a:	e9 2e       	mov	r14, r25
     e1c:	91 ea       	ldi	r25, 0xA1	; 161
     e1e:	f9 2e       	mov	r15, r25
     e20:	97 e0       	ldi	r25, 0x07	; 7
     e22:	09 2f       	mov	r16, r25
     e24:	11 2d       	mov	r17, r1
     e26:	3d cd       	rjmp	.-1414   	; 0x8a2 <main+0x96>

00000e28 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
     e28:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     e2a:	93 30       	cpi	r25, 0x03	; 3
     e2c:	b1 f0       	breq	.+44     	; 0xe5a <CALLBACK_USB_GetDescriptor+0x32>
     e2e:	94 30       	cpi	r25, 0x04	; 4
     e30:	28 f4       	brcc	.+10     	; 0xe3c <CALLBACK_USB_GetDescriptor+0x14>
     e32:	91 30       	cpi	r25, 0x01	; 1
     e34:	41 f0       	breq	.+16     	; 0xe46 <CALLBACK_USB_GetDescriptor+0x1e>
     e36:	92 30       	cpi	r25, 0x02	; 2
     e38:	79 f5       	brne	.+94     	; 0xe98 <CALLBACK_USB_GetDescriptor+0x70>
     e3a:	0a c0       	rjmp	.+20     	; 0xe50 <CALLBACK_USB_GetDescriptor+0x28>
     e3c:	91 32       	cpi	r25, 0x21	; 33
     e3e:	11 f1       	breq	.+68     	; 0xe84 <CALLBACK_USB_GetDescriptor+0x5c>
     e40:	92 32       	cpi	r25, 0x22	; 34
     e42:	51 f5       	brne	.+84     	; 0xe98 <CALLBACK_USB_GetDescriptor+0x70>
     e44:	24 c0       	rjmp	.+72     	; 0xe8e <CALLBACK_USB_GetDescriptor+0x66>
     e46:	ec ec       	ldi	r30, 0xCC	; 204
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	22 e1       	ldi	r18, 0x12	; 18
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	28 c0       	rjmp	.+80     	; 0xea0 <CALLBACK_USB_GetDescriptor+0x78>
     e50:	ee ed       	ldi	r30, 0xDE	; 222
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	22 e2       	ldi	r18, 0x22	; 34
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	23 c0       	rjmp	.+70     	; 0xea0 <CALLBACK_USB_GetDescriptor+0x78>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     e5a:	81 30       	cpi	r24, 0x01	; 1
     e5c:	49 f0       	breq	.+18     	; 0xe70 <CALLBACK_USB_GetDescriptor+0x48>
     e5e:	81 30       	cpi	r24, 0x01	; 1
     e60:	18 f0       	brcs	.+6      	; 0xe68 <CALLBACK_USB_GetDescriptor+0x40>
     e62:	82 30       	cpi	r24, 0x02	; 2
     e64:	c9 f4       	brne	.+50     	; 0xe98 <CALLBACK_USB_GetDescriptor+0x70>
     e66:	0a c0       	rjmp	.+20     	; 0xe7c <CALLBACK_USB_GetDescriptor+0x54>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     e68:	e0 e0       	ldi	r30, 0x00	; 0
     e6a:	f1 e0       	ldi	r31, 0x01	; 1
     e6c:	84 91       	lpm	r24, Z+
     e6e:	03 c0       	rjmp	.+6      	; 0xe76 <CALLBACK_USB_GetDescriptor+0x4e>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     e70:	e4 e0       	ldi	r30, 0x04	; 4
     e72:	f1 e0       	ldi	r31, 0x01	; 1
     e74:	84 91       	lpm	r24, Z+
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	12 c0       	rjmp	.+36     	; 0xea0 <CALLBACK_USB_GetDescriptor+0x78>
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     e7c:	e4 e3       	ldi	r30, 0x34	; 52
     e7e:	f1 e0       	ldi	r31, 0x01	; 1
     e80:	84 91       	lpm	r24, Z+
     e82:	f9 cf       	rjmp	.-14     	; 0xe76 <CALLBACK_USB_GetDescriptor+0x4e>
     e84:	e0 ef       	ldi	r30, 0xF0	; 240
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	29 e0       	ldi	r18, 0x09	; 9
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	09 c0       	rjmp	.+18     	; 0xea0 <CALLBACK_USB_GetDescriptor+0x78>

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     e8e:	ec ea       	ldi	r30, 0xAC	; 172
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	20 e2       	ldi	r18, 0x20	; 32
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	04 c0       	rjmp	.+8      	; 0xea0 <CALLBACK_USB_GetDescriptor+0x78>
     e98:	e0 e0       	ldi	r30, 0x00	; 0
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	30 e0       	ldi	r19, 0x00	; 0
			Address = &GenericReport;
			Size    = sizeof(GenericReport);
			break;
	}

	*DescriptorAddress = Address;
     ea0:	ed 93       	st	X+, r30
     ea2:	fc 93       	st	X, r31
	return Size;
}
     ea4:	c9 01       	movw	r24, r18
     ea6:	08 95       	ret

00000ea8 <Endpoint_Write_Control_Stream_LE>:
     ea8:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     eaa:	40 91 61 03 	lds	r20, 0x0361
     eae:	50 91 62 03 	lds	r21, 0x0362
     eb2:	46 17       	cp	r20, r22
     eb4:	57 07       	cpc	r21, r23
     eb6:	18 f4       	brcc	.+6      	; 0xebe <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     eb8:	f9 01       	movw	r30, r18
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	45 c0       	rjmp	.+138    	; 0xf48 <Endpoint_Write_Control_Stream_LE+0xa0>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     ebe:	61 15       	cp	r22, r1
     ec0:	71 05       	cpc	r23, r1
     ec2:	11 f0       	breq	.+4      	; 0xec8 <Endpoint_Write_Control_Stream_LE+0x20>
     ec4:	ab 01       	movw	r20, r22
     ec6:	f8 cf       	rjmp	.-16     	; 0xeb8 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ec8:	80 91 e8 00 	lds	r24, 0x00E8
     ecc:	8e 77       	andi	r24, 0x7E	; 126
     ece:	80 93 e8 00 	sts	0x00E8, r24
     ed2:	40 e0       	ldi	r20, 0x00	; 0
     ed4:	50 e0       	ldi	r21, 0x00	; 0
     ed6:	f0 cf       	rjmp	.-32     	; 0xeb8 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     ed8:	80 91 5a 03 	lds	r24, 0x035A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     edc:	88 23       	and	r24, r24
     ede:	09 f4       	brne	.+2      	; 0xee2 <Endpoint_Write_Control_Stream_LE+0x3a>
     ee0:	45 c0       	rjmp	.+138    	; 0xf6c <Endpoint_Write_Control_Stream_LE+0xc4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     ee2:	85 30       	cpi	r24, 0x05	; 5
     ee4:	09 f4       	brne	.+2      	; 0xee8 <Endpoint_Write_Control_Stream_LE+0x40>
     ee6:	44 c0       	rjmp	.+136    	; 0xf70 <Endpoint_Write_Control_Stream_LE+0xc8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     ee8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     eec:	83 ff       	sbrs	r24, 3
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <Endpoint_Write_Control_Stream_LE+0x4c>
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     ef4:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     ef8:	82 fd       	sbrc	r24, 2
     efa:	32 c0       	rjmp	.+100    	; 0xf60 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     efc:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     f00:	80 ff       	sbrs	r24, 0
     f02:	22 c0       	rjmp	.+68     	; 0xf48 <Endpoint_Write_Control_Stream_LE+0xa0>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     f04:	80 91 f3 00 	lds	r24, 0x00F3
     f08:	90 91 f2 00 	lds	r25, 0x00F2
     f0c:	78 2f       	mov	r23, r24
     f0e:	60 e0       	ldi	r22, 0x00	; 0
     f10:	29 2f       	mov	r18, r25
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	26 2b       	or	r18, r22
     f16:	37 2b       	or	r19, r23
     f18:	07 c0       	rjmp	.+14     	; 0xf28 <Endpoint_Write_Control_Stream_LE+0x80>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     f1a:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     f1c:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     f20:	41 50       	subi	r20, 0x01	; 1
     f22:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     f24:	2f 5f       	subi	r18, 0xFF	; 255
     f26:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     f28:	41 15       	cp	r20, r1
     f2a:	51 05       	cpc	r21, r1
     f2c:	19 f0       	breq	.+6      	; 0xf34 <Endpoint_Write_Control_Stream_LE+0x8c>
     f2e:	28 30       	cpi	r18, 0x08	; 8
     f30:	31 05       	cpc	r19, r1
     f32:	98 f3       	brcs	.-26     	; 0xf1a <Endpoint_Write_Control_Stream_LE+0x72>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	28 30       	cpi	r18, 0x08	; 8
     f38:	31 05       	cpc	r19, r1
     f3a:	09 f4       	brne	.+2      	; 0xf3e <Endpoint_Write_Control_Stream_LE+0x96>
     f3c:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f3e:	80 91 e8 00 	lds	r24, 0x00E8
     f42:	8e 77       	andi	r24, 0x7E	; 126
     f44:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     f48:	41 15       	cp	r20, r1
     f4a:	51 05       	cpc	r21, r1
     f4c:	29 f6       	brne	.-118    	; 0xed8 <Endpoint_Write_Control_Stream_LE+0x30>
     f4e:	99 23       	and	r25, r25
     f50:	19 f6       	brne	.-122    	; 0xed8 <Endpoint_Write_Control_Stream_LE+0x30>
     f52:	06 c0       	rjmp	.+12     	; 0xf60 <Endpoint_Write_Control_Stream_LE+0xb8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     f54:	80 91 5a 03 	lds	r24, 0x035A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     f58:	88 23       	and	r24, r24
     f5a:	41 f0       	breq	.+16     	; 0xf6c <Endpoint_Write_Control_Stream_LE+0xc4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     f5c:	85 30       	cpi	r24, 0x05	; 5
     f5e:	41 f0       	breq	.+16     	; 0xf70 <Endpoint_Write_Control_Stream_LE+0xc8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     f60:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     f64:	82 ff       	sbrs	r24, 2
     f66:	f6 cf       	rjmp	.-20     	; 0xf54 <Endpoint_Write_Control_Stream_LE+0xac>
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	08 95       	ret
     f6c:	82 e0       	ldi	r24, 0x02	; 2
     f6e:	08 95       	ret
     f70:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     f72:	08 95       	ret

00000f74 <Endpoint_Read_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
     f74:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
     f76:	61 15       	cp	r22, r1
     f78:	71 05       	cpc	r23, r1
     f7a:	29 f4       	brne	.+10     	; 0xf86 <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f7c:	80 91 e8 00 	lds	r24, 0x00E8
     f80:	8b 77       	andi	r24, 0x7B	; 123
     f82:	80 93 e8 00 	sts	0x00E8, r24
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     f86:	f9 01       	movw	r30, r18
     f88:	27 c0       	rjmp	.+78     	; 0xfd8 <Endpoint_Read_Control_Stream_LE+0x64>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     f8a:	80 91 5a 03 	lds	r24, 0x035A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     f8e:	88 23       	and	r24, r24
     f90:	99 f1       	breq	.+102    	; 0xff8 <Endpoint_Read_Control_Stream_LE+0x84>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     f92:	85 30       	cpi	r24, 0x05	; 5
     f94:	99 f1       	breq	.+102    	; 0xffc <Endpoint_Read_Control_Stream_LE+0x88>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     f96:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     f9a:	83 ff       	sbrs	r24, 3
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <Endpoint_Read_Control_Stream_LE+0x2e>
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     fa2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
     fa6:	82 ff       	sbrs	r24, 2
     fa8:	f0 cf       	rjmp	.-32     	; 0xf8a <Endpoint_Read_Control_Stream_LE+0x16>
     faa:	06 c0       	rjmp	.+12     	; 0xfb8 <Endpoint_Read_Control_Stream_LE+0x44>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     fac:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     fb0:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     fb2:	61 50       	subi	r22, 0x01	; 1
     fb4:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
     fb6:	59 f0       	breq	.+22     	; 0xfce <Endpoint_Read_Control_Stream_LE+0x5a>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     fb8:	20 91 f3 00 	lds	r18, 0x00F3
     fbc:	80 91 f2 00 	lds	r24, 0x00F2
     fc0:	32 2f       	mov	r19, r18
     fc2:	20 e0       	ldi	r18, 0x00	; 0
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	82 2b       	or	r24, r18
     fc8:	93 2b       	or	r25, r19
     fca:	89 2b       	or	r24, r25
     fcc:	79 f7       	brne	.-34     	; 0xfac <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     fce:	80 91 e8 00 	lds	r24, 0x00E8
     fd2:	8b 77       	andi	r24, 0x7B	; 123
     fd4:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
     fd8:	61 15       	cp	r22, r1
     fda:	71 05       	cpc	r23, r1
     fdc:	b1 f6       	brne	.-84     	; 0xf8a <Endpoint_Read_Control_Stream_LE+0x16>
     fde:	06 c0       	rjmp	.+12     	; 0xfec <Endpoint_Read_Control_Stream_LE+0x78>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     fe0:	80 91 5a 03 	lds	r24, 0x035A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     fe4:	88 23       	and	r24, r24
     fe6:	41 f0       	breq	.+16     	; 0xff8 <Endpoint_Read_Control_Stream_LE+0x84>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     fe8:	85 30       	cpi	r24, 0x05	; 5
     fea:	41 f0       	breq	.+16     	; 0xffc <Endpoint_Read_Control_Stream_LE+0x88>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     fec:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
     ff0:	80 ff       	sbrs	r24, 0
     ff2:	f6 cf       	rjmp	.-20     	; 0xfe0 <Endpoint_Read_Control_Stream_LE+0x6c>
     ff4:	80 e0       	ldi	r24, 0x00	; 0
     ff6:	08 95       	ret
     ff8:	82 e0       	ldi	r24, 0x02	; 2
     ffa:	08 95       	ret
     ffc:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     ffe:	08 95       	ret

00001000 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    1000:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1002:	40 91 61 03 	lds	r20, 0x0361
    1006:	50 91 62 03 	lds	r21, 0x0362
    100a:	46 17       	cp	r20, r22
    100c:	57 07       	cpc	r21, r23
    100e:	18 f4       	brcc	.+6      	; 0x1016 <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1010:	f9 01       	movw	r30, r18
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	46 c0       	rjmp	.+140    	; 0x10a2 <Endpoint_Write_Control_PStream_LE+0xa2>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1016:	61 15       	cp	r22, r1
    1018:	71 05       	cpc	r23, r1
    101a:	11 f0       	breq	.+4      	; 0x1020 <Endpoint_Write_Control_PStream_LE+0x20>
    101c:	ab 01       	movw	r20, r22
    101e:	f8 cf       	rjmp	.-16     	; 0x1010 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1020:	80 91 e8 00 	lds	r24, 0x00E8
    1024:	8e 77       	andi	r24, 0x7E	; 126
    1026:	80 93 e8 00 	sts	0x00E8, r24
    102a:	40 e0       	ldi	r20, 0x00	; 0
    102c:	50 e0       	ldi	r21, 0x00	; 0
    102e:	f0 cf       	rjmp	.-32     	; 0x1010 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1030:	80 91 5a 03 	lds	r24, 0x035A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1034:	88 23       	and	r24, r24
    1036:	09 f4       	brne	.+2      	; 0x103a <Endpoint_Write_Control_PStream_LE+0x3a>
    1038:	47 c0       	rjmp	.+142    	; 0x10c8 <Endpoint_Write_Control_PStream_LE+0xc8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    103a:	85 30       	cpi	r24, 0x05	; 5
    103c:	09 f4       	brne	.+2      	; 0x1040 <Endpoint_Write_Control_PStream_LE+0x40>
    103e:	46 c0       	rjmp	.+140    	; 0x10cc <Endpoint_Write_Control_PStream_LE+0xcc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1040:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1044:	83 ff       	sbrs	r24, 3
    1046:	02 c0       	rjmp	.+4      	; 0x104c <Endpoint_Write_Control_PStream_LE+0x4c>
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    104c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1050:	82 fd       	sbrc	r24, 2
    1052:	34 c0       	rjmp	.+104    	; 0x10bc <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1054:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1058:	80 ff       	sbrs	r24, 0
    105a:	23 c0       	rjmp	.+70     	; 0x10a2 <Endpoint_Write_Control_PStream_LE+0xa2>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    105c:	80 91 f3 00 	lds	r24, 0x00F3
    1060:	90 91 f2 00 	lds	r25, 0x00F2
    1064:	78 2f       	mov	r23, r24
    1066:	60 e0       	ldi	r22, 0x00	; 0
    1068:	29 2f       	mov	r18, r25
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	26 2b       	or	r18, r22
    106e:	37 2b       	or	r19, r23
    1070:	08 c0       	rjmp	.+16     	; 0x1082 <Endpoint_Write_Control_PStream_LE+0x82>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1072:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1074:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1078:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    107a:	41 50       	subi	r20, 0x01	; 1
    107c:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    107e:	2f 5f       	subi	r18, 0xFF	; 255
    1080:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1082:	41 15       	cp	r20, r1
    1084:	51 05       	cpc	r21, r1
    1086:	19 f0       	breq	.+6      	; 0x108e <Endpoint_Write_Control_PStream_LE+0x8e>
    1088:	28 30       	cpi	r18, 0x08	; 8
    108a:	31 05       	cpc	r19, r1
    108c:	90 f3       	brcs	.-28     	; 0x1072 <Endpoint_Write_Control_PStream_LE+0x72>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	28 30       	cpi	r18, 0x08	; 8
    1092:	31 05       	cpc	r19, r1
    1094:	09 f4       	brne	.+2      	; 0x1098 <Endpoint_Write_Control_PStream_LE+0x98>
    1096:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1098:	80 91 e8 00 	lds	r24, 0x00E8
    109c:	8e 77       	andi	r24, 0x7E	; 126
    109e:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    10a2:	41 15       	cp	r20, r1
    10a4:	51 05       	cpc	r21, r1
    10a6:	21 f6       	brne	.-120    	; 0x1030 <Endpoint_Write_Control_PStream_LE+0x30>
    10a8:	99 23       	and	r25, r25
    10aa:	09 f0       	breq	.+2      	; 0x10ae <Endpoint_Write_Control_PStream_LE+0xae>
    10ac:	c1 cf       	rjmp	.-126    	; 0x1030 <Endpoint_Write_Control_PStream_LE+0x30>
    10ae:	06 c0       	rjmp	.+12     	; 0x10bc <Endpoint_Write_Control_PStream_LE+0xbc>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    10b0:	80 91 5a 03 	lds	r24, 0x035A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    10b4:	88 23       	and	r24, r24
    10b6:	41 f0       	breq	.+16     	; 0x10c8 <Endpoint_Write_Control_PStream_LE+0xc8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    10b8:	85 30       	cpi	r24, 0x05	; 5
    10ba:	41 f0       	breq	.+16     	; 0x10cc <Endpoint_Write_Control_PStream_LE+0xcc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    10bc:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    10c0:	82 ff       	sbrs	r24, 2
    10c2:	f6 cf       	rjmp	.-20     	; 0x10b0 <Endpoint_Write_Control_PStream_LE+0xb0>
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	08 95       	ret
    10c8:	82 e0       	ldi	r24, 0x02	; 2
    10ca:	08 95       	ret
    10cc:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    10ce:	08 95       	ret

000010d0 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    10d0:	bf 92       	push	r11
    10d2:	cf 92       	push	r12
    10d4:	df 92       	push	r13
    10d6:	ef 92       	push	r14
    10d8:	ff 92       	push	r15
    10da:	0f 93       	push	r16
    10dc:	1f 93       	push	r17
    10de:	cf 93       	push	r28
    10e0:	df 93       	push	r29
    10e2:	18 2f       	mov	r17, r24
    10e4:	09 2f       	mov	r16, r25
    10e6:	7b 01       	movw	r14, r22
    10e8:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    10ea:	d9 d0       	rcall	.+434    	; 0x129e <Endpoint_WaitUntilReady>
    10ec:	b8 2e       	mov	r11, r24
    10ee:	88 23       	and	r24, r24
    10f0:	b1 f5       	brne	.+108    	; 0x115e <Endpoint_Write_Stream_LE+0x8e>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    10f2:	81 2f       	mov	r24, r17
    10f4:	90 2f       	mov	r25, r16
    10f6:	9c 01       	movw	r18, r24
    10f8:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    10fa:	c1 14       	cp	r12, r1
    10fc:	d1 04       	cpc	r13, r1
    10fe:	39 f0       	breq	.+14     	; 0x110e <Endpoint_Write_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
    1100:	f6 01       	movw	r30, r12
    1102:	80 81       	ld	r24, Z
    1104:	91 81       	ldd	r25, Z+1	; 0x01
    1106:	e8 1a       	sub	r14, r24
    1108:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    110a:	c8 0f       	add	r28, r24
    110c:	d9 1f       	adc	r29, r25
    110e:	00 e0       	ldi	r16, 0x00	; 0
    1110:	10 e0       	ldi	r17, 0x00	; 0
    1112:	22 c0       	rjmp	.+68     	; 0x1158 <Endpoint_Write_Stream_LE+0x88>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1114:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1118:	85 fd       	sbrc	r24, 5
    111a:	16 c0       	rjmp	.+44     	; 0x1148 <Endpoint_Write_Stream_LE+0x78>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    111c:	80 91 e8 00 	lds	r24, 0x00E8
    1120:	8e 77       	andi	r24, 0x7E	; 126
    1122:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    1126:	7e d3       	rcall	.+1788   	; 0x1824 <USB_USBTask>
			#endif

			if (BytesProcessed != NULL)
    1128:	c1 14       	cp	r12, r1
    112a:	d1 04       	cpc	r13, r1
    112c:	49 f0       	breq	.+18     	; 0x1140 <Endpoint_Write_Stream_LE+0x70>
			{
				*BytesProcessed += BytesInTransfer;
    112e:	f6 01       	movw	r30, r12
    1130:	80 81       	ld	r24, Z
    1132:	91 81       	ldd	r25, Z+1	; 0x01
    1134:	80 0f       	add	r24, r16
    1136:	91 1f       	adc	r25, r17
    1138:	91 83       	std	Z+1, r25	; 0x01
    113a:	80 83       	st	Z, r24
    113c:	85 e0       	ldi	r24, 0x05	; 5
    113e:	10 c0       	rjmp	.+32     	; 0x1160 <Endpoint_Write_Stream_LE+0x90>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1140:	ae d0       	rcall	.+348    	; 0x129e <Endpoint_WaitUntilReady>
    1142:	88 23       	and	r24, r24
    1144:	49 f0       	breq	.+18     	; 0x1158 <Endpoint_Write_Stream_LE+0x88>
    1146:	0c c0       	rjmp	.+24     	; 0x1160 <Endpoint_Write_Stream_LE+0x90>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1148:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    114a:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    114e:	08 94       	sec
    1150:	e1 08       	sbc	r14, r1
    1152:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    1154:	0f 5f       	subi	r16, 0xFF	; 255
    1156:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1158:	e1 14       	cp	r14, r1
    115a:	f1 04       	cpc	r15, r1
    115c:	d9 f6       	brne	.-74     	; 0x1114 <Endpoint_Write_Stream_LE+0x44>
    115e:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    1160:	df 91       	pop	r29
    1162:	cf 91       	pop	r28
    1164:	1f 91       	pop	r17
    1166:	0f 91       	pop	r16
    1168:	ff 90       	pop	r15
    116a:	ef 90       	pop	r14
    116c:	df 90       	pop	r13
    116e:	cf 90       	pop	r12
    1170:	bf 90       	pop	r11
    1172:	08 95       	ret

00001174 <Endpoint_ConfigureEndpoint_Prv>:
}

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
    1174:	38 2f       	mov	r19, r24
    1176:	28 2f       	mov	r18, r24
    1178:	2e c0       	rjmp	.+92     	; 0x11d6 <Endpoint_ConfigureEndpoint_Prv+0x62>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    117a:	82 2f       	mov	r24, r18
    117c:	8f 70       	andi	r24, 0x0F	; 15
    117e:	80 93 e9 00 	sts	0x00E9, r24
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    1182:	23 17       	cp	r18, r19
    1184:	21 f4       	brne	.+8      	; 0x118e <Endpoint_ConfigureEndpoint_Prv+0x1a>
    1186:	76 2f       	mov	r23, r22
    1188:	94 2f       	mov	r25, r20
    118a:	50 e0       	ldi	r21, 0x00	; 0
    118c:	06 c0       	rjmp	.+12     	; 0x119a <Endpoint_ConfigureEndpoint_Prv+0x26>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    118e:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    1192:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
    1196:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    119a:	91 ff       	sbrs	r25, 1
    119c:	1b c0       	rjmp	.+54     	; 0x11d4 <Endpoint_ConfigureEndpoint_Prv+0x60>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    119e:	80 91 eb 00 	lds	r24, 0x00EB
    11a2:	8e 7f       	andi	r24, 0xFE	; 254
    11a4:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    11a8:	80 91 ed 00 	lds	r24, 0x00ED
    11ac:	8d 7f       	andi	r24, 0xFD	; 253
    11ae:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    11b2:	80 91 eb 00 	lds	r24, 0x00EB
    11b6:	81 60       	ori	r24, 0x01	; 1
    11b8:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    11bc:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    11c0:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
    11c4:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    11c8:	80 91 ee 00 	lds	r24, 0x00EE

		if (!(Endpoint_IsConfigured()))
    11cc:	87 fd       	sbrc	r24, 7
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <Endpoint_ConfigureEndpoint_Prv+0x60>
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    11d4:	2f 5f       	subi	r18, 0xFF	; 255
    11d6:	27 30       	cpi	r18, 0x07	; 7
    11d8:	80 f2       	brcs	.-96     	; 0x117a <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    11da:	3f 70       	andi	r19, 0x0F	; 15
    11dc:	30 93 e9 00 	sts	0x00E9, r19
    11e0:	81 e0       	ldi	r24, 0x01	; 1
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    11e2:	08 95       	ret

000011e4 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
    11e4:	0f 93       	push	r16
    11e6:	1f 93       	push	r17
    11e8:	cf 93       	push	r28
    11ea:	df 93       	push	r29
    11ec:	06 2f       	mov	r16, r22
    11ee:	ec 01       	movw	r28, r24
    11f0:	10 e0       	ldi	r17, 0x00	; 0
    11f2:	2a c0       	rjmp	.+84     	; 0x1248 <Endpoint_ConfigureEndpointTable+0x64>
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
    11f4:	98 81       	ld	r25, Y
    11f6:	99 23       	and	r25, r25
    11f8:	29 f1       	breq	.+74     	; 0x1244 <Endpoint_ConfigureEndpointTable+0x60>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    11fa:	6b 81       	ldd	r22, Y+3	; 0x03
    11fc:	e9 81       	ldd	r30, Y+1	; 0x01
    11fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1200:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
    1202:	89 2f       	mov	r24, r25
    1204:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
    1206:	87 30       	cpi	r24, 0x07	; 7
    1208:	18 f5       	brcc	.+70     	; 0x1250 <Endpoint_ConfigureEndpointTable+0x6c>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    120a:	22 30       	cpi	r18, 0x02	; 2
    120c:	10 f4       	brcc	.+4      	; 0x1212 <Endpoint_ConfigureEndpointTable+0x2e>
    120e:	52 e0       	ldi	r21, 0x02	; 2
    1210:	01 c0       	rjmp	.+2      	; 0x1214 <Endpoint_ConfigureEndpointTable+0x30>
    1212:	56 e0       	ldi	r21, 0x06	; 6
    1214:	40 e0       	ldi	r20, 0x00	; 0
    1216:	28 e0       	ldi	r18, 0x08	; 8
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	03 c0       	rjmp	.+6      	; 0x1222 <Endpoint_ConfigureEndpointTable+0x3e>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    121c:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    121e:	22 0f       	add	r18, r18
    1220:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    1222:	2e 17       	cp	r18, r30
    1224:	3f 07       	cpc	r19, r31
    1226:	d0 f3       	brcs	.-12     	; 0x121c <Endpoint_ConfigureEndpointTable+0x38>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1228:	62 95       	swap	r22
    122a:	66 0f       	add	r22, r22
    122c:	66 0f       	add	r22, r22
    122e:	60 7c       	andi	r22, 0xC0	; 192
    1230:	99 1f       	adc	r25, r25
    1232:	99 27       	eor	r25, r25
    1234:	99 1f       	adc	r25, r25
    1236:	69 2b       	or	r22, r25
    1238:	42 95       	swap	r20
    123a:	40 7f       	andi	r20, 0xF0	; 240
    123c:	45 2b       	or	r20, r21
    123e:	9a df       	rcall	.-204    	; 0x1174 <Endpoint_ConfigureEndpoint_Prv>
    1240:	88 23       	and	r24, r24
    1242:	31 f0       	breq	.+12     	; 0x1250 <Endpoint_ConfigureEndpointTable+0x6c>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    1244:	1f 5f       	subi	r17, 0xFF	; 255
    1246:	25 96       	adiw	r28, 0x05	; 5
    1248:	10 17       	cp	r17, r16
    124a:	a0 f2       	brcs	.-88     	; 0x11f4 <Endpoint_ConfigureEndpointTable+0x10>
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	01 c0       	rjmp	.+2      	; 0x1252 <Endpoint_ConfigureEndpointTable+0x6e>
    1250:	80 e0       	ldi	r24, 0x00	; 0
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
}
    1252:	df 91       	pop	r29
    1254:	cf 91       	pop	r28
    1256:	1f 91       	pop	r17
    1258:	0f 91       	pop	r16
    125a:	08 95       	ret

0000125c <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    125c:	80 91 5b 03 	lds	r24, 0x035B
    1260:	88 23       	and	r24, r24
    1262:	9c f4       	brge	.+38     	; 0x128a <Endpoint_ClearStatusStage+0x2e>
    1264:	04 c0       	rjmp	.+8      	; 0x126e <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1266:	80 91 5a 03 	lds	r24, 0x035A
    126a:	88 23       	and	r24, r24
    126c:	b9 f0       	breq	.+46     	; 0x129c <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    126e:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    1272:	82 ff       	sbrs	r24, 2
    1274:	f8 cf       	rjmp	.-16     	; 0x1266 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1276:	80 91 e8 00 	lds	r24, 0x00E8
    127a:	8b 77       	andi	r24, 0x7B	; 123
    127c:	80 93 e8 00 	sts	0x00E8, r24
    1280:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1282:	80 91 5a 03 	lds	r24, 0x035A
    1286:	88 23       	and	r24, r24
    1288:	49 f0       	breq	.+18     	; 0x129c <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    128a:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    128e:	80 ff       	sbrs	r24, 0
    1290:	f8 cf       	rjmp	.-16     	; 0x1282 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1292:	80 91 e8 00 	lds	r24, 0x00E8
    1296:	8e 77       	andi	r24, 0x7E	; 126
    1298:	80 93 e8 00 	sts	0x00E8, r24
    129c:	08 95       	ret

0000129e <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    129e:	40 91 e4 00 	lds	r20, 0x00E4
    12a2:	50 91 e5 00 	lds	r21, 0x00E5
    12a6:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    12a8:	80 91 ec 00 	lds	r24, 0x00EC
    12ac:	80 ff       	sbrs	r24, 0
    12ae:	24 c0       	rjmp	.+72     	; 0x12f8 <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    12b0:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    12b4:	80 fd       	sbrc	r24, 0
    12b6:	1e c0       	rjmp	.+60     	; 0x12f4 <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    12b8:	80 91 5a 03 	lds	r24, 0x035A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    12bc:	88 23       	and	r24, r24
    12be:	11 f4       	brne	.+4      	; 0x12c4 <Endpoint_WaitUntilReady+0x26>
    12c0:	82 e0       	ldi	r24, 0x02	; 2
    12c2:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    12c4:	85 30       	cpi	r24, 0x05	; 5
    12c6:	11 f4       	brne	.+4      	; 0x12cc <Endpoint_WaitUntilReady+0x2e>
    12c8:	83 e0       	ldi	r24, 0x03	; 3
    12ca:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    12cc:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    12d0:	85 ff       	sbrs	r24, 5
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <Endpoint_WaitUntilReady+0x3a>
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	08 95       	ret
    12d8:	80 91 e4 00 	lds	r24, 0x00E4
    12dc:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    12e0:	84 17       	cp	r24, r20
    12e2:	95 07       	cpc	r25, r21
    12e4:	09 f3       	breq	.-62     	; 0x12a8 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    12e6:	22 23       	and	r18, r18
    12e8:	11 f4       	brne	.+4      	; 0x12ee <Endpoint_WaitUntilReady+0x50>
    12ea:	84 e0       	ldi	r24, 0x04	; 4
    12ec:	08 95       	ret
    12ee:	21 50       	subi	r18, 0x01	; 1
    12f0:	ac 01       	movw	r20, r24
    12f2:	da cf       	rjmp	.-76     	; 0x12a8 <Endpoint_WaitUntilReady+0xa>
    12f4:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    12f6:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    12f8:	80 91 e8 00 	lds	r24, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    12fc:	82 ff       	sbrs	r24, 2
    12fe:	dc cf       	rjmp	.-72     	; 0x12b8 <Endpoint_WaitUntilReady+0x1a>
    1300:	f9 cf       	rjmp	.-14     	; 0x12f4 <Endpoint_WaitUntilReady+0x56>

00001302 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
    1302:	ef 92       	push	r14
    1304:	ff 92       	push	r15
    1306:	0f 93       	push	r16
    1308:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    130a:	4f d0       	rcall	.+158    	; 0x13aa <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    130c:	56 d0       	rcall	.+172    	; 0x13ba <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    130e:	08 ed       	ldi	r16, 0xD8	; 216
    1310:	10 e0       	ldi	r17, 0x00	; 0
    1312:	f8 01       	movw	r30, r16
    1314:	80 81       	ld	r24, Z
    1316:	8f 77       	andi	r24, 0x7F	; 127
    1318:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
    131a:	80 81       	ld	r24, Z
    131c:	80 68       	ori	r24, 0x80	; 128
    131e:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1320:	80 81       	ld	r24, Z
    1322:	8f 7d       	andi	r24, 0xDF	; 223
    1324:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1326:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1328:	10 92 5a 03 	sts	0x035A, r1
	USB_Device_ConfigurationNumber  = 0;
    132c:	10 92 56 03 	sts	0x0356, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1330:	10 92 58 03 	sts	0x0358, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1334:	10 92 57 03 	sts	0x0357, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1338:	80 ee       	ldi	r24, 0xE0	; 224
    133a:	e8 2e       	mov	r14, r24
    133c:	f1 2c       	mov	r15, r1
    133e:	f7 01       	movw	r30, r14
    1340:	80 81       	ld	r24, Z
    1342:	8b 7f       	andi	r24, 0xFB	; 251
    1344:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1346:	f8 01       	movw	r30, r16
    1348:	80 81       	ld	r24, Z
    134a:	81 60       	ori	r24, 0x01	; 1
    134c:	80 83       	st	Z, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    134e:	80 e0       	ldi	r24, 0x00	; 0
    1350:	60 e0       	ldi	r22, 0x00	; 0
    1352:	42 e0       	ldi	r20, 0x02	; 2
    1354:	0f df       	rcall	.-482    	; 0x1174 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1356:	e1 ee       	ldi	r30, 0xE1	; 225
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	8e 7f       	andi	r24, 0xFE	; 254
    135e:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1360:	e2 ee       	ldi	r30, 0xE2	; 226
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	81 60       	ori	r24, 0x01	; 1
    1368:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    136a:	80 81       	ld	r24, Z
    136c:	88 60       	ori	r24, 0x08	; 8
    136e:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1370:	f7 01       	movw	r30, r14
    1372:	80 81       	ld	r24, Z
    1374:	8e 7f       	andi	r24, 0xFE	; 254
    1376:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1378:	f8 01       	movw	r30, r16
    137a:	80 81       	ld	r24, Z
    137c:	80 61       	ori	r24, 0x10	; 16
    137e:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1380:	1f 91       	pop	r17
    1382:	0f 91       	pop	r16
    1384:	ff 90       	pop	r15
    1386:	ef 90       	pop	r14
    1388:	08 95       	ret

0000138a <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    138a:	e8 ed       	ldi	r30, 0xD8	; 216
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	8f 7e       	andi	r24, 0xEF	; 239
    1392:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1394:	e7 ed       	ldi	r30, 0xD7	; 215
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	81 60       	ori	r24, 0x01	; 1
    139c:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    139e:	84 e0       	ldi	r24, 0x04	; 4
    13a0:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	80 93 59 03 	sts	0x0359, r24

	USB_ResetInterface();
}
    13a8:	ac cf       	rjmp	.-168    	; 0x1302 <USB_ResetInterface>

000013aa <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    13aa:	e8 ed       	ldi	r30, 0xD8	; 216
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	8e 7f       	andi	r24, 0xFE	; 254
    13b2:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    13b4:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    13b8:	08 95       	ret

000013ba <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    13ba:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    13be:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    13c2:	08 95       	ret

000013c4 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    13c4:	1f 92       	push	r1
    13c6:	0f 92       	push	r0
    13c8:	0f b6       	in	r0, 0x3f	; 63
    13ca:	0f 92       	push	r0
    13cc:	11 24       	eor	r1, r1
    13ce:	2f 93       	push	r18
    13d0:	3f 93       	push	r19
    13d2:	4f 93       	push	r20
    13d4:	5f 93       	push	r21
    13d6:	6f 93       	push	r22
    13d8:	7f 93       	push	r23
    13da:	8f 93       	push	r24
    13dc:	9f 93       	push	r25
    13de:	af 93       	push	r26
    13e0:	bf 93       	push	r27
    13e2:	ef 93       	push	r30
    13e4:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    13e6:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    13ea:	82 ff       	sbrs	r24, 2
    13ec:	0a c0       	rjmp	.+20     	; 0x1402 <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    13ee:	80 91 e2 00 	lds	r24, 0x00E2
    13f2:	82 ff       	sbrs	r24, 2
    13f4:	06 c0       	rjmp	.+12     	; 0x1402 <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    13f6:	80 91 e1 00 	lds	r24, 0x00E1
    13fa:	8b 7f       	andi	r24, 0xFB	; 251
    13fc:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1400:	92 d9       	rcall	.-3292   	; 0x726 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1402:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1406:	80 ff       	sbrs	r24, 0
    1408:	1d c0       	rjmp	.+58     	; 0x1444 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    140a:	80 91 d8 00 	lds	r24, 0x00D8
    140e:	80 ff       	sbrs	r24, 0
    1410:	19 c0       	rjmp	.+50     	; 0x1444 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1412:	80 91 da 00 	lds	r24, 0x00DA
    1416:	8e 7f       	andi	r24, 0xFE	; 254
    1418:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    141c:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1420:	80 ff       	sbrs	r24, 0
    1422:	0c c0       	rjmp	.+24     	; 0x143c <__vector_10+0x78>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1424:	80 e1       	ldi	r24, 0x10	; 16
    1426:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1428:	82 e1       	ldi	r24, 0x12	; 18
    142a:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    142c:	09 b4       	in	r0, 0x29	; 41
    142e:	00 fe       	sbrs	r0, 0
    1430:	fd cf       	rjmp	.-6      	; 0x142c <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	80 93 5a 03 	sts	0x035A, r24
			EVENT_USB_Device_Connect();
    1438:	6f d9       	rcall	.-3362   	; 0x718 <EVENT_USB_Device_Connect>
    143a:	04 c0       	rjmp	.+8      	; 0x1444 <__vector_10+0x80>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    143c:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    143e:	10 92 5a 03 	sts	0x035A, r1
			EVENT_USB_Device_Disconnect();
    1442:	6b d9       	rcall	.-3370   	; 0x71a <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1444:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1448:	80 ff       	sbrs	r24, 0
    144a:	18 c0       	rjmp	.+48     	; 0x147c <__vector_10+0xb8>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    144c:	80 91 e2 00 	lds	r24, 0x00E2
    1450:	80 ff       	sbrs	r24, 0
    1452:	14 c0       	rjmp	.+40     	; 0x147c <__vector_10+0xb8>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1454:	80 91 e2 00 	lds	r24, 0x00E2
    1458:	8e 7f       	andi	r24, 0xFE	; 254
    145a:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    145e:	80 91 e2 00 	lds	r24, 0x00E2
    1462:	80 61       	ori	r24, 0x10	; 16
    1464:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1468:	80 91 d8 00 	lds	r24, 0x00D8
    146c:	80 62       	ori	r24, 0x20	; 32
    146e:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1472:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1474:	85 e0       	ldi	r24, 0x05	; 5
    1476:	80 93 5a 03 	sts	0x035A, r24
		EVENT_USB_Device_Suspend();
    147a:	d3 d1       	rcall	.+934    	; 0x1822 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    147c:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1480:	84 ff       	sbrs	r24, 4
    1482:	2f c0       	rjmp	.+94     	; 0x14e2 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1484:	80 91 e2 00 	lds	r24, 0x00E2
    1488:	84 ff       	sbrs	r24, 4
    148a:	2b c0       	rjmp	.+86     	; 0x14e2 <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    148c:	80 e1       	ldi	r24, 0x10	; 16
    148e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1490:	82 e1       	ldi	r24, 0x12	; 18
    1492:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1494:	09 b4       	in	r0, 0x29	; 41
    1496:	00 fe       	sbrs	r0, 0
    1498:	fd cf       	rjmp	.-6      	; 0x1494 <__vector_10+0xd0>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    149a:	80 91 d8 00 	lds	r24, 0x00D8
    149e:	8f 7d       	andi	r24, 0xDF	; 223
    14a0:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    14a4:	80 91 e1 00 	lds	r24, 0x00E1
    14a8:	8f 7e       	andi	r24, 0xEF	; 239
    14aa:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    14ae:	80 91 e2 00 	lds	r24, 0x00E2
    14b2:	8f 7e       	andi	r24, 0xEF	; 239
    14b4:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    14b8:	80 91 e2 00 	lds	r24, 0x00E2
    14bc:	81 60       	ori	r24, 0x01	; 1
    14be:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    14c2:	80 91 56 03 	lds	r24, 0x0356
    14c6:	88 23       	and	r24, r24
    14c8:	11 f0       	breq	.+4      	; 0x14ce <__vector_10+0x10a>
		  USB_DeviceState = DEVICE_STATE_Configured;
    14ca:	84 e0       	ldi	r24, 0x04	; 4
    14cc:	07 c0       	rjmp	.+14     	; 0x14dc <__vector_10+0x118>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    14ce:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    14d2:	87 fd       	sbrc	r24, 7
    14d4:	02 c0       	rjmp	.+4      	; 0x14da <__vector_10+0x116>
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	01 c0       	rjmp	.+2      	; 0x14dc <__vector_10+0x118>
    14da:	83 e0       	ldi	r24, 0x03	; 3
    14dc:	80 93 5a 03 	sts	0x035A, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    14e0:	a0 d1       	rcall	.+832    	; 0x1822 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    14e2:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    14e6:	83 ff       	sbrs	r24, 3
    14e8:	22 c0       	rjmp	.+68     	; 0x152e <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    14ea:	80 91 e2 00 	lds	r24, 0x00E2
    14ee:	83 ff       	sbrs	r24, 3
    14f0:	1e c0       	rjmp	.+60     	; 0x152e <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    14f2:	80 91 e1 00 	lds	r24, 0x00E1
    14f6:	87 7f       	andi	r24, 0xF7	; 247
    14f8:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    14fc:	82 e0       	ldi	r24, 0x02	; 2
    14fe:	80 93 5a 03 	sts	0x035A, r24
		USB_Device_ConfigurationNumber = 0;
    1502:	10 92 56 03 	sts	0x0356, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1506:	80 91 e1 00 	lds	r24, 0x00E1
    150a:	8e 7f       	andi	r24, 0xFE	; 254
    150c:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1510:	80 91 e2 00 	lds	r24, 0x00E2
    1514:	8e 7f       	andi	r24, 0xFE	; 254
    1516:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    151a:	80 91 e2 00 	lds	r24, 0x00E2
    151e:	80 61       	ori	r24, 0x10	; 16
    1520:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1524:	80 e0       	ldi	r24, 0x00	; 0
    1526:	60 e0       	ldi	r22, 0x00	; 0
    1528:	42 e0       	ldi	r20, 0x02	; 2
    152a:	24 de       	rcall	.-952    	; 0x1174 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    152c:	7a d1       	rcall	.+756    	; 0x1822 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    152e:	ff 91       	pop	r31
    1530:	ef 91       	pop	r30
    1532:	bf 91       	pop	r27
    1534:	af 91       	pop	r26
    1536:	9f 91       	pop	r25
    1538:	8f 91       	pop	r24
    153a:	7f 91       	pop	r23
    153c:	6f 91       	pop	r22
    153e:	5f 91       	pop	r21
    1540:	4f 91       	pop	r20
    1542:	3f 91       	pop	r19
    1544:	2f 91       	pop	r18
    1546:	0f 90       	pop	r0
    1548:	0f be       	out	0x3f, r0	; 63
    154a:	0f 90       	pop	r0
    154c:	1f 90       	pop	r1
    154e:	18 95       	reti

00001550 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1550:	1f 93       	push	r17
    1552:	df 93       	push	r29
    1554:	cf 93       	push	r28
    1556:	cd b7       	in	r28, 0x3d	; 61
    1558:	de b7       	in	r29, 0x3e	; 62
    155a:	ac 97       	sbiw	r28, 0x2c	; 44
    155c:	0f b6       	in	r0, 0x3f	; 63
    155e:	f8 94       	cli
    1560:	de bf       	out	0x3e, r29	; 62
    1562:	0f be       	out	0x3f, r0	; 63
    1564:	cd bf       	out	0x3d, r28	; 61
    1566:	eb e5       	ldi	r30, 0x5B	; 91
    1568:	f3 e0       	ldi	r31, 0x03	; 3
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    156a:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    156e:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1570:	23 e0       	ldi	r18, 0x03	; 3
    1572:	e3 36       	cpi	r30, 0x63	; 99
    1574:	f2 07       	cpc	r31, r18
    1576:	c9 f7       	brne	.-14     	; 0x156a <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1578:	1a d9       	rcall	.-3532   	; 0x7ae <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    157a:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    157e:	83 ff       	sbrs	r24, 3
    1580:	38 c1       	rjmp	.+624    	; 0x17f2 <USB_Device_ProcessControlRequest+0x2a2>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1582:	80 91 5b 03 	lds	r24, 0x035B

		switch (USB_ControlRequest.bRequest)
    1586:	30 91 5c 03 	lds	r19, 0x035C
    158a:	35 30       	cpi	r19, 0x05	; 5
    158c:	09 f4       	brne	.+2      	; 0x1590 <USB_Device_ProcessControlRequest+0x40>
    158e:	87 c0       	rjmp	.+270    	; 0x169e <USB_Device_ProcessControlRequest+0x14e>
    1590:	36 30       	cpi	r19, 0x06	; 6
    1592:	40 f4       	brcc	.+16     	; 0x15a4 <USB_Device_ProcessControlRequest+0x54>
    1594:	31 30       	cpi	r19, 0x01	; 1
    1596:	c9 f1       	breq	.+114    	; 0x160a <USB_Device_ProcessControlRequest+0xba>
    1598:	31 30       	cpi	r19, 0x01	; 1
    159a:	70 f0       	brcs	.+28     	; 0x15b8 <USB_Device_ProcessControlRequest+0x68>
    159c:	33 30       	cpi	r19, 0x03	; 3
    159e:	09 f0       	breq	.+2      	; 0x15a2 <USB_Device_ProcessControlRequest+0x52>
    15a0:	28 c1       	rjmp	.+592    	; 0x17f2 <USB_Device_ProcessControlRequest+0x2a2>
    15a2:	33 c0       	rjmp	.+102    	; 0x160a <USB_Device_ProcessControlRequest+0xba>
    15a4:	38 30       	cpi	r19, 0x08	; 8
    15a6:	09 f4       	brne	.+2      	; 0x15aa <USB_Device_ProcessControlRequest+0x5a>
    15a8:	f5 c0       	rjmp	.+490    	; 0x1794 <USB_Device_ProcessControlRequest+0x244>
    15aa:	39 30       	cpi	r19, 0x09	; 9
    15ac:	09 f4       	brne	.+2      	; 0x15b0 <USB_Device_ProcessControlRequest+0x60>
    15ae:	04 c1       	rjmp	.+520    	; 0x17b8 <USB_Device_ProcessControlRequest+0x268>
    15b0:	36 30       	cpi	r19, 0x06	; 6
    15b2:	09 f0       	breq	.+2      	; 0x15b6 <USB_Device_ProcessControlRequest+0x66>
    15b4:	1e c1       	rjmp	.+572    	; 0x17f2 <USB_Device_ProcessControlRequest+0x2a2>
    15b6:	96 c0       	rjmp	.+300    	; 0x16e4 <USB_Device_ProcessControlRequest+0x194>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    15b8:	80 38       	cpi	r24, 0x80	; 128
    15ba:	21 f0       	breq	.+8      	; 0x15c4 <USB_Device_ProcessControlRequest+0x74>
    15bc:	82 38       	cpi	r24, 0x82	; 130
    15be:	09 f0       	breq	.+2      	; 0x15c2 <USB_Device_ProcessControlRequest+0x72>
    15c0:	18 c1       	rjmp	.+560    	; 0x17f2 <USB_Device_ProcessControlRequest+0x2a2>
    15c2:	08 c0       	rjmp	.+16     	; 0x15d4 <USB_Device_ProcessControlRequest+0x84>
    15c4:	90 91 57 03 	lds	r25, 0x0357
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    15c8:	80 91 58 03 	lds	r24, 0x0358
    15cc:	88 23       	and	r24, r24
    15ce:	99 f0       	breq	.+38     	; 0x15f6 <USB_Device_ProcessControlRequest+0xa6>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    15d0:	92 60       	ori	r25, 0x02	; 2
    15d2:	11 c0       	rjmp	.+34     	; 0x15f6 <USB_Device_ProcessControlRequest+0xa6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    15d4:	80 91 5f 03 	lds	r24, 0x035F
    15d8:	8f 70       	andi	r24, 0x0F	; 15
    15da:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    15de:	80 91 eb 00 	lds	r24, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	25 e0       	ldi	r18, 0x05	; 5
    15e6:	96 95       	lsr	r25
    15e8:	87 95       	ror	r24
    15ea:	2a 95       	dec	r18
    15ec:	e1 f7       	brne	.-8      	; 0x15e6 <USB_Device_ProcessControlRequest+0x96>
    15ee:	98 2f       	mov	r25, r24
    15f0:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    15f2:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    15f6:	80 91 e8 00 	lds	r24, 0x00E8
    15fa:	87 7f       	andi	r24, 0xF7	; 247
    15fc:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1600:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
    1604:	10 92 f1 00 	sts	0x00F1, r1
    1608:	d0 c0       	rjmp	.+416    	; 0x17aa <USB_Device_ProcessControlRequest+0x25a>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    160a:	88 23       	and	r24, r24
    160c:	19 f0       	breq	.+6      	; 0x1614 <USB_Device_ProcessControlRequest+0xc4>
    160e:	82 30       	cpi	r24, 0x02	; 2
    1610:	09 f0       	breq	.+2      	; 0x1614 <USB_Device_ProcessControlRequest+0xc4>
    1612:	ef c0       	rjmp	.+478    	; 0x17f2 <USB_Device_ProcessControlRequest+0x2a2>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	8f 71       	andi	r24, 0x1F	; 31
    1618:	90 70       	andi	r25, 0x00	; 0
    161a:	00 97       	sbiw	r24, 0x00	; 0
    161c:	21 f0       	breq	.+8      	; 0x1626 <USB_Device_ProcessControlRequest+0xd6>
    161e:	02 97       	sbiw	r24, 0x02	; 2
    1620:	09 f0       	breq	.+2      	; 0x1624 <USB_Device_ProcessControlRequest+0xd4>
    1622:	e7 c0       	rjmp	.+462    	; 0x17f2 <USB_Device_ProcessControlRequest+0x2a2>
    1624:	0c c0       	rjmp	.+24     	; 0x163e <USB_Device_ProcessControlRequest+0xee>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1626:	80 91 5d 03 	lds	r24, 0x035D
    162a:	81 30       	cpi	r24, 0x01	; 1
    162c:	09 f0       	breq	.+2      	; 0x1630 <USB_Device_ProcessControlRequest+0xe0>
    162e:	e1 c0       	rjmp	.+450    	; 0x17f2 <USB_Device_ProcessControlRequest+0x2a2>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1630:	10 92 58 03 	sts	0x0358, r1
    1634:	33 30       	cpi	r19, 0x03	; 3
    1636:	69 f5       	brne	.+90     	; 0x1692 <USB_Device_ProcessControlRequest+0x142>
    1638:	80 93 58 03 	sts	0x0358, r24
    163c:	2a c0       	rjmp	.+84     	; 0x1692 <USB_Device_ProcessControlRequest+0x142>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    163e:	80 91 5d 03 	lds	r24, 0x035D
    1642:	88 23       	and	r24, r24
    1644:	31 f5       	brne	.+76     	; 0x1692 <USB_Device_ProcessControlRequest+0x142>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1646:	20 91 5f 03 	lds	r18, 0x035F
    164a:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    164c:	09 f4       	brne	.+2      	; 0x1650 <USB_Device_ProcessControlRequest+0x100>
    164e:	d1 c0       	rjmp	.+418    	; 0x17f2 <USB_Device_ProcessControlRequest+0x2a2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1650:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1654:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1658:	80 ff       	sbrs	r24, 0
    165a:	1b c0       	rjmp	.+54     	; 0x1692 <USB_Device_ProcessControlRequest+0x142>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    165c:	33 30       	cpi	r19, 0x03	; 3
    165e:	21 f4       	brne	.+8      	; 0x1668 <USB_Device_ProcessControlRequest+0x118>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1660:	80 91 eb 00 	lds	r24, 0x00EB
    1664:	80 62       	ori	r24, 0x20	; 32
    1666:	13 c0       	rjmp	.+38     	; 0x168e <USB_Device_ProcessControlRequest+0x13e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1668:	80 91 eb 00 	lds	r24, 0x00EB
    166c:	80 61       	ori	r24, 0x10	; 16
    166e:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	02 c0       	rjmp	.+4      	; 0x167c <USB_Device_ProcessControlRequest+0x12c>
    1678:	88 0f       	add	r24, r24
    167a:	99 1f       	adc	r25, r25
    167c:	2a 95       	dec	r18
    167e:	e2 f7       	brpl	.-8      	; 0x1678 <USB_Device_ProcessControlRequest+0x128>
    1680:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    1684:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1688:	80 91 eb 00 	lds	r24, 0x00EB
    168c:	88 60       	ori	r24, 0x08	; 8
    168e:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1692:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1696:	80 91 e8 00 	lds	r24, 0x00E8
    169a:	87 7f       	andi	r24, 0xF7	; 247
    169c:	89 c0       	rjmp	.+274    	; 0x17b0 <USB_Device_ProcessControlRequest+0x260>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    169e:	88 23       	and	r24, r24
    16a0:	09 f0       	breq	.+2      	; 0x16a4 <USB_Device_ProcessControlRequest+0x154>
    16a2:	a7 c0       	rjmp	.+334    	; 0x17f2 <USB_Device_ProcessControlRequest+0x2a2>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    16a4:	10 91 5d 03 	lds	r17, 0x035D
    16a8:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    16aa:	80 91 e3 00 	lds	r24, 0x00E3
    16ae:	80 78       	andi	r24, 0x80	; 128
    16b0:	81 2b       	or	r24, r17
    16b2:	80 93 e3 00 	sts	0x00E3, r24
    16b6:	80 91 e8 00 	lds	r24, 0x00E8
    16ba:	87 7f       	andi	r24, 0xF7	; 247
    16bc:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    16c0:	cd dd       	rcall	.-1126   	; 0x125c <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    16c2:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    16c6:	80 ff       	sbrs	r24, 0
    16c8:	fc cf       	rjmp	.-8      	; 0x16c2 <USB_Device_ProcessControlRequest+0x172>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
    16ca:	80 91 e3 00 	lds	r24, 0x00E3
    16ce:	80 68       	ori	r24, 0x80	; 128
    16d0:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    16d4:	11 23       	and	r17, r17
    16d6:	11 f4       	brne	.+4      	; 0x16dc <USB_Device_ProcessControlRequest+0x18c>
    16d8:	82 e0       	ldi	r24, 0x02	; 2
    16da:	01 c0       	rjmp	.+2      	; 0x16de <USB_Device_ProcessControlRequest+0x18e>
    16dc:	83 e0       	ldi	r24, 0x03	; 3
    16de:	80 93 5a 03 	sts	0x035A, r24
    16e2:	87 c0       	rjmp	.+270    	; 0x17f2 <USB_Device_ProcessControlRequest+0x2a2>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    16e4:	80 58       	subi	r24, 0x80	; 128
    16e6:	82 30       	cpi	r24, 0x02	; 2
    16e8:	08 f0       	brcs	.+2      	; 0x16ec <USB_Device_ProcessControlRequest+0x19c>
    16ea:	83 c0       	rjmp	.+262    	; 0x17f2 <USB_Device_ProcessControlRequest+0x2a2>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    16ec:	80 91 5d 03 	lds	r24, 0x035D
    16f0:	90 91 5e 03 	lds	r25, 0x035E
    16f4:	23 e0       	ldi	r18, 0x03	; 3
    16f6:	8c 3d       	cpi	r24, 0xDC	; 220
    16f8:	92 07       	cpc	r25, r18
    16fa:	09 f0       	breq	.+2      	; 0x16fe <USB_Device_ProcessControlRequest+0x1ae>
    16fc:	33 c0       	rjmp	.+102    	; 0x1764 <USB_Device_ProcessControlRequest+0x214>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    16fe:	83 e0       	ldi	r24, 0x03	; 3
    1700:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1702:	8a e2       	ldi	r24, 0x2A	; 42
    1704:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1706:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1708:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    170a:	de 01       	movw	r26, r28
    170c:	15 96       	adiw	r26, 0x05	; 5
    170e:	6e e0       	ldi	r22, 0x0E	; 14
    1710:	40 e0       	ldi	r20, 0x00	; 0
    1712:	50 e0       	ldi	r21, 0x00	; 0

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1714:	11 e2       	ldi	r17, 0x21	; 33
    1716:	e6 2f       	mov	r30, r22
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	10 93 57 00 	sts	0x0057, r17
    171e:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
    1720:	40 ff       	sbrs	r20, 0
    1722:	03 c0       	rjmp	.+6      	; 0x172a <USB_Device_ProcessControlRequest+0x1da>
					{
						SerialByte >>= 4;
    1724:	82 95       	swap	r24
    1726:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    1728:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    172a:	8f 70       	andi	r24, 0x0F	; 15
    172c:	28 2f       	mov	r18, r24
    172e:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1730:	8a 30       	cpi	r24, 0x0A	; 10
    1732:	18 f0       	brcs	.+6      	; 0x173a <USB_Device_ProcessControlRequest+0x1ea>
    1734:	c9 01       	movw	r24, r18
    1736:	c7 96       	adiw	r24, 0x37	; 55
    1738:	02 c0       	rjmp	.+4      	; 0x173e <USB_Device_ProcessControlRequest+0x1ee>
    173a:	c9 01       	movw	r24, r18
    173c:	c0 96       	adiw	r24, 0x30	; 48
    173e:	8d 93       	st	X+, r24
    1740:	9d 93       	st	X+, r25
    1742:	4f 5f       	subi	r20, 0xFF	; 255
    1744:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1746:	44 31       	cpi	r20, 0x14	; 20
    1748:	51 05       	cpc	r21, r1
    174a:	29 f7       	brne	.-54     	; 0x1716 <USB_Device_ProcessControlRequest+0x1c6>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    174c:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    174e:	80 91 e8 00 	lds	r24, 0x00E8
    1752:	87 7f       	andi	r24, 0xF7	; 247
    1754:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1758:	ce 01       	movw	r24, r28
    175a:	03 96       	adiw	r24, 0x03	; 3
    175c:	6a e2       	ldi	r22, 0x2A	; 42
    175e:	70 e0       	ldi	r23, 0x00	; 0
    1760:	a3 db       	rcall	.-2234   	; 0xea8 <Endpoint_Write_Control_Stream_LE>
    1762:	12 c0       	rjmp	.+36     	; 0x1788 <USB_Device_ProcessControlRequest+0x238>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1764:	60 91 5f 03 	lds	r22, 0x035F
    1768:	ae 01       	movw	r20, r28
    176a:	4f 5f       	subi	r20, 0xFF	; 255
    176c:	5f 4f       	sbci	r21, 0xFF	; 255
    176e:	5c db       	rcall	.-2376   	; 0xe28 <CALLBACK_USB_GetDescriptor>
    1770:	bc 01       	movw	r22, r24
    1772:	00 97       	sbiw	r24, 0x00	; 0
    1774:	09 f4       	brne	.+2      	; 0x1778 <USB_Device_ProcessControlRequest+0x228>
    1776:	3d c0       	rjmp	.+122    	; 0x17f2 <USB_Device_ProcessControlRequest+0x2a2>
    1778:	80 91 e8 00 	lds	r24, 0x00E8
    177c:	87 7f       	andi	r24, 0xF7	; 247
    177e:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1782:	89 81       	ldd	r24, Y+1	; 0x01
    1784:	9a 81       	ldd	r25, Y+2	; 0x02
    1786:	3c dc       	rcall	.-1928   	; 0x1000 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1788:	80 91 e8 00 	lds	r24, 0x00E8
    178c:	8b 77       	andi	r24, 0x7B	; 123
    178e:	80 93 e8 00 	sts	0x00E8, r24
    1792:	2f c0       	rjmp	.+94     	; 0x17f2 <USB_Device_ProcessControlRequest+0x2a2>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1794:	80 38       	cpi	r24, 0x80	; 128
    1796:	69 f5       	brne	.+90     	; 0x17f2 <USB_Device_ProcessControlRequest+0x2a2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1798:	80 91 e8 00 	lds	r24, 0x00E8
    179c:	87 7f       	andi	r24, 0xF7	; 247
    179e:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    17a2:	80 91 56 03 	lds	r24, 0x0356
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    17a6:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    17aa:	80 91 e8 00 	lds	r24, 0x00E8
    17ae:	8e 77       	andi	r24, 0x7E	; 126
    17b0:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    17b4:	53 dd       	rcall	.-1370   	; 0x125c <Endpoint_ClearStatusStage>
    17b6:	1d c0       	rjmp	.+58     	; 0x17f2 <USB_Device_ProcessControlRequest+0x2a2>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    17b8:	88 23       	and	r24, r24
    17ba:	d9 f4       	brne	.+54     	; 0x17f2 <USB_Device_ProcessControlRequest+0x2a2>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    17bc:	90 91 5d 03 	lds	r25, 0x035D
    17c0:	92 30       	cpi	r25, 0x02	; 2
    17c2:	b8 f4       	brcc	.+46     	; 0x17f2 <USB_Device_ProcessControlRequest+0x2a2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    17c4:	80 91 e8 00 	lds	r24, 0x00E8
    17c8:	87 7f       	andi	r24, 0xF7	; 247
    17ca:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    17ce:	90 93 56 03 	sts	0x0356, r25

	Endpoint_ClearStatusStage();
    17d2:	44 dd       	rcall	.-1400   	; 0x125c <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    17d4:	80 91 56 03 	lds	r24, 0x0356
    17d8:	88 23       	and	r24, r24
    17da:	31 f4       	brne	.+12     	; 0x17e8 <USB_Device_ProcessControlRequest+0x298>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    17dc:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    17e0:	87 fd       	sbrc	r24, 7
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <USB_Device_ProcessControlRequest+0x298>
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	01 c0       	rjmp	.+2      	; 0x17ea <USB_Device_ProcessControlRequest+0x29a>
    17e8:	84 e0       	ldi	r24, 0x04	; 4
    17ea:	80 93 5a 03 	sts	0x035A, r24

	EVENT_USB_Device_ConfigurationChanged();
    17ee:	0e 94 db 03 	call	0x7b6	; 0x7b6 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    17f2:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    17f6:	83 ff       	sbrs	r24, 3
    17f8:	0a c0       	rjmp	.+20     	; 0x180e <USB_Device_ProcessControlRequest+0x2be>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    17fa:	80 91 e8 00 	lds	r24, 0x00E8
    17fe:	87 7f       	andi	r24, 0xF7	; 247
    1800:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1804:	80 91 eb 00 	lds	r24, 0x00EB
    1808:	80 62       	ori	r24, 0x20	; 32
    180a:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    180e:	ac 96       	adiw	r28, 0x2c	; 44
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	f8 94       	cli
    1814:	de bf       	out	0x3e, r29	; 62
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	cd bf       	out	0x3d, r28	; 61
    181a:	cf 91       	pop	r28
    181c:	df 91       	pop	r29
    181e:	1f 91       	pop	r17
    1820:	08 95       	ret

00001822 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1822:	08 95       	ret

00001824 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1824:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    1826:	80 91 5a 03 	lds	r24, 0x035A
    182a:	88 23       	and	r24, r24
    182c:	71 f0       	breq	.+28     	; 0x184a <USB_USBTask+0x26>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    182e:	10 91 e9 00 	lds	r17, 0x00E9
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1832:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1836:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    183a:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    183e:	83 ff       	sbrs	r24, 3
    1840:	01 c0       	rjmp	.+2      	; 0x1844 <USB_USBTask+0x20>
	  USB_Device_ProcessControlRequest();
    1842:	86 de       	rcall	.-756    	; 0x1550 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1844:	1f 70       	andi	r17, 0x0F	; 15
    1846:	10 93 e9 00 	sts	0x00E9, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    184a:	1f 91       	pop	r17
    184c:	08 95       	ret

0000184e <HID_Device_USBTask>:

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    184e:	4f 92       	push	r4
    1850:	5f 92       	push	r5
    1852:	6f 92       	push	r6
    1854:	7f 92       	push	r7
    1856:	8f 92       	push	r8
    1858:	9f 92       	push	r9
    185a:	af 92       	push	r10
    185c:	bf 92       	push	r11
    185e:	cf 92       	push	r12
    1860:	df 92       	push	r13
    1862:	ef 92       	push	r14
    1864:	ff 92       	push	r15
    1866:	0f 93       	push	r16
    1868:	1f 93       	push	r17
    186a:	df 93       	push	r29
    186c:	cf 93       	push	r28
    186e:	00 d0       	rcall	.+0      	; 0x1870 <HID_Device_USBTask+0x22>
    1870:	0f 92       	push	r0
    1872:	cd b7       	in	r28, 0x3d	; 61
    1874:	de b7       	in	r29, 0x3e	; 62
    1876:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    1878:	6d b6       	in	r6, 0x3d	; 61
    187a:	7e b6       	in	r7, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    187c:	80 91 5a 03 	lds	r24, 0x035A
    1880:	84 30       	cpi	r24, 0x04	; 4
    1882:	09 f0       	breq	.+2      	; 0x1886 <HID_Device_USBTask+0x38>
    1884:	9a c0       	rjmp	.+308    	; 0x19ba <HID_Device_USBTask+0x16c>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1886:	20 91 e4 00 	lds	r18, 0x00E4
    188a:	30 91 e5 00 	lds	r19, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    188e:	f7 01       	movw	r30, r14
    1890:	82 85       	ldd	r24, Z+10	; 0x0a
    1892:	93 85       	ldd	r25, Z+11	; 0x0b
    1894:	82 17       	cp	r24, r18
    1896:	93 07       	cpc	r25, r19
    1898:	09 f4       	brne	.+2      	; 0x189c <HID_Device_USBTask+0x4e>
    189a:	8f c0       	rjmp	.+286    	; 0x19ba <HID_Device_USBTask+0x16c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    189c:	81 81       	ldd	r24, Z+1	; 0x01
    189e:	8f 70       	andi	r24, 0x0F	; 15
    18a0:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    18a4:	80 91 e8 00 	lds	r24, 0x00E8
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    18a8:	85 ff       	sbrs	r24, 5
    18aa:	87 c0       	rjmp	.+270    	; 0x19ba <HID_Device_USBTask+0x16c>
    18ac:	5d b6       	in	r5, 0x3d	; 61
    18ae:	4e b6       	in	r4, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    18b0:	40 85       	ldd	r20, Z+8	; 0x08
    18b2:	50 e0       	ldi	r21, 0x00	; 0
    18b4:	8d b7       	in	r24, 0x3d	; 61
    18b6:	9e b7       	in	r25, 0x3e	; 62
    18b8:	84 1b       	sub	r24, r20
    18ba:	95 0b       	sbc	r25, r21
    18bc:	0f b6       	in	r0, 0x3f	; 63
    18be:	f8 94       	cli
    18c0:	9e bf       	out	0x3e, r25	; 62
    18c2:	0f be       	out	0x3f, r0	; 63
    18c4:	8d bf       	out	0x3d, r24	; 61
    18c6:	0d b7       	in	r16, 0x3d	; 61
    18c8:	1e b7       	in	r17, 0x3e	; 62
    18ca:	0f 5f       	subi	r16, 0xFF	; 255
    18cc:	1f 4f       	sbci	r17, 0xFF	; 255
		uint8_t  ReportID     = 0;
    18ce:	19 82       	std	Y+1, r1	; 0x01
		uint16_t ReportINSize = 0;
    18d0:	1b 82       	std	Y+3, r1	; 0x03
    18d2:	1a 82       	std	Y+2, r1	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));
    18d4:	c0 2e       	mov	r12, r16
    18d6:	91 2e       	mov	r9, r17
    18d8:	c8 01       	movw	r24, r16
    18da:	60 e0       	ldi	r22, 0x00	; 0
    18dc:	70 e0       	ldi	r23, 0x00	; 0
    18de:	50 e0       	ldi	r21, 0x00	; 0
    18e0:	01 d2       	rcall	.+1026   	; 0x1ce4 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
    18e2:	c7 01       	movw	r24, r14
    18e4:	be 01       	movw	r22, r28
    18e6:	6f 5f       	subi	r22, 0xFF	; 255
    18e8:	7f 4f       	sbci	r23, 0xFF	; 255
    18ea:	40 e0       	ldi	r20, 0x00	; 0
    18ec:	98 01       	movw	r18, r16
    18ee:	8e 01       	movw	r16, r28
    18f0:	0e 5f       	subi	r16, 0xFE	; 254
    18f2:	1f 4f       	sbci	r17, 0xFF	; 255
    18f4:	0e 94 b7 03 	call	0x76e	; 0x76e <CALLBACK_HID_Device_CreateHIDReport>
    18f8:	88 2e       	mov	r8, r24
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    18fa:	f7 01       	movw	r30, r14
    18fc:	84 85       	ldd	r24, Z+12	; 0x0c
    18fe:	95 85       	ldd	r25, Z+13	; 0x0d
    1900:	89 2b       	or	r24, r25
    1902:	19 f4       	brne	.+6      	; 0x190a <HID_Device_USBTask+0xbc>
    1904:	aa 24       	eor	r10, r10
    1906:	bb 24       	eor	r11, r11
    1908:	0b c0       	rjmp	.+22     	; 0x1920 <HID_Device_USBTask+0xd2>
    190a:	20 e0       	ldi	r18, 0x00	; 0
    190c:	f7 01       	movw	r30, r14
    190e:	86 85       	ldd	r24, Z+14	; 0x0e
    1910:	97 85       	ldd	r25, Z+15	; 0x0f
    1912:	89 2b       	or	r24, r25
    1914:	09 f0       	breq	.+2      	; 0x1918 <HID_Device_USBTask+0xca>
    1916:	21 e0       	ldi	r18, 0x01	; 1
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	28 27       	eor	r18, r24
    191c:	a2 2e       	mov	r10, r18
    191e:	bb 24       	eor	r11, r11

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1920:	f7 01       	movw	r30, r14
    1922:	06 81       	ldd	r16, Z+6	; 0x06
    1924:	17 81       	ldd	r17, Z+7	; 0x07
    1926:	01 15       	cp	r16, r1
    1928:	11 05       	cpc	r17, r1
    192a:	11 f4       	brne	.+4      	; 0x1930 <HID_Device_USBTask+0xe2>
    192c:	dd 24       	eor	r13, r13
    192e:	12 c0       	rjmp	.+36     	; 0x1954 <HID_Device_USBTask+0x106>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    1930:	4a 81       	ldd	r20, Y+2	; 0x02
    1932:	5b 81       	ldd	r21, Y+3	; 0x03
    1934:	8c 2d       	mov	r24, r12
    1936:	99 2d       	mov	r25, r9
    1938:	b8 01       	movw	r22, r16
    193a:	be d1       	rcall	.+892    	; 0x1cb8 <memcmp>
    193c:	dd 24       	eor	r13, r13
    193e:	00 97       	sbiw	r24, 0x00	; 0
    1940:	11 f0       	breq	.+4      	; 0x1946 <HID_Device_USBTask+0xf8>
    1942:	dd 24       	eor	r13, r13
    1944:	d3 94       	inc	r13
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    1946:	f7 01       	movw	r30, r14
    1948:	40 85       	ldd	r20, Z+8	; 0x08
    194a:	c8 01       	movw	r24, r16
    194c:	6c 2d       	mov	r22, r12
    194e:	79 2d       	mov	r23, r9
    1950:	50 e0       	ldi	r21, 0x00	; 0
    1952:	bf d1       	rcall	.+894    	; 0x1cd2 <memcpy>
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    1954:	8a 81       	ldd	r24, Y+2	; 0x02
    1956:	9b 81       	ldd	r25, Y+3	; 0x03
    1958:	89 2b       	or	r24, r25
    195a:	01 f1       	breq	.+64     	; 0x199c <HID_Device_USBTask+0x14e>
    195c:	88 20       	and	r8, r8
    195e:	21 f4       	brne	.+8      	; 0x1968 <HID_Device_USBTask+0x11a>
    1960:	dd 20       	and	r13, r13
    1962:	11 f4       	brne	.+4      	; 0x1968 <HID_Device_USBTask+0x11a>
    1964:	ab 28       	or	r10, r11
    1966:	d1 f0       	breq	.+52     	; 0x199c <HID_Device_USBTask+0x14e>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    1968:	f7 01       	movw	r30, r14
    196a:	84 85       	ldd	r24, Z+12	; 0x0c
    196c:	95 85       	ldd	r25, Z+13	; 0x0d
    196e:	97 87       	std	Z+15, r25	; 0x0f
    1970:	86 87       	std	Z+14, r24	; 0x0e
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1972:	81 81       	ldd	r24, Z+1	; 0x01
    1974:	8f 70       	andi	r24, 0x0F	; 15
    1976:	80 93 e9 00 	sts	0x00E9, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    197a:	89 81       	ldd	r24, Y+1	; 0x01
    197c:	88 23       	and	r24, r24
    197e:	11 f0       	breq	.+4      	; 0x1984 <HID_Device_USBTask+0x136>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1980:	80 93 f1 00 	sts	0x00F1, r24
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    1984:	6a 81       	ldd	r22, Y+2	; 0x02
    1986:	7b 81       	ldd	r23, Y+3	; 0x03
    1988:	8c 2d       	mov	r24, r12
    198a:	99 2d       	mov	r25, r9
    198c:	40 e0       	ldi	r20, 0x00	; 0
    198e:	50 e0       	ldi	r21, 0x00	; 0
    1990:	9f db       	rcall	.-2242   	; 0x10d0 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1992:	80 91 e8 00 	lds	r24, 0x00E8
    1996:	8e 77       	andi	r24, 0x7E	; 126
    1998:	80 93 e8 00 	sts	0x00E8, r24
    199c:	80 91 e4 00 	lds	r24, 0x00E4
    19a0:	90 91 e5 00 	lds	r25, 0x00E5

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    19a4:	f7 01       	movw	r30, r14
    19a6:	93 87       	std	Z+11, r25	; 0x0b
    19a8:	82 87       	std	Z+10, r24	; 0x0a
    19aa:	25 2d       	mov	r18, r5
    19ac:	34 2d       	mov	r19, r4
    19ae:	c9 01       	movw	r24, r18
    19b0:	0f b6       	in	r0, 0x3f	; 63
    19b2:	f8 94       	cli
    19b4:	9e bf       	out	0x3e, r25	; 62
    19b6:	0f be       	out	0x3f, r0	; 63
    19b8:	8d bf       	out	0x3d, r24	; 61
	}
}
    19ba:	0f b6       	in	r0, 0x3f	; 63
    19bc:	f8 94       	cli
    19be:	7e be       	out	0x3e, r7	; 62
    19c0:	0f be       	out	0x3f, r0	; 63
    19c2:	6d be       	out	0x3d, r6	; 61
    19c4:	0f 90       	pop	r0
    19c6:	0f 90       	pop	r0
    19c8:	0f 90       	pop	r0
    19ca:	cf 91       	pop	r28
    19cc:	df 91       	pop	r29
    19ce:	1f 91       	pop	r17
    19d0:	0f 91       	pop	r16
    19d2:	ff 90       	pop	r15
    19d4:	ef 90       	pop	r14
    19d6:	df 90       	pop	r13
    19d8:	cf 90       	pop	r12
    19da:	bf 90       	pop	r11
    19dc:	af 90       	pop	r10
    19de:	9f 90       	pop	r9
    19e0:	8f 90       	pop	r8
    19e2:	7f 90       	pop	r7
    19e4:	6f 90       	pop	r6
    19e6:	5f 90       	pop	r5
    19e8:	4f 90       	pop	r4
    19ea:	08 95       	ret

000019ec <HID_Device_ConfigureEndpoints>:
			break;
	}
}

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    19ec:	cf 93       	push	r28
    19ee:	df 93       	push	r29
    19f0:	dc 01       	movw	r26, r24
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    19f2:	09 96       	adiw	r24, 0x09	; 9
    19f4:	fc 01       	movw	r30, r24
    19f6:	87 e0       	ldi	r24, 0x07	; 7
    19f8:	ef 01       	movw	r28, r30
    19fa:	19 92       	st	Y+, r1
    19fc:	8a 95       	dec	r24
    19fe:	e9 f7       	brne	.-6      	; 0x19fa <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	19 96       	adiw	r26, 0x09	; 9
    1a04:	8c 93       	st	X, r24
    1a06:	19 97       	sbiw	r26, 0x09	; 9
	HIDInterfaceInfo->State.IdleCount           = 500;
    1a08:	84 ef       	ldi	r24, 0xF4	; 244
    1a0a:	91 e0       	ldi	r25, 0x01	; 1
    1a0c:	1d 96       	adiw	r26, 0x0d	; 13
    1a0e:	9c 93       	st	X, r25
    1a10:	8e 93       	st	-X, r24
    1a12:	1c 97       	sbiw	r26, 0x0c	; 12

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    1a14:	83 e0       	ldi	r24, 0x03	; 3
    1a16:	14 96       	adiw	r26, 0x04	; 4
    1a18:	8c 93       	st	X, r24
    1a1a:	14 97       	sbiw	r26, 0x04	; 4

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    1a1c:	cd 01       	movw	r24, r26
    1a1e:	01 96       	adiw	r24, 0x01	; 1
    1a20:	61 e0       	ldi	r22, 0x01	; 1
    1a22:	e0 db       	rcall	.-2112   	; 0x11e4 <Endpoint_ConfigureEndpointTable>
    1a24:	81 11       	cpse	r24, r1
    1a26:	81 e0       	ldi	r24, 0x01	; 1
	  return false;

	return true;
}
    1a28:	df 91       	pop	r29
    1a2a:	cf 91       	pop	r28
    1a2c:	08 95       	ret

00001a2e <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1a2e:	6f 92       	push	r6
    1a30:	7f 92       	push	r7
    1a32:	8f 92       	push	r8
    1a34:	9f 92       	push	r9
    1a36:	af 92       	push	r10
    1a38:	bf 92       	push	r11
    1a3a:	cf 92       	push	r12
    1a3c:	df 92       	push	r13
    1a3e:	ef 92       	push	r14
    1a40:	ff 92       	push	r15
    1a42:	0f 93       	push	r16
    1a44:	1f 93       	push	r17
    1a46:	df 93       	push	r29
    1a48:	cf 93       	push	r28
    1a4a:	00 d0       	rcall	.+0      	; 0x1a4c <HID_Device_ProcessControlRequest+0x1e>
    1a4c:	0f 92       	push	r0
    1a4e:	cd b7       	in	r28, 0x3d	; 61
    1a50:	de b7       	in	r29, 0x3e	; 62
    1a52:	6c 01       	movw	r12, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    1a54:	6d b6       	in	r6, 0x3d	; 61
    1a56:	7e b6       	in	r7, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1a58:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    1a5c:	83 ff       	sbrs	r24, 3
    1a5e:	15 c1       	rjmp	.+554    	; 0x1c8a <HID_Device_ProcessControlRequest+0x25c>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    1a60:	f6 01       	movw	r30, r12
    1a62:	80 81       	ld	r24, Z
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	20 91 5f 03 	lds	r18, 0x035F
    1a6a:	30 91 60 03 	lds	r19, 0x0360
    1a6e:	28 17       	cp	r18, r24
    1a70:	39 07       	cpc	r19, r25
    1a72:	09 f0       	breq	.+2      	; 0x1a76 <HID_Device_ProcessControlRequest+0x48>
    1a74:	0a c1       	rjmp	.+532    	; 0x1c8a <HID_Device_ProcessControlRequest+0x25c>
	  return;

	switch (USB_ControlRequest.bRequest)
    1a76:	80 91 5c 03 	lds	r24, 0x035C
    1a7a:	83 30       	cpi	r24, 0x03	; 3
    1a7c:	09 f4       	brne	.+2      	; 0x1a80 <HID_Device_ProcessControlRequest+0x52>
    1a7e:	ad c0       	rjmp	.+346    	; 0x1bda <HID_Device_ProcessControlRequest+0x1ac>
    1a80:	84 30       	cpi	r24, 0x04	; 4
    1a82:	30 f4       	brcc	.+12     	; 0x1a90 <HID_Device_ProcessControlRequest+0x62>
    1a84:	81 30       	cpi	r24, 0x01	; 1
    1a86:	71 f0       	breq	.+28     	; 0x1aa4 <HID_Device_ProcessControlRequest+0x76>
    1a88:	82 30       	cpi	r24, 0x02	; 2
    1a8a:	09 f0       	breq	.+2      	; 0x1a8e <HID_Device_ProcessControlRequest+0x60>
    1a8c:	fe c0       	rjmp	.+508    	; 0x1c8a <HID_Device_ProcessControlRequest+0x25c>
    1a8e:	e1 c0       	rjmp	.+450    	; 0x1c52 <HID_Device_ProcessControlRequest+0x224>
    1a90:	8a 30       	cpi	r24, 0x0A	; 10
    1a92:	09 f4       	brne	.+2      	; 0x1a96 <HID_Device_ProcessControlRequest+0x68>
    1a94:	c6 c0       	rjmp	.+396    	; 0x1c22 <HID_Device_ProcessControlRequest+0x1f4>
    1a96:	8b 30       	cpi	r24, 0x0B	; 11
    1a98:	09 f4       	brne	.+2      	; 0x1a9c <HID_Device_ProcessControlRequest+0x6e>
    1a9a:	b0 c0       	rjmp	.+352    	; 0x1bfc <HID_Device_ProcessControlRequest+0x1ce>
    1a9c:	89 30       	cpi	r24, 0x09	; 9
    1a9e:	09 f0       	breq	.+2      	; 0x1aa2 <HID_Device_ProcessControlRequest+0x74>
    1aa0:	f4 c0       	rjmp	.+488    	; 0x1c8a <HID_Device_ProcessControlRequest+0x25c>
    1aa2:	57 c0       	rjmp	.+174    	; 0x1b52 <HID_Device_ProcessControlRequest+0x124>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1aa4:	80 91 5b 03 	lds	r24, 0x035B
    1aa8:	81 3a       	cpi	r24, 0xA1	; 161
    1aaa:	09 f0       	breq	.+2      	; 0x1aae <HID_Device_ProcessControlRequest+0x80>
    1aac:	ee c0       	rjmp	.+476    	; 0x1c8a <HID_Device_ProcessControlRequest+0x25c>
    1aae:	9d b6       	in	r9, 0x3d	; 61
    1ab0:	8e b6       	in	r8, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
    1ab2:	1b 82       	std	Y+3, r1	; 0x03
    1ab4:	1a 82       	std	Y+2, r1	; 0x02
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    1ab6:	80 91 5d 03 	lds	r24, 0x035D
    1aba:	10 91 5e 03 	lds	r17, 0x035E
    1abe:	89 83       	std	Y+1, r24	; 0x01
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    1ac0:	f6 01       	movw	r30, r12
    1ac2:	40 85       	ldd	r20, Z+8	; 0x08
    1ac4:	50 e0       	ldi	r21, 0x00	; 0
    1ac6:	8d b7       	in	r24, 0x3d	; 61
    1ac8:	9e b7       	in	r25, 0x3e	; 62
    1aca:	84 1b       	sub	r24, r20
    1acc:	95 0b       	sbc	r25, r21
    1ace:	0f b6       	in	r0, 0x3f	; 63
    1ad0:	f8 94       	cli
    1ad2:	9e bf       	out	0x3e, r25	; 62
    1ad4:	0f be       	out	0x3f, r0	; 63
    1ad6:	8d bf       	out	0x3d, r24	; 61
    1ad8:	ed b6       	in	r14, 0x3d	; 61
    1ada:	fe b6       	in	r15, 0x3e	; 62
    1adc:	08 94       	sec
    1ade:	e1 1c       	adc	r14, r1
    1ae0:	f1 1c       	adc	r15, r1

				memset(ReportData, 0, sizeof(ReportData));
    1ae2:	be 2c       	mov	r11, r14
    1ae4:	af 2c       	mov	r10, r15
    1ae6:	c7 01       	movw	r24, r14
    1ae8:	60 e0       	ldi	r22, 0x00	; 0
    1aea:	70 e0       	ldi	r23, 0x00	; 0
    1aec:	50 e0       	ldi	r21, 0x00	; 0
    1aee:	fa d0       	rcall	.+500    	; 0x1ce4 <memset>

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    1af0:	11 50       	subi	r17, 0x01	; 1
    1af2:	c6 01       	movw	r24, r12
    1af4:	be 01       	movw	r22, r28
    1af6:	6f 5f       	subi	r22, 0xFF	; 255
    1af8:	7f 4f       	sbci	r23, 0xFF	; 255
    1afa:	41 2f       	mov	r20, r17
    1afc:	97 01       	movw	r18, r14
    1afe:	8e 01       	movw	r16, r28
    1b00:	0e 5f       	subi	r16, 0xFE	; 254
    1b02:	1f 4f       	sbci	r17, 0xFF	; 255
    1b04:	0e 94 b7 03 	call	0x76e	; 0x76e <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1b08:	f6 01       	movw	r30, r12
    1b0a:	26 81       	ldd	r18, Z+6	; 0x06
    1b0c:	37 81       	ldd	r19, Z+7	; 0x07
    1b0e:	21 15       	cp	r18, r1
    1b10:	31 05       	cpc	r19, r1
    1b12:	29 f0       	breq	.+10     	; 0x1b1e <HID_Device_ProcessControlRequest+0xf0>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    1b14:	40 85       	ldd	r20, Z+8	; 0x08
    1b16:	c9 01       	movw	r24, r18
    1b18:	b7 01       	movw	r22, r14
    1b1a:	50 e0       	ldi	r21, 0x00	; 0
    1b1c:	da d0       	rcall	.+436    	; 0x1cd2 <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b1e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1b22:	80 91 e8 00 	lds	r24, 0x00E8
    1b26:	87 7f       	andi	r24, 0xF7	; 247
    1b28:	80 93 e8 00 	sts	0x00E8, r24
				}

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    1b2c:	6a 81       	ldd	r22, Y+2	; 0x02
    1b2e:	7b 81       	ldd	r23, Y+3	; 0x03
    1b30:	8b 2d       	mov	r24, r11
    1b32:	9a 2d       	mov	r25, r10
    1b34:	b9 d9       	rcall	.-3214   	; 0xea8 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1b36:	80 91 e8 00 	lds	r24, 0x00E8
    1b3a:	8b 77       	andi	r24, 0x7B	; 123
    1b3c:	80 93 e8 00 	sts	0x00E8, r24
    1b40:	29 2d       	mov	r18, r9
    1b42:	38 2d       	mov	r19, r8
    1b44:	c9 01       	movw	r24, r18
    1b46:	0f b6       	in	r0, 0x3f	; 63
    1b48:	f8 94       	cli
    1b4a:	9e bf       	out	0x3e, r25	; 62
    1b4c:	0f be       	out	0x3f, r0	; 63
    1b4e:	8d bf       	out	0x3d, r24	; 61
    1b50:	9c c0       	rjmp	.+312    	; 0x1c8a <HID_Device_ProcessControlRequest+0x25c>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1b52:	80 91 5b 03 	lds	r24, 0x035B
    1b56:	81 32       	cpi	r24, 0x21	; 33
    1b58:	09 f0       	breq	.+2      	; 0x1b5c <HID_Device_ProcessControlRequest+0x12e>
    1b5a:	97 c0       	rjmp	.+302    	; 0x1c8a <HID_Device_ProcessControlRequest+0x25c>
    1b5c:	9d b6       	in	r9, 0x3d	; 61
    1b5e:	8e b6       	in	r8, 0x3e	; 62
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    1b60:	00 91 61 03 	lds	r16, 0x0361
    1b64:	10 91 62 03 	lds	r17, 0x0362
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    1b68:	a0 90 5d 03 	lds	r10, 0x035D
    1b6c:	b0 90 5e 03 	lds	r11, 0x035E
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    1b70:	8d b7       	in	r24, 0x3d	; 61
    1b72:	9e b7       	in	r25, 0x3e	; 62
    1b74:	80 1b       	sub	r24, r16
    1b76:	91 0b       	sbc	r25, r17
    1b78:	0f b6       	in	r0, 0x3f	; 63
    1b7a:	f8 94       	cli
    1b7c:	9e bf       	out	0x3e, r25	; 62
    1b7e:	0f be       	out	0x3f, r0	; 63
    1b80:	8d bf       	out	0x3d, r24	; 61
    1b82:	ed b6       	in	r14, 0x3d	; 61
    1b84:	fe b6       	in	r15, 0x3e	; 62
    1b86:	08 94       	sec
    1b88:	e1 1c       	adc	r14, r1
    1b8a:	f1 1c       	adc	r15, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1b8c:	80 91 e8 00 	lds	r24, 0x00E8
    1b90:	87 7f       	andi	r24, 0xF7	; 247
    1b92:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    1b96:	c7 01       	movw	r24, r14
    1b98:	b8 01       	movw	r22, r16
    1b9a:	ec d9       	rcall	.-3112   	; 0xf74 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b9c:	80 91 e8 00 	lds	r24, 0x00E8
    1ba0:	8e 77       	andi	r24, 0x7E	; 126
    1ba2:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    1ba6:	80 e0       	ldi	r24, 0x00	; 0
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	aa 20       	and	r10, r10
    1bac:	11 f0       	breq	.+4      	; 0x1bb2 <HID_Device_ProcessControlRequest+0x184>
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	ba 94       	dec	r11
    1bb4:	e8 0e       	add	r14, r24
    1bb6:	f9 1e       	adc	r15, r25
    1bb8:	08 1b       	sub	r16, r24
    1bba:	19 0b       	sbc	r17, r25
    1bbc:	c6 01       	movw	r24, r12
    1bbe:	6a 2d       	mov	r22, r10
    1bc0:	4b 2d       	mov	r20, r11
    1bc2:	97 01       	movw	r18, r14
    1bc4:	0e 94 9f 03 	call	0x73e	; 0x73e <CALLBACK_HID_Device_ProcessHIDReport>
    1bc8:	89 2d       	mov	r24, r9
    1bca:	98 2d       	mov	r25, r8
    1bcc:	9c 01       	movw	r18, r24
    1bce:	0f b6       	in	r0, 0x3f	; 63
    1bd0:	f8 94       	cli
    1bd2:	3e bf       	out	0x3e, r19	; 62
    1bd4:	0f be       	out	0x3f, r0	; 63
    1bd6:	2d bf       	out	0x3d, r18	; 61
    1bd8:	58 c0       	rjmp	.+176    	; 0x1c8a <HID_Device_ProcessControlRequest+0x25c>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1bda:	80 91 5b 03 	lds	r24, 0x035B
    1bde:	81 3a       	cpi	r24, 0xA1	; 161
    1be0:	09 f0       	breq	.+2      	; 0x1be4 <HID_Device_ProcessControlRequest+0x1b6>
    1be2:	53 c0       	rjmp	.+166    	; 0x1c8a <HID_Device_ProcessControlRequest+0x25c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1be4:	80 91 e8 00 	lds	r24, 0x00E8
    1be8:	87 7f       	andi	r24, 0xF7	; 247
    1bea:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1bee:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    1bf2:	80 ff       	sbrs	r24, 0
    1bf4:	fc cf       	rjmp	.-8      	; 0x1bee <HID_Device_ProcessControlRequest+0x1c0>
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    1bf6:	f6 01       	movw	r30, r12
    1bf8:	81 85       	ldd	r24, Z+9	; 0x09
    1bfa:	3f c0       	rjmp	.+126    	; 0x1c7a <HID_Device_ProcessControlRequest+0x24c>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1bfc:	80 91 5b 03 	lds	r24, 0x035B
    1c00:	81 32       	cpi	r24, 0x21	; 33
    1c02:	09 f0       	breq	.+2      	; 0x1c06 <HID_Device_ProcessControlRequest+0x1d8>
    1c04:	42 c0       	rjmp	.+132    	; 0x1c8a <HID_Device_ProcessControlRequest+0x25c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1c06:	80 91 e8 00 	lds	r24, 0x00E8
    1c0a:	87 7f       	andi	r24, 0xF7	; 247
    1c0c:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1c10:	25 db       	rcall	.-2486   	; 0x125c <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	80 91 5d 03 	lds	r24, 0x035D
    1c18:	81 11       	cpse	r24, r1
    1c1a:	91 e0       	ldi	r25, 0x01	; 1
    1c1c:	f6 01       	movw	r30, r12
    1c1e:	91 87       	std	Z+9, r25	; 0x09
    1c20:	34 c0       	rjmp	.+104    	; 0x1c8a <HID_Device_ProcessControlRequest+0x25c>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1c22:	80 91 5b 03 	lds	r24, 0x035B
    1c26:	81 32       	cpi	r24, 0x21	; 33
    1c28:	81 f5       	brne	.+96     	; 0x1c8a <HID_Device_ProcessControlRequest+0x25c>
    1c2a:	80 91 e8 00 	lds	r24, 0x00E8
    1c2e:	87 7f       	andi	r24, 0xF7	; 247
    1c30:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1c34:	13 db       	rcall	.-2522   	; 0x125c <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    1c36:	80 91 5d 03 	lds	r24, 0x035D
    1c3a:	90 91 5e 03 	lds	r25, 0x035E
    1c3e:	80 70       	andi	r24, 0x00	; 0
    1c40:	36 e0       	ldi	r19, 0x06	; 6
    1c42:	96 95       	lsr	r25
    1c44:	87 95       	ror	r24
    1c46:	3a 95       	dec	r19
    1c48:	e1 f7       	brne	.-8      	; 0x1c42 <HID_Device_ProcessControlRequest+0x214>
    1c4a:	f6 01       	movw	r30, r12
    1c4c:	95 87       	std	Z+13, r25	; 0x0d
    1c4e:	84 87       	std	Z+12, r24	; 0x0c
    1c50:	1c c0       	rjmp	.+56     	; 0x1c8a <HID_Device_ProcessControlRequest+0x25c>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1c52:	80 91 5b 03 	lds	r24, 0x035B
    1c56:	81 3a       	cpi	r24, 0xA1	; 161
    1c58:	c1 f4       	brne	.+48     	; 0x1c8a <HID_Device_ProcessControlRequest+0x25c>
    1c5a:	80 91 e8 00 	lds	r24, 0x00E8
    1c5e:	87 7f       	andi	r24, 0xF7	; 247
    1c60:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1c64:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    1c68:	80 ff       	sbrs	r24, 0
    1c6a:	fc cf       	rjmp	.-8      	; 0x1c64 <HID_Device_ProcessControlRequest+0x236>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    1c6c:	f6 01       	movw	r30, r12
    1c6e:	84 85       	ldd	r24, Z+12	; 0x0c
    1c70:	95 85       	ldd	r25, Z+13	; 0x0d
    1c72:	96 95       	lsr	r25
    1c74:	87 95       	ror	r24
    1c76:	96 95       	lsr	r25
    1c78:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1c7a:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1c7e:	80 91 e8 00 	lds	r24, 0x00E8
    1c82:	8e 77       	andi	r24, 0x7E	; 126
    1c84:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1c88:	e9 da       	rcall	.-2606   	; 0x125c <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    1c8a:	0f b6       	in	r0, 0x3f	; 63
    1c8c:	f8 94       	cli
    1c8e:	7e be       	out	0x3e, r7	; 62
    1c90:	0f be       	out	0x3f, r0	; 63
    1c92:	6d be       	out	0x3d, r6	; 61
    1c94:	0f 90       	pop	r0
    1c96:	0f 90       	pop	r0
    1c98:	0f 90       	pop	r0
    1c9a:	cf 91       	pop	r28
    1c9c:	df 91       	pop	r29
    1c9e:	1f 91       	pop	r17
    1ca0:	0f 91       	pop	r16
    1ca2:	ff 90       	pop	r15
    1ca4:	ef 90       	pop	r14
    1ca6:	df 90       	pop	r13
    1ca8:	cf 90       	pop	r12
    1caa:	bf 90       	pop	r11
    1cac:	af 90       	pop	r10
    1cae:	9f 90       	pop	r9
    1cb0:	8f 90       	pop	r8
    1cb2:	7f 90       	pop	r7
    1cb4:	6f 90       	pop	r6
    1cb6:	08 95       	ret

00001cb8 <memcmp>:
    1cb8:	fb 01       	movw	r30, r22
    1cba:	dc 01       	movw	r26, r24
    1cbc:	04 c0       	rjmp	.+8      	; 0x1cc6 <memcmp+0xe>
    1cbe:	8d 91       	ld	r24, X+
    1cc0:	01 90       	ld	r0, Z+
    1cc2:	80 19       	sub	r24, r0
    1cc4:	21 f4       	brne	.+8      	; 0x1cce <memcmp+0x16>
    1cc6:	41 50       	subi	r20, 0x01	; 1
    1cc8:	50 40       	sbci	r21, 0x00	; 0
    1cca:	c8 f7       	brcc	.-14     	; 0x1cbe <memcmp+0x6>
    1ccc:	88 1b       	sub	r24, r24
    1cce:	99 0b       	sbc	r25, r25
    1cd0:	08 95       	ret

00001cd2 <memcpy>:
    1cd2:	fb 01       	movw	r30, r22
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	02 c0       	rjmp	.+4      	; 0x1cdc <memcpy+0xa>
    1cd8:	01 90       	ld	r0, Z+
    1cda:	0d 92       	st	X+, r0
    1cdc:	41 50       	subi	r20, 0x01	; 1
    1cde:	50 40       	sbci	r21, 0x00	; 0
    1ce0:	d8 f7       	brcc	.-10     	; 0x1cd8 <memcpy+0x6>
    1ce2:	08 95       	ret

00001ce4 <memset>:
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	01 c0       	rjmp	.+2      	; 0x1cea <memset+0x6>
    1ce8:	6d 93       	st	X+, r22
    1cea:	41 50       	subi	r20, 0x01	; 1
    1cec:	50 40       	sbci	r21, 0x00	; 0
    1cee:	e0 f7       	brcc	.-8      	; 0x1ce8 <memset+0x4>
    1cf0:	08 95       	ret

00001cf2 <_exit>:
    1cf2:	f8 94       	cli

00001cf4 <__stop_program>:
    1cf4:	ff cf       	rjmp	.-2      	; 0x1cf4 <__stop_program>
