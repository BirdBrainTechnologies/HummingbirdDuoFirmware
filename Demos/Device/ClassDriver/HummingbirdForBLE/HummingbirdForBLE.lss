
HummingbirdForBLE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00002058  000020ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002058  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000255  00800110  00800110  000020fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000020fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000212c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000370  00000000  00000000  0000216c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000696f  00000000  00000000  000024dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014af  00000000  00000000  00008e4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000045e7  00000000  00000000  0000a2fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a74  00000000  00000000  0000e8e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002321  00000000  00000000  0000f358  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004541  00000000  00000000  00011679  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004e8  00000000  00000000  00015bba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b4 c0       	rjmp	.+360    	; 0x16a <__ctors_end>
       2:	00 00       	nop
       4:	ce c0       	rjmp	.+412    	; 0x1a2 <__bad_interrupt>
       6:	00 00       	nop
       8:	cc c0       	rjmp	.+408    	; 0x1a2 <__bad_interrupt>
       a:	00 00       	nop
       c:	ca c0       	rjmp	.+404    	; 0x1a2 <__bad_interrupt>
       e:	00 00       	nop
      10:	c8 c0       	rjmp	.+400    	; 0x1a2 <__bad_interrupt>
      12:	00 00       	nop
      14:	c6 c0       	rjmp	.+396    	; 0x1a2 <__bad_interrupt>
      16:	00 00       	nop
      18:	c4 c0       	rjmp	.+392    	; 0x1a2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c2 c0       	rjmp	.+388    	; 0x1a2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c0 c0       	rjmp	.+384    	; 0x1a2 <__bad_interrupt>
      22:	00 00       	nop
      24:	be c0       	rjmp	.+380    	; 0x1a2 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 d5 0b 	jmp	0x17aa	; 0x17aa <__vector_10>
      2c:	ba c0       	rjmp	.+372    	; 0x1a2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b8 c0       	rjmp	.+368    	; 0x1a2 <__bad_interrupt>
      32:	00 00       	nop
      34:	b6 c0       	rjmp	.+364    	; 0x1a2 <__bad_interrupt>
      36:	00 00       	nop
      38:	b4 c0       	rjmp	.+360    	; 0x1a2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b2 c0       	rjmp	.+356    	; 0x1a2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b0 c0       	rjmp	.+352    	; 0x1a2 <__bad_interrupt>
      42:	00 00       	nop
      44:	ae c0       	rjmp	.+348    	; 0x1a2 <__bad_interrupt>
      46:	00 00       	nop
      48:	ac c0       	rjmp	.+344    	; 0x1a2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	aa c0       	rjmp	.+340    	; 0x1a2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	a8 c0       	rjmp	.+336    	; 0x1a2 <__bad_interrupt>
      52:	00 00       	nop
      54:	8f c2       	rjmp	.+1310   	; 0x574 <__vector_21>
      56:	00 00       	nop
      58:	a4 c0       	rjmp	.+328    	; 0x1a2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	bb c1       	rjmp	.+886    	; 0x3d4 <__vector_23>
      5e:	00 00       	nop
      60:	a0 c0       	rjmp	.+320    	; 0x1a2 <__bad_interrupt>
      62:	00 00       	nop
      64:	6b c1       	rjmp	.+726    	; 0x33c <__vector_25>
      66:	00 00       	nop
      68:	9c c0       	rjmp	.+312    	; 0x1a2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	9a c0       	rjmp	.+308    	; 0x1a2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	98 c0       	rjmp	.+304    	; 0x1a2 <__bad_interrupt>
      72:	00 00       	nop
      74:	96 c0       	rjmp	.+300    	; 0x1a2 <__bad_interrupt>
      76:	00 00       	nop
      78:	94 c0       	rjmp	.+296    	; 0x1a2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	92 c0       	rjmp	.+292    	; 0x1a2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	90 c0       	rjmp	.+288    	; 0x1a2 <__bad_interrupt>
      82:	00 00       	nop
      84:	8e c0       	rjmp	.+284    	; 0x1a2 <__bad_interrupt>
      86:	00 00       	nop
      88:	8c c0       	rjmp	.+280    	; 0x1a2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8a c0       	rjmp	.+276    	; 0x1a2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	88 c0       	rjmp	.+272    	; 0x1a2 <__bad_interrupt>
      92:	00 00       	nop
      94:	86 c0       	rjmp	.+268    	; 0x1a2 <__bad_interrupt>
      96:	00 00       	nop
      98:	84 c0       	rjmp	.+264    	; 0x1a2 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	82 c0       	rjmp	.+260    	; 0x1a2 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	80 c0       	rjmp	.+256    	; 0x1a2 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	7e c0       	rjmp	.+252    	; 0x1a2 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	7c c0       	rjmp	.+248    	; 0x1a2 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	c2 0c       	add	r12, r2
      ae:	e4 0c       	add	r14, r4
      b0:	cb 0d       	add	r28, r11
      b2:	e4 0c       	add	r14, r4
      b4:	cb 0d       	add	r28, r11
      b6:	29 0d       	add	r18, r9
      b8:	4b 0d       	add	r20, r11
      ba:	cb 0d       	add	r28, r11
      bc:	9d 0d       	add	r25, r13
      be:	af 0d       	add	r26, r15

000000c0 <ProductString>:
      c0:	20 03 48 00 75 00 6d 00 6d 00 69 00 6e 00 67 00      .H.u.m.m.i.n.g.
      d0:	62 00 69 00 72 00 64 00 20 00 44 00 75 00 6f 00     b.i.r.d. .D.u.o.
      e0:	00 00                                               ..

000000e2 <ManufacturerString>:
      e2:	2e 03 42 00 69 00 72 00 64 00 42 00 72 00 61 00     ..B.i.r.d.B.r.a.
      f2:	69 00 6e 00 20 00 54 00 65 00 63 00 68 00 6e 00     i.n. .T.e.c.h.n.
     102:	6f 00 6c 00 6f 00 67 00 69 00 65 00 73 00 00 00     o.l.o.g.i.e.s...

00000112 <LanguageString>:
     112:	04 03 09 04                                         ....

00000116 <ConfigurationDescriptor>:
     116:	09 02 22 00 01 01 00 c0 fa 09 04 00 00 01 03 00     ..".............
     126:	00 00 09 21 11 01 00 01 22 20 00 07 05 81 03 08     ...!...." ......
     136:	00 01                                               ..

00000138 <DeviceDescriptor>:
     138:	12 01 10 01 00 00 00 08 54 23 22 22 00 02 01 02     ........T#""....
     148:	00 01                                               ..

0000014a <GenericReport>:
     14a:	06 00 ff 09 01 a1 01 09 02 15 00 25 ff 75 08 95     ...........%.u..
     15a:	08 81 02 09 03 15 00 25 ff 75 08 95 08 91 02 c0     .......%.u......

0000016a <__ctors_end>:
     16a:	11 24       	eor	r1, r1
     16c:	1f be       	out	0x3f, r1	; 63
     16e:	cf ef       	ldi	r28, 0xFF	; 255
     170:	da e0       	ldi	r29, 0x0A	; 10
     172:	de bf       	out	0x3e, r29	; 62
     174:	cd bf       	out	0x3d, r28	; 61

00000176 <__do_copy_data>:
     176:	11 e0       	ldi	r17, 0x01	; 1
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b1 e0       	ldi	r27, 0x01	; 1
     17c:	e8 e5       	ldi	r30, 0x58	; 88
     17e:	f0 e2       	ldi	r31, 0x20	; 32
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x10>
     182:	05 90       	lpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	a0 31       	cpi	r26, 0x10	; 16
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0xc>

0000018c <__do_clear_bss>:
     18c:	23 e0       	ldi	r18, 0x03	; 3
     18e:	a0 e1       	ldi	r26, 0x10	; 16
     190:	b1 e0       	ldi	r27, 0x01	; 1
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	a5 36       	cpi	r26, 0x65	; 101
     198:	b2 07       	cpc	r27, r18
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	47 d4       	rcall	.+2190   	; 0xa2c <main>
     19e:	0c 94 2a 10 	jmp	0x2054	; 0x2054 <_exit>

000001a2 <__bad_interrupt>:
     1a2:	2e cf       	rjmp	.-420    	; 0x0 <__vectors>

000001a4 <init_analog>:
	led_values_temp[8] = user;
}

void set_led3(unsigned int user)
{
	led_values_temp[9] = user;
     1a4:	80 e6       	ldi	r24, 0x60	; 96
     1a6:	80 93 7c 00 	sts	0x007C, r24
     1aa:	84 e8       	ldi	r24, 0x84	; 132
     1ac:	80 93 7a 00 	sts	0x007A, r24
     1b0:	10 92 7b 00 	sts	0x007B, r1
     1b4:	83 e7       	ldi	r24, 0x73	; 115
     1b6:	80 93 7e 00 	sts	0x007E, r24
     1ba:	08 95       	ret

000001bc <read_sensor>:
     1bc:	80 93 7c 00 	sts	0x007C, r24
     1c0:	80 91 7a 00 	lds	r24, 0x007A
     1c4:	80 64       	ori	r24, 0x40	; 64
     1c6:	80 93 7a 00 	sts	0x007A, r24
     1ca:	80 91 7a 00 	lds	r24, 0x007A
     1ce:	86 fd       	sbrc	r24, 6
     1d0:	fc cf       	rjmp	.-8      	; 0x1ca <read_sensor+0xe>
     1d2:	80 91 7a 00 	lds	r24, 0x007A
     1d6:	80 61       	ori	r24, 0x10	; 16
     1d8:	80 93 7a 00 	sts	0x007A, r24
     1dc:	80 91 79 00 	lds	r24, 0x0079
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	08 95       	ret

000001e4 <init_tiny_comm>:
     1e4:	84 b1       	in	r24, 0x04	; 4
     1e6:	86 61       	ori	r24, 0x16	; 22
     1e8:	84 b9       	out	0x04, r24	; 4
     1ea:	85 e5       	ldi	r24, 0x55	; 85
     1ec:	8c bd       	out	0x2c, r24	; 44
     1ee:	2c 9a       	sbi	0x05, 4	; 5
     1f0:	08 95       	ret

000001f2 <transmitByteToTiny>:
     1f2:	2c 98       	cbi	0x05, 4	; 5
     1f4:	9a e6       	ldi	r25, 0x6A	; 106
     1f6:	9a 95       	dec	r25
     1f8:	f1 f7       	brne	.-4      	; 0x1f6 <transmitByteToTiny+0x4>
     1fa:	00 c0       	rjmp	.+0      	; 0x1fc <transmitByteToTiny+0xa>
     1fc:	8e bd       	out	0x2e, r24	; 46
     1fe:	0d b4       	in	r0, 0x2d	; 45
     200:	07 fe       	sbrs	r0, 7
     202:	fd cf       	rjmp	.-6      	; 0x1fe <transmitByteToTiny+0xc>
     204:	85 ed       	ldi	r24, 0xD5	; 213
     206:	8a 95       	dec	r24
     208:	f1 f7       	brne	.-4      	; 0x206 <transmitByteToTiny+0x14>
     20a:	00 00       	nop
     20c:	2c 9a       	sbi	0x05, 4	; 5
     20e:	08 95       	ret

00000210 <turn_off_motors>:
     210:	8e ef       	ldi	r24, 0xFE	; 254
     212:	ef cf       	rjmp	.-34     	; 0x1f2 <transmitByteToTiny>

00000214 <set_motor>:
     214:	0f 93       	push	r16
     216:	1f 93       	push	r17
     218:	cf 93       	push	r28
     21a:	df 93       	push	r29
     21c:	1f 92       	push	r1
     21e:	cd b7       	in	r28, 0x3d	; 61
     220:	de b7       	in	r29, 0x3e	; 62
     222:	18 2f       	mov	r17, r24
     224:	04 2f       	mov	r16, r20
     226:	94 e0       	ldi	r25, 0x04	; 4
     228:	98 0f       	add	r25, r24
     22a:	86 2f       	mov	r24, r22
     22c:	88 0f       	add	r24, r24
     22e:	89 0f       	add	r24, r25
     230:	69 83       	std	Y+1, r22	; 0x01
     232:	df df       	rcall	.-66     	; 0x1f2 <transmitByteToTiny>
     234:	87 ec       	ldi	r24, 0xC7	; 199
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	01 97       	sbiw	r24, 0x01	; 1
     23a:	f1 f7       	brne	.-4      	; 0x238 <set_motor+0x24>
     23c:	00 c0       	rjmp	.+0      	; 0x23e <set_motor+0x2a>
     23e:	00 00       	nop
     240:	80 2f       	mov	r24, r16
     242:	d7 df       	rcall	.-82     	; 0x1f2 <transmitByteToTiny>
     244:	e1 2f       	mov	r30, r17
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	df 01       	movw	r26, r30
     24a:	aa 0f       	add	r26, r26
     24c:	bb 1f       	adc	r27, r27
     24e:	ac 5c       	subi	r26, 0xCC	; 204
     250:	be 4f       	sbci	r27, 0xFE	; 254
     252:	69 81       	ldd	r22, Y+1	; 0x01
     254:	6c 93       	st	X, r22
     256:	11 96       	adiw	r26, 0x01	; 1
     258:	0c 93       	st	X, r16
     25a:	ee 5c       	subi	r30, 0xCE	; 206
     25c:	fe 4f       	sbci	r31, 0xFE	; 254
     25e:	80 2f       	mov	r24, r16
     260:	86 95       	lsr	r24
     262:	61 11       	cpse	r22, r1
     264:	80 58       	subi	r24, 0x80	; 128
     266:	80 83       	st	Z, r24
     268:	0f 90       	pop	r0
     26a:	df 91       	pop	r29
     26c:	cf 91       	pop	r28
     26e:	1f 91       	pop	r17
     270:	0f 91       	pop	r16
     272:	08 95       	ret

00000274 <disable_servos>:
     274:	8f ef       	ldi	r24, 0xFF	; 255
     276:	bd cf       	rjmp	.-134    	; 0x1f2 <transmitByteToTiny>

00000278 <set_servo>:
     278:	cf 93       	push	r28
     27a:	df 93       	push	r29
     27c:	c8 2f       	mov	r28, r24
     27e:	d6 2f       	mov	r29, r22
     280:	b8 df       	rcall	.-144    	; 0x1f2 <transmitByteToTiny>
     282:	87 ec       	ldi	r24, 0xC7	; 199
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	01 97       	sbiw	r24, 0x01	; 1
     288:	f1 f7       	brne	.-4      	; 0x286 <set_servo+0xe>
     28a:	00 c0       	rjmp	.+0      	; 0x28c <set_servo+0x14>
     28c:	00 00       	nop
     28e:	8d 2f       	mov	r24, r29
     290:	b0 df       	rcall	.-160    	; 0x1f2 <transmitByteToTiny>
     292:	ec 2f       	mov	r30, r28
     294:	f0 e0       	ldi	r31, 0x00	; 0
     296:	e2 5d       	subi	r30, 0xD2	; 210
     298:	fe 4f       	sbci	r31, 0xFE	; 254
     29a:	d0 83       	st	Z, r29
     29c:	df 91       	pop	r29
     29e:	cf 91       	pop	r28
     2a0:	08 95       	ret

000002a2 <serial_init>:
     2a2:	82 e0       	ldi	r24, 0x02	; 2
     2a4:	80 93 c8 00 	sts	0x00C8, r24
     2a8:	88 e9       	ldi	r24, 0x98	; 152
     2aa:	80 93 c9 00 	sts	0x00C9, r24
     2ae:	86 e0       	ldi	r24, 0x06	; 6
     2b0:	80 93 ca 00 	sts	0x00CA, r24
     2b4:	10 92 56 03 	sts	0x0356, r1
     2b8:	10 92 57 03 	sts	0x0357, r1
     2bc:	8f ec       	ldi	r24, 0xCF	; 207
     2be:	80 93 cc 00 	sts	0x00CC, r24
     2c2:	08 95       	ret

000002c4 <send_char>:
     2c4:	90 91 c8 00 	lds	r25, 0x00C8
     2c8:	95 ff       	sbrs	r25, 5
     2ca:	fc cf       	rjmp	.-8      	; 0x2c4 <send_char>
     2cc:	80 93 ce 00 	sts	0x00CE, r24
     2d0:	08 95       	ret

000002d2 <received_data_available>:
     2d2:	20 91 56 03 	lds	r18, 0x0356
     2d6:	90 91 57 03 	lds	r25, 0x0357
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	29 13       	cpse	r18, r25
     2de:	01 c0       	rjmp	.+2      	; 0x2e2 <received_data_available+0x10>
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	08 95       	ret

000002e4 <send_sensors>:
     2e4:	86 e6       	ldi	r24, 0x66	; 102
     2e6:	6a df       	rcall	.-300    	; 0x1bc <read_sensor>
     2e8:	ed df       	rcall	.-38     	; 0x2c4 <send_char>
     2ea:	85 e6       	ldi	r24, 0x65	; 101
     2ec:	67 df       	rcall	.-306    	; 0x1bc <read_sensor>
     2ee:	ea df       	rcall	.-44     	; 0x2c4 <send_char>
     2f0:	84 e6       	ldi	r24, 0x64	; 100
     2f2:	64 df       	rcall	.-312    	; 0x1bc <read_sensor>
     2f4:	e7 df       	rcall	.-50     	; 0x2c4 <send_char>
     2f6:	81 e6       	ldi	r24, 0x61	; 97
     2f8:	61 df       	rcall	.-318    	; 0x1bc <read_sensor>
     2fa:	e4 df       	rcall	.-56     	; 0x2c4 <send_char>
     2fc:	80 e6       	ldi	r24, 0x60	; 96
     2fe:	5e df       	rcall	.-324    	; 0x1bc <read_sensor>
     300:	e1 cf       	rjmp	.-62     	; 0x2c4 <send_char>

00000302 <receive_char>:
     302:	a7 e5       	ldi	r26, 0x57	; 87
     304:	b3 e0       	ldi	r27, 0x03	; 3
     306:	ec 91       	ld	r30, X
     308:	f0 e0       	ldi	r31, 0x00	; 0
     30a:	ea 5a       	subi	r30, 0xAA	; 170
     30c:	fd 4f       	sbci	r31, 0xFD	; 253
     30e:	80 81       	ld	r24, Z
     310:	9c 91       	ld	r25, X
     312:	9f 5f       	subi	r25, 0xFF	; 255
     314:	9c 93       	st	X, r25
     316:	08 95       	ret

00000318 <store_received_serial_data>:
     318:	80 91 56 03 	lds	r24, 0x0356
     31c:	8f 5f       	subi	r24, 0xFF	; 255
     31e:	20 91 57 03 	lds	r18, 0x0357
     322:	90 91 ce 00 	lds	r25, 0x00CE
     326:	82 17       	cp	r24, r18
     328:	41 f0       	breq	.+16     	; 0x33a <store_received_serial_data+0x22>
     32a:	e0 91 56 03 	lds	r30, 0x0356
     32e:	f0 e0       	ldi	r31, 0x00	; 0
     330:	ea 5a       	subi	r30, 0xAA	; 170
     332:	fd 4f       	sbci	r31, 0xFD	; 253
     334:	90 83       	st	Z, r25
     336:	80 93 56 03 	sts	0x0356, r24
     33a:	08 95       	ret

0000033c <__vector_25>:
     33c:	1f 92       	push	r1
     33e:	0f 92       	push	r0
     340:	0f b6       	in	r0, 0x3f	; 63
     342:	0f 92       	push	r0
     344:	11 24       	eor	r1, r1
     346:	2f 93       	push	r18
     348:	3f 93       	push	r19
     34a:	4f 93       	push	r20
     34c:	5f 93       	push	r21
     34e:	6f 93       	push	r22
     350:	7f 93       	push	r23
     352:	8f 93       	push	r24
     354:	9f 93       	push	r25
     356:	af 93       	push	r26
     358:	bf 93       	push	r27
     35a:	ef 93       	push	r30
     35c:	ff 93       	push	r31
     35e:	dc df       	rcall	.-72     	; 0x318 <store_received_serial_data>
     360:	ff 91       	pop	r31
     362:	ef 91       	pop	r30
     364:	bf 91       	pop	r27
     366:	af 91       	pop	r26
     368:	9f 91       	pop	r25
     36a:	8f 91       	pop	r24
     36c:	7f 91       	pop	r23
     36e:	6f 91       	pop	r22
     370:	5f 91       	pop	r21
     372:	4f 91       	pop	r20
     374:	3f 91       	pop	r19
     376:	2f 91       	pop	r18
     378:	0f 90       	pop	r0
     37a:	0f be       	out	0x3f, r0	; 63
     37c:	0f 90       	pop	r0
     37e:	1f 90       	pop	r1
     380:	18 95       	reti

00000382 <set_vibration_motor>:
     382:	26 2f       	mov	r18, r22
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	80 33       	cpi	r24, 0x30	; 48
     388:	39 f4       	brne	.+14     	; 0x398 <set_vibration_motor+0x16>
     38a:	30 93 89 00 	sts	0x0089, r19
     38e:	20 93 88 00 	sts	0x0088, r18
     392:	60 93 2c 01 	sts	0x012C, r22
     396:	08 95       	ret
     398:	30 93 8b 00 	sts	0x008B, r19
     39c:	20 93 8a 00 	sts	0x008A, r18
     3a0:	60 93 2d 01 	sts	0x012D, r22
     3a4:	08 95       	ret

000003a6 <disable_vibration_motors>:
     3a6:	10 92 89 00 	sts	0x0089, r1
     3aa:	10 92 88 00 	sts	0x0088, r1
     3ae:	10 92 8b 00 	sts	0x008B, r1
     3b2:	10 92 8a 00 	sts	0x008A, r1
     3b6:	ec e2       	ldi	r30, 0x2C	; 44
     3b8:	f1 e0       	ldi	r31, 0x01	; 1
     3ba:	10 82       	st	Z, r1
     3bc:	11 82       	std	Z+1, r1	; 0x01
     3be:	08 95       	ret

000003c0 <init_vbr>:
     3c0:	81 ea       	ldi	r24, 0xA1	; 161
     3c2:	80 93 80 00 	sts	0x0080, r24
     3c6:	89 e0       	ldi	r24, 0x09	; 9
     3c8:	80 93 81 00 	sts	0x0081, r24
     3cc:	84 b1       	in	r24, 0x04	; 4
     3ce:	80 66       	ori	r24, 0x60	; 96
     3d0:	84 b9       	out	0x04, r24	; 4
     3d2:	e9 cf       	rjmp	.-46     	; 0x3a6 <disable_vibration_motors>

000003d4 <__vector_23>:
     3d4:	1f 92       	push	r1
     3d6:	0f 92       	push	r0
     3d8:	0f b6       	in	r0, 0x3f	; 63
     3da:	0f 92       	push	r0
     3dc:	11 24       	eor	r1, r1
     3de:	8f 93       	push	r24
     3e0:	9f 93       	push	r25
     3e2:	af 93       	push	r26
     3e4:	bf 93       	push	r27
     3e6:	cf 93       	push	r28
     3e8:	df 93       	push	r29
     3ea:	ef 93       	push	r30
     3ec:	ff 93       	push	r31
     3ee:	80 91 14 01 	lds	r24, 0x0114
     3f2:	81 11       	cpse	r24, r1
     3f4:	24 c0       	rjmp	.+72     	; 0x43e <__vector_23+0x6a>
     3f6:	80 91 13 01 	lds	r24, 0x0113
     3fa:	85 31       	cpi	r24, 0x15	; 21
     3fc:	18 f0       	brcs	.+6      	; 0x404 <__vector_23+0x30>
     3fe:	80 93 20 01 	sts	0x0120, r24
     402:	02 c0       	rjmp	.+4      	; 0x408 <__vector_23+0x34>
     404:	10 92 20 01 	sts	0x0120, r1
     408:	90 91 12 01 	lds	r25, 0x0112
     40c:	91 11       	cpse	r25, r1
     40e:	02 c0       	rjmp	.+4      	; 0x414 <__vector_23+0x40>
     410:	8f 5f       	subi	r24, 0xFF	; 255
     412:	01 c0       	rjmp	.+2      	; 0x416 <__vector_23+0x42>
     414:	81 50       	subi	r24, 0x01	; 1
     416:	80 93 13 01 	sts	0x0113, r24
     41a:	80 91 13 01 	lds	r24, 0x0113
     41e:	8e 3f       	cpi	r24, 0xFE	; 254
     420:	20 f0       	brcs	.+8      	; 0x42a <__vector_23+0x56>
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	80 93 12 01 	sts	0x0112, r24
     428:	04 c0       	rjmp	.+8      	; 0x432 <__vector_23+0x5e>
     42a:	83 30       	cpi	r24, 0x03	; 3
     42c:	10 f4       	brcc	.+4      	; 0x432 <__vector_23+0x5e>
     42e:	10 92 12 01 	sts	0x0112, r1
     432:	a6 e1       	ldi	r26, 0x16	; 22
     434:	b1 e0       	ldi	r27, 0x01	; 1
     436:	e1 e2       	ldi	r30, 0x21	; 33
     438:	f1 e0       	ldi	r31, 0x01	; 1
     43a:	ef 01       	movw	r28, r30
     43c:	06 c0       	rjmp	.+12     	; 0x44a <__vector_23+0x76>
     43e:	81 30       	cpi	r24, 0x01	; 1
     440:	c1 f7       	brne	.-16     	; 0x432 <__vector_23+0x5e>
     442:	8f ef       	ldi	r24, 0xFF	; 255
     444:	80 93 20 01 	sts	0x0120, r24
     448:	f4 cf       	rjmp	.-24     	; 0x432 <__vector_23+0x5e>
     44a:	8d 91       	ld	r24, X+
     44c:	89 93       	st	Y+, r24
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	a1 32       	cpi	r26, 0x21	; 33
     452:	b8 07       	cpc	r27, r24
     454:	d1 f7       	brne	.-12     	; 0x44a <__vector_23+0x76>
     456:	80 91 21 01 	lds	r24, 0x0121
     45a:	88 23       	and	r24, r24
     45c:	11 f0       	breq	.+4      	; 0x462 <__vector_23+0x8e>
     45e:	76 9a       	sbi	0x0e, 6	; 14
     460:	04 c0       	rjmp	.+8      	; 0x46a <__vector_23+0x96>
     462:	76 98       	cbi	0x0e, 6	; 14
     464:	8f ef       	ldi	r24, 0xFF	; 255
     466:	80 93 21 01 	sts	0x0121, r24
     46a:	80 91 22 01 	lds	r24, 0x0122
     46e:	88 23       	and	r24, r24
     470:	11 f0       	breq	.+4      	; 0x476 <__vector_23+0xa2>
     472:	5c 9a       	sbi	0x0b, 4	; 11
     474:	04 c0       	rjmp	.+8      	; 0x47e <__vector_23+0xaa>
     476:	5c 98       	cbi	0x0b, 4	; 11
     478:	8f ef       	ldi	r24, 0xFF	; 255
     47a:	80 93 22 01 	sts	0x0122, r24
     47e:	80 91 23 01 	lds	r24, 0x0123
     482:	88 23       	and	r24, r24
     484:	11 f0       	breq	.+4      	; 0x48a <__vector_23+0xb6>
     486:	5e 9a       	sbi	0x0b, 6	; 11
     488:	04 c0       	rjmp	.+8      	; 0x492 <__vector_23+0xbe>
     48a:	5e 98       	cbi	0x0b, 6	; 11
     48c:	8f ef       	ldi	r24, 0xFF	; 255
     48e:	80 93 23 01 	sts	0x0123, r24
     492:	80 91 24 01 	lds	r24, 0x0124
     496:	88 23       	and	r24, r24
     498:	11 f0       	breq	.+4      	; 0x49e <__vector_23+0xca>
     49a:	46 9a       	sbi	0x08, 6	; 8
     49c:	04 c0       	rjmp	.+8      	; 0x4a6 <__vector_23+0xd2>
     49e:	46 98       	cbi	0x08, 6	; 8
     4a0:	8f ef       	ldi	r24, 0xFF	; 255
     4a2:	80 93 24 01 	sts	0x0124, r24
     4a6:	80 91 25 01 	lds	r24, 0x0125
     4aa:	88 23       	and	r24, r24
     4ac:	11 f0       	breq	.+4      	; 0x4b2 <__vector_23+0xde>
     4ae:	5f 9a       	sbi	0x0b, 7	; 11
     4b0:	04 c0       	rjmp	.+8      	; 0x4ba <__vector_23+0xe6>
     4b2:	5f 98       	cbi	0x0b, 7	; 11
     4b4:	8f ef       	ldi	r24, 0xFF	; 255
     4b6:	80 93 25 01 	sts	0x0125, r24
     4ba:	80 91 26 01 	lds	r24, 0x0126
     4be:	88 23       	and	r24, r24
     4c0:	11 f0       	breq	.+4      	; 0x4c6 <__vector_23+0xf2>
     4c2:	2f 9a       	sbi	0x05, 7	; 5
     4c4:	04 c0       	rjmp	.+8      	; 0x4ce <__vector_23+0xfa>
     4c6:	2f 98       	cbi	0x05, 7	; 5
     4c8:	8f ef       	ldi	r24, 0xFF	; 255
     4ca:	80 93 26 01 	sts	0x0126, r24
     4ce:	80 91 27 01 	lds	r24, 0x0127
     4d2:	88 23       	and	r24, r24
     4d4:	11 f0       	breq	.+4      	; 0x4da <__vector_23+0x106>
     4d6:	58 9a       	sbi	0x0b, 0	; 11
     4d8:	04 c0       	rjmp	.+8      	; 0x4e2 <__vector_23+0x10e>
     4da:	58 98       	cbi	0x0b, 0	; 11
     4dc:	8f ef       	ldi	r24, 0xFF	; 255
     4de:	80 93 27 01 	sts	0x0127, r24
     4e2:	80 91 28 01 	lds	r24, 0x0128
     4e6:	88 23       	and	r24, r24
     4e8:	11 f0       	breq	.+4      	; 0x4ee <__vector_23+0x11a>
     4ea:	59 9a       	sbi	0x0b, 1	; 11
     4ec:	04 c0       	rjmp	.+8      	; 0x4f6 <__vector_23+0x122>
     4ee:	59 98       	cbi	0x0b, 1	; 11
     4f0:	8f ef       	ldi	r24, 0xFF	; 255
     4f2:	80 93 28 01 	sts	0x0128, r24
     4f6:	80 91 29 01 	lds	r24, 0x0129
     4fa:	88 23       	and	r24, r24
     4fc:	11 f0       	breq	.+4      	; 0x502 <__vector_23+0x12e>
     4fe:	72 9a       	sbi	0x0e, 2	; 14
     500:	04 c0       	rjmp	.+8      	; 0x50a <__vector_23+0x136>
     502:	72 98       	cbi	0x0e, 2	; 14
     504:	8f ef       	ldi	r24, 0xFF	; 255
     506:	80 93 29 01 	sts	0x0129, r24
     50a:	80 91 2a 01 	lds	r24, 0x012A
     50e:	88 23       	and	r24, r24
     510:	11 f0       	breq	.+4      	; 0x516 <__vector_23+0x142>
     512:	8f 9a       	sbi	0x11, 7	; 17
     514:	04 c0       	rjmp	.+8      	; 0x51e <__vector_23+0x14a>
     516:	8f 98       	cbi	0x11, 7	; 17
     518:	8f ef       	ldi	r24, 0xFF	; 255
     51a:	80 93 2a 01 	sts	0x012A, r24
     51e:	80 91 2b 01 	lds	r24, 0x012B
     522:	88 23       	and	r24, r24
     524:	11 f0       	breq	.+4      	; 0x52a <__vector_23+0x156>
     526:	47 9a       	sbi	0x08, 7	; 8
     528:	04 c0       	rjmp	.+8      	; 0x532 <__vector_23+0x15e>
     52a:	47 98       	cbi	0x08, 7	; 8
     52c:	8f ef       	ldi	r24, 0xFF	; 255
     52e:	80 93 2b 01 	sts	0x012B, r24
     532:	80 91 15 01 	lds	r24, 0x0115
     536:	91 91       	ld	r25, Z+
     538:	98 17       	cp	r25, r24
     53a:	08 f4       	brcc	.+2      	; 0x53e <__vector_23+0x16a>
     53c:	89 2f       	mov	r24, r25
     53e:	91 e0       	ldi	r25, 0x01	; 1
     540:	ec 32       	cpi	r30, 0x2C	; 44
     542:	f9 07       	cpc	r31, r25
     544:	c1 f7       	brne	.-16     	; 0x536 <__vector_23+0x162>
     546:	80 93 15 01 	sts	0x0115, r24
     54a:	87 bd       	out	0x27, r24	; 39
     54c:	90 91 10 01 	lds	r25, 0x0110
     550:	80 91 11 01 	lds	r24, 0x0111
     554:	89 0f       	add	r24, r25
     556:	80 93 10 01 	sts	0x0110, r24
     55a:	ff 91       	pop	r31
     55c:	ef 91       	pop	r30
     55e:	df 91       	pop	r29
     560:	cf 91       	pop	r28
     562:	bf 91       	pop	r27
     564:	af 91       	pop	r26
     566:	9f 91       	pop	r25
     568:	8f 91       	pop	r24
     56a:	0f 90       	pop	r0
     56c:	0f be       	out	0x3f, r0	; 63
     56e:	0f 90       	pop	r0
     570:	1f 90       	pop	r1
     572:	18 95       	reti

00000574 <__vector_21>:
     574:	1f 92       	push	r1
     576:	0f 92       	push	r0
     578:	0f b6       	in	r0, 0x3f	; 63
     57a:	0f 92       	push	r0
     57c:	11 24       	eor	r1, r1
     57e:	8f 93       	push	r24
     580:	9f 93       	push	r25
     582:	ef 93       	push	r30
     584:	ff 93       	push	r31
     586:	80 91 15 01 	lds	r24, 0x0115
     58a:	8f 3f       	cpi	r24, 0xFF	; 255
     58c:	09 f4       	brne	.+2      	; 0x590 <__vector_21+0x1c>
     58e:	7a c0       	rjmp	.+244    	; 0x684 <__vector_21+0x110>
     590:	90 91 21 01 	lds	r25, 0x0121
     594:	98 13       	cpse	r25, r24
     596:	04 c0       	rjmp	.+8      	; 0x5a0 <__vector_21+0x2c>
     598:	76 98       	cbi	0x0e, 6	; 14
     59a:	8f ef       	ldi	r24, 0xFF	; 255
     59c:	80 93 21 01 	sts	0x0121, r24
     5a0:	90 91 22 01 	lds	r25, 0x0122
     5a4:	80 91 15 01 	lds	r24, 0x0115
     5a8:	98 13       	cpse	r25, r24
     5aa:	04 c0       	rjmp	.+8      	; 0x5b4 <__vector_21+0x40>
     5ac:	5c 98       	cbi	0x0b, 4	; 11
     5ae:	8f ef       	ldi	r24, 0xFF	; 255
     5b0:	80 93 22 01 	sts	0x0122, r24
     5b4:	90 91 23 01 	lds	r25, 0x0123
     5b8:	80 91 15 01 	lds	r24, 0x0115
     5bc:	98 13       	cpse	r25, r24
     5be:	04 c0       	rjmp	.+8      	; 0x5c8 <__vector_21+0x54>
     5c0:	5e 98       	cbi	0x0b, 6	; 11
     5c2:	8f ef       	ldi	r24, 0xFF	; 255
     5c4:	80 93 23 01 	sts	0x0123, r24
     5c8:	90 91 24 01 	lds	r25, 0x0124
     5cc:	80 91 15 01 	lds	r24, 0x0115
     5d0:	98 13       	cpse	r25, r24
     5d2:	04 c0       	rjmp	.+8      	; 0x5dc <__vector_21+0x68>
     5d4:	46 98       	cbi	0x08, 6	; 8
     5d6:	8f ef       	ldi	r24, 0xFF	; 255
     5d8:	80 93 24 01 	sts	0x0124, r24
     5dc:	90 91 25 01 	lds	r25, 0x0125
     5e0:	80 91 15 01 	lds	r24, 0x0115
     5e4:	98 13       	cpse	r25, r24
     5e6:	04 c0       	rjmp	.+8      	; 0x5f0 <__vector_21+0x7c>
     5e8:	5f 98       	cbi	0x0b, 7	; 11
     5ea:	8f ef       	ldi	r24, 0xFF	; 255
     5ec:	80 93 25 01 	sts	0x0125, r24
     5f0:	90 91 26 01 	lds	r25, 0x0126
     5f4:	80 91 15 01 	lds	r24, 0x0115
     5f8:	98 13       	cpse	r25, r24
     5fa:	04 c0       	rjmp	.+8      	; 0x604 <__vector_21+0x90>
     5fc:	2f 98       	cbi	0x05, 7	; 5
     5fe:	8f ef       	ldi	r24, 0xFF	; 255
     600:	80 93 26 01 	sts	0x0126, r24
     604:	90 91 27 01 	lds	r25, 0x0127
     608:	80 91 15 01 	lds	r24, 0x0115
     60c:	98 13       	cpse	r25, r24
     60e:	04 c0       	rjmp	.+8      	; 0x618 <__vector_21+0xa4>
     610:	58 98       	cbi	0x0b, 0	; 11
     612:	8f ef       	ldi	r24, 0xFF	; 255
     614:	80 93 27 01 	sts	0x0127, r24
     618:	90 91 28 01 	lds	r25, 0x0128
     61c:	80 91 15 01 	lds	r24, 0x0115
     620:	98 13       	cpse	r25, r24
     622:	04 c0       	rjmp	.+8      	; 0x62c <__vector_21+0xb8>
     624:	59 98       	cbi	0x0b, 1	; 11
     626:	8f ef       	ldi	r24, 0xFF	; 255
     628:	80 93 28 01 	sts	0x0128, r24
     62c:	90 91 29 01 	lds	r25, 0x0129
     630:	80 91 15 01 	lds	r24, 0x0115
     634:	98 13       	cpse	r25, r24
     636:	04 c0       	rjmp	.+8      	; 0x640 <__vector_21+0xcc>
     638:	72 98       	cbi	0x0e, 2	; 14
     63a:	8f ef       	ldi	r24, 0xFF	; 255
     63c:	80 93 29 01 	sts	0x0129, r24
     640:	90 91 2a 01 	lds	r25, 0x012A
     644:	80 91 15 01 	lds	r24, 0x0115
     648:	98 13       	cpse	r25, r24
     64a:	04 c0       	rjmp	.+8      	; 0x654 <__vector_21+0xe0>
     64c:	8f 98       	cbi	0x11, 7	; 17
     64e:	8f ef       	ldi	r24, 0xFF	; 255
     650:	80 93 2a 01 	sts	0x012A, r24
     654:	90 91 2b 01 	lds	r25, 0x012B
     658:	80 91 15 01 	lds	r24, 0x0115
     65c:	98 13       	cpse	r25, r24
     65e:	04 c0       	rjmp	.+8      	; 0x668 <__vector_21+0xf4>
     660:	47 98       	cbi	0x08, 7	; 8
     662:	8f ef       	ldi	r24, 0xFF	; 255
     664:	80 93 2b 01 	sts	0x012B, r24
     668:	e1 e2       	ldi	r30, 0x21	; 33
     66a:	f1 e0       	ldi	r31, 0x01	; 1
     66c:	8f ef       	ldi	r24, 0xFF	; 255
     66e:	91 91       	ld	r25, Z+
     670:	98 17       	cp	r25, r24
     672:	08 f4       	brcc	.+2      	; 0x676 <__vector_21+0x102>
     674:	89 2f       	mov	r24, r25
     676:	91 e0       	ldi	r25, 0x01	; 1
     678:	ec 32       	cpi	r30, 0x2C	; 44
     67a:	f9 07       	cpc	r31, r25
     67c:	c1 f7       	brne	.-16     	; 0x66e <__vector_21+0xfa>
     67e:	80 93 15 01 	sts	0x0115, r24
     682:	87 bd       	out	0x27, r24	; 39
     684:	ff 91       	pop	r31
     686:	ef 91       	pop	r30
     688:	9f 91       	pop	r25
     68a:	8f 91       	pop	r24
     68c:	0f 90       	pop	r0
     68e:	0f be       	out	0x3f, r0	; 63
     690:	0f 90       	pop	r0
     692:	1f 90       	pop	r1
     694:	18 95       	reti

00000696 <init_orb>:
     696:	14 bc       	out	0x24, r1	; 36
     698:	84 e0       	ldi	r24, 0x04	; 4
     69a:	85 bd       	out	0x25, r24	; 37
     69c:	83 e0       	ldi	r24, 0x03	; 3
     69e:	80 93 6e 00 	sts	0x006E, r24
     6a2:	27 9a       	sbi	0x04, 7	; 4
     6a4:	87 b1       	in	r24, 0x07	; 7
     6a6:	80 6c       	ori	r24, 0xC0	; 192
     6a8:	87 b9       	out	0x07, r24	; 7
     6aa:	8a b1       	in	r24, 0x0a	; 10
     6ac:	83 6d       	ori	r24, 0xD3	; 211
     6ae:	8a b9       	out	0x0a, r24	; 10
     6b0:	8d b1       	in	r24, 0x0d	; 13
     6b2:	84 64       	ori	r24, 0x44	; 68
     6b4:	8d b9       	out	0x0d, r24	; 13
     6b6:	87 9a       	sbi	0x10, 7	; 16
     6b8:	08 95       	ret

000006ba <set_orb>:
     6ba:	81 33       	cpi	r24, 0x31	; 49
     6bc:	39 f4       	brne	.+14     	; 0x6cc <set_orb+0x12>
     6be:	60 93 19 01 	sts	0x0119, r22
     6c2:	40 93 1a 01 	sts	0x011A, r20
     6c6:	20 93 1b 01 	sts	0x011B, r18
     6ca:	08 95       	ret
     6cc:	60 93 16 01 	sts	0x0116, r22
     6d0:	40 93 17 01 	sts	0x0117, r20
     6d4:	20 93 18 01 	sts	0x0118, r18
     6d8:	08 95       	ret

000006da <set_led>:
     6da:	81 33       	cpi	r24, 0x31	; 49
     6dc:	61 f0       	breq	.+24     	; 0x6f6 <set_led+0x1c>
     6de:	18 f4       	brcc	.+6      	; 0x6e6 <set_led+0xc>
     6e0:	80 33       	cpi	r24, 0x30	; 48
     6e2:	31 f0       	breq	.+12     	; 0x6f0 <set_led+0x16>
     6e4:	08 95       	ret
     6e6:	82 33       	cpi	r24, 0x32	; 50
     6e8:	49 f0       	breq	.+18     	; 0x6fc <set_led+0x22>
     6ea:	83 33       	cpi	r24, 0x33	; 51
     6ec:	51 f0       	breq	.+20     	; 0x702 <set_led+0x28>
     6ee:	08 95       	ret
     6f0:	60 93 1c 01 	sts	0x011C, r22
     6f4:	08 95       	ret
     6f6:	60 93 1d 01 	sts	0x011D, r22
     6fa:	08 95       	ret
     6fc:	60 93 1e 01 	sts	0x011E, r22
     700:	08 95       	ret
     702:	60 93 1f 01 	sts	0x011F, r22
     706:	08 95       	ret

00000708 <turn_off_leds>:
}

// Sets the red, green and blue elements of the first LED with 8-bit resolution
void set_orb0(unsigned int red_led, unsigned int green_led, unsigned int blue_led)
{
	led_values_temp[0] = red_led;
     708:	e6 e1       	ldi	r30, 0x16	; 22
     70a:	f1 e0       	ldi	r31, 0x01	; 1
     70c:	10 82       	st	Z, r1
	led_values_temp[1] = green_led;
     70e:	11 82       	std	Z+1, r1	; 0x01
	led_values_temp[2] = blue_led;
     710:	12 82       	std	Z+2, r1	; 0x02
}

// Sets the red, green and blue elements of the second LED with 8-bit resolution
void set_orb1(unsigned int red_led, unsigned int green_led, unsigned int blue_led)
{
	led_values_temp[3] = red_led;
     712:	13 82       	std	Z+3, r1	; 0x03
	led_values_temp[4] = green_led;
     714:	14 82       	std	Z+4, r1	; 0x04
	led_values_temp[5] = blue_led;
     716:	15 82       	std	Z+5, r1	; 0x05
	}
}

void set_led0(unsigned int user)
{
	led_values_temp[6] = user;
     718:	16 82       	std	Z+6, r1	; 0x06
}

void set_led1(unsigned int user)
{
	led_values_temp[7] = user;
     71a:	17 82       	std	Z+7, r1	; 0x07
}

void set_led2(unsigned int user)
{
	led_values_temp[8] = user;
     71c:	10 86       	std	Z+8, r1	; 0x08
}

void set_led3(unsigned int user)
{
	led_values_temp[9] = user;
     71e:	11 86       	std	Z+9, r1	; 0x09
     720:	08 95       	ret

00000722 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     722:	84 b7       	in	r24, 0x34	; 52
     724:	87 7f       	andi	r24, 0xF7	; 247
     726:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     728:	0f b6       	in	r0, 0x3f	; 63
     72a:	f8 94       	cli
     72c:	a8 95       	wdr
     72e:	80 91 60 00 	lds	r24, 0x0060
     732:	88 61       	ori	r24, 0x18	; 24
     734:	80 93 60 00 	sts	0x0060, r24
     738:	10 92 60 00 	sts	0x0060, r1
     73c:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	80 e8       	ldi	r24, 0x80	; 128
     742:	0f b6       	in	r0, 0x3f	; 63
     744:	f8 94       	cli
     746:	80 93 61 00 	sts	0x0061, r24
     74a:	90 93 61 00 	sts	0x0061, r25
     74e:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRB  |=  LEDS_PORTB_LEDS;
     750:	20 9a       	sbi	0x04, 0	; 4
				PORTB |=  LEDS_PORTB_LEDS;
     752:	28 9a       	sbi	0x05, 0	; 5
				DDRD  |=  LEDS_PORTD_LEDS;
     754:	55 9a       	sbi	0x0a, 5	; 10
				PORTD |=  LEDS_PORTD_LEDS;
     756:	5d 9a       	sbi	0x0b, 5	; 11
				DDRC  |=  LEDS_PORTC_LEDS;
     758:	3f 9a       	sbi	0x07, 7	; 7
				PORTC &= ~LEDS_PORTC_LEDS;
     75a:	47 98       	cbi	0x08, 7	; 8
	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	LEDs_Init();
	init_analog();
     75c:	23 dd       	rcall	.-1466   	; 0x1a4 <init_analog>
	init_orb();
     75e:	9b df       	rcall	.-202    	; 0x696 <init_orb>
	init_vbr();
     760:	2f de       	rcall	.-930    	; 0x3c0 <init_vbr>
	init_tiny_comm();
     762:	40 dd       	rcall	.-1408   	; 0x1e4 <init_tiny_comm>
	serial_init();
     764:	9e dd       	rcall	.-1220   	; 0x2a2 <serial_init>
	USB_Init();
     766:	0c 94 b8 0b 	jmp	0x1770	; 0x1770 <USB_Init>

0000076a <init_BLE_name>:
ATZ
OK
*/

void init_BLE_name(void)
{
     76a:	af 92       	push	r10
     76c:	bf 92       	push	r11
     76e:	cf 92       	push	r12
     770:	df 92       	push	r13
     772:	ef 92       	push	r14
     774:	ff 92       	push	r15
     776:	0f 93       	push	r16
     778:	1f 93       	push	r17
     77a:	cf 93       	push	r28
     77c:	df 93       	push	r29
     77e:	cd b7       	in	r28, 0x3d	; 61
     780:	de b7       	in	r29, 0x3e	; 62
     782:	69 97       	sbiw	r28, 0x19	; 25
     784:	0f b6       	in	r0, 0x3f	; 63
     786:	f8 94       	cli
     788:	de bf       	out	0x3e, r29	; 62
     78a:	0f be       	out	0x3f, r0	; 63
     78c:	cd bf       	out	0x3d, r28	; 61
	uint16_t i = 0; 
	uint16_t j = 0;
	int check_ok = 0;
	
	// Put module in command mode
	send_char('+');
     78e:	8b e2       	ldi	r24, 0x2B	; 43
     790:	99 dd       	rcall	.-1230   	; 0x2c4 <send_char>
	send_char('+');
     792:	8b e2       	ldi	r24, 0x2B	; 43
     794:	97 dd       	rcall	.-1234   	; 0x2c4 <send_char>
	send_char('+');
     796:	8b e2       	ldi	r24, 0x2B	; 43
     798:	95 dd       	rcall	.-1238   	; 0x2c4 <send_char>
	send_char('\n');
     79a:	8a e0       	ldi	r24, 0x0A	; 10
     79c:	93 dd       	rcall	.-1242   	; 0x2c4 <send_char>
	
	// Get OK back, maybe with \n (theoretically)
	while(!received_data_available() && i < 300)
     79e:	0d e2       	ldi	r16, 0x2D	; 45
     7a0:	11 e0       	ldi	r17, 0x01	; 1
     7a2:	97 dd       	rcall	.-1234   	; 0x2d2 <received_data_available>
     7a4:	81 11       	cpse	r24, r1
     7a6:	0a c0       	rjmp	.+20     	; 0x7bc <init_BLE_name+0x52>
     7a8:	01 50       	subi	r16, 0x01	; 1
     7aa:	11 09       	sbc	r17, r1
     7ac:	39 f0       	breq	.+14     	; 0x7bc <init_BLE_name+0x52>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7ae:	8f e9       	ldi	r24, 0x9F	; 159
     7b0:	9f e0       	ldi	r25, 0x0F	; 15
     7b2:	01 97       	sbiw	r24, 0x01	; 1
     7b4:	f1 f7       	brne	.-4      	; 0x7b2 <init_BLE_name+0x48>
     7b6:	00 c0       	rjmp	.+0      	; 0x7b8 <init_BLE_name+0x4e>
     7b8:	00 00       	nop
     7ba:	f3 cf       	rjmp	.-26     	; 0x7a2 <init_BLE_name+0x38>
     7bc:	fe 01       	movw	r30, r28
     7be:	31 96       	adiw	r30, 0x01	; 1
     7c0:	7f 01       	movw	r14, r30
			check_ok++;
		
		i++;
		_delay_ms(1);
		j=0;
		while(!received_data_available() && j < 300)
     7c2:	5f 01       	movw	r10, r30
     7c4:	00 e0       	ldi	r16, 0x00	; 0
     7c6:	10 e0       	ldi	r17, 0x00	; 0
	{
		i++;
		_delay_ms(1);
	}
	i=0;
	while(received_data_available())
     7c8:	84 dd       	rcall	.-1272   	; 0x2d2 <received_data_available>
     7ca:	88 23       	and	r24, r24
     7cc:	41 f1       	breq	.+80     	; 0x81e <init_BLE_name+0xb4>
	{
		response[i] = receive_char();
     7ce:	99 dd       	rcall	.-1230   	; 0x302 <receive_char>
     7d0:	f5 01       	movw	r30, r10
     7d2:	81 93       	st	Z+, r24
     7d4:	5f 01       	movw	r10, r30
		// Check for OK, need to do it this way since different BLE firmware versions put it in different places of the response string
		if(response[i] == 'O')
     7d6:	8f 34       	cpi	r24, 0x4F	; 79
     7d8:	19 f4       	brne	.+6      	; 0x7e0 <init_BLE_name+0x76>
			check_ok++;
     7da:	0f 5f       	subi	r16, 0xFF	; 255
     7dc:	1f 4f       	sbci	r17, 0xFF	; 255
     7de:	07 c0       	rjmp	.+14     	; 0x7ee <init_BLE_name+0x84>
		if(response[i] == 'K' && check_ok == 1)
     7e0:	8b 34       	cpi	r24, 0x4B	; 75
     7e2:	29 f4       	brne	.+10     	; 0x7ee <init_BLE_name+0x84>
     7e4:	01 30       	cpi	r16, 0x01	; 1
     7e6:	11 05       	cpc	r17, r1
     7e8:	11 f4       	brne	.+4      	; 0x7ee <init_BLE_name+0x84>
			check_ok++;
     7ea:	02 e0       	ldi	r16, 0x02	; 2
     7ec:	10 e0       	ldi	r17, 0x00	; 0
     7ee:	8f e9       	ldi	r24, 0x9F	; 159
     7f0:	9f e0       	ldi	r25, 0x0F	; 15
     7f2:	01 97       	sbiw	r24, 0x01	; 1
     7f4:	f1 f7       	brne	.-4      	; 0x7f2 <init_BLE_name+0x88>
     7f6:	00 c0       	rjmp	.+0      	; 0x7f8 <init_BLE_name+0x8e>
     7f8:	00 00       	nop
		
		i++;
		_delay_ms(1);
		j=0;
		while(!received_data_available() && j < 300)
     7fa:	9d e2       	ldi	r25, 0x2D	; 45
     7fc:	c9 2e       	mov	r12, r25
     7fe:	dd 24       	eor	r13, r13
     800:	d3 94       	inc	r13
     802:	67 dd       	rcall	.-1330   	; 0x2d2 <received_data_available>
     804:	81 11       	cpse	r24, r1
     806:	e0 cf       	rjmp	.-64     	; 0x7c8 <init_BLE_name+0x5e>
     808:	f1 e0       	ldi	r31, 0x01	; 1
     80a:	cf 1a       	sub	r12, r31
     80c:	d1 08       	sbc	r13, r1
     80e:	e1 f2       	breq	.-72     	; 0x7c8 <init_BLE_name+0x5e>
     810:	ef e9       	ldi	r30, 0x9F	; 159
     812:	ff e0       	ldi	r31, 0x0F	; 15
     814:	31 97       	sbiw	r30, 0x01	; 1
     816:	f1 f7       	brne	.-4      	; 0x814 <init_BLE_name+0xaa>
     818:	00 c0       	rjmp	.+0      	; 0x81a <init_BLE_name+0xb0>
     81a:	00 00       	nop
     81c:	f2 cf       	rjmp	.-28     	; 0x802 <init_BLE_name+0x98>
			j++;
			_delay_ms(1);
		}
	}
	// If we don't get an OK back, then probably no module is plugged in, so we should exit the function
	if(check_ok == 2)
     81e:	02 30       	cpi	r16, 0x02	; 2
     820:	11 05       	cpc	r17, r1
     822:	09 f0       	breq	.+2      	; 0x826 <init_BLE_name+0xbc>
     824:	f2 c0       	rjmp	.+484    	; 0xa0a <init_BLE_name+0x2a0>
	{
		// send AT+BLEGETADDR
		send_char('A');
     826:	81 e4       	ldi	r24, 0x41	; 65
     828:	4d dd       	rcall	.-1382   	; 0x2c4 <send_char>
		send_char('T');
     82a:	84 e5       	ldi	r24, 0x54	; 84
     82c:	4b dd       	rcall	.-1386   	; 0x2c4 <send_char>
		send_char('+');
     82e:	8b e2       	ldi	r24, 0x2B	; 43
     830:	49 dd       	rcall	.-1390   	; 0x2c4 <send_char>
		send_char('B');
     832:	82 e4       	ldi	r24, 0x42	; 66
     834:	47 dd       	rcall	.-1394   	; 0x2c4 <send_char>
		send_char('L');
     836:	8c e4       	ldi	r24, 0x4C	; 76
     838:	45 dd       	rcall	.-1398   	; 0x2c4 <send_char>
		send_char('E');
     83a:	85 e4       	ldi	r24, 0x45	; 69
     83c:	43 dd       	rcall	.-1402   	; 0x2c4 <send_char>
		send_char('G');
     83e:	87 e4       	ldi	r24, 0x47	; 71
     840:	41 dd       	rcall	.-1406   	; 0x2c4 <send_char>
		send_char('E');
     842:	85 e4       	ldi	r24, 0x45	; 69
     844:	3f dd       	rcall	.-1410   	; 0x2c4 <send_char>
		send_char('T');
     846:	84 e5       	ldi	r24, 0x54	; 84
     848:	3d dd       	rcall	.-1414   	; 0x2c4 <send_char>
		send_char('A');
     84a:	81 e4       	ldi	r24, 0x41	; 65
     84c:	3b dd       	rcall	.-1418   	; 0x2c4 <send_char>
		send_char('D');
     84e:	84 e4       	ldi	r24, 0x44	; 68
     850:	39 dd       	rcall	.-1422   	; 0x2c4 <send_char>
		send_char('D');
     852:	84 e4       	ldi	r24, 0x44	; 68
     854:	37 dd       	rcall	.-1426   	; 0x2c4 <send_char>
		send_char('R');
     856:	82 e5       	ldi	r24, 0x52	; 82
     858:	35 dd       	rcall	.-1430   	; 0x2c4 <send_char>
		send_char('\n');
     85a:	8a e0       	ldi	r24, 0x0A	; 10
     85c:	33 dd       	rcall	.-1434   	; 0x2c4 <send_char>
		
		// Get back AT+BLEGETADDR\n followed by Mac Address\n Followed by "OK" maybe with a \n?
		i=0;
		while(!received_data_available() && i < 300)
     85e:	0d e2       	ldi	r16, 0x2D	; 45
     860:	11 e0       	ldi	r17, 0x01	; 1
     862:	37 dd       	rcall	.-1426   	; 0x2d2 <received_data_available>
     864:	81 11       	cpse	r24, r1
     866:	0a c0       	rjmp	.+20     	; 0x87c <init_BLE_name+0x112>
     868:	01 50       	subi	r16, 0x01	; 1
     86a:	11 09       	sbc	r17, r1
     86c:	39 f0       	breq	.+14     	; 0x87c <init_BLE_name+0x112>
     86e:	8f e9       	ldi	r24, 0x9F	; 159
     870:	9f e0       	ldi	r25, 0x0F	; 15
     872:	01 97       	sbiw	r24, 0x01	; 1
     874:	f1 f7       	brne	.-4      	; 0x872 <init_BLE_name+0x108>
     876:	00 c0       	rjmp	.+0      	; 0x878 <init_BLE_name+0x10e>
     878:	00 00       	nop
     87a:	f3 cf       	rjmp	.-26     	; 0x862 <init_BLE_name+0xf8>
     87c:	5e 01       	movw	r10, r28
     87e:	90 e1       	ldi	r25, 0x10	; 16
     880:	a9 0e       	add	r10, r25
     882:	b1 1c       	adc	r11, r1
		{
			response[i] = receive_char();
			i++;
			_delay_ms(1);
			j=0;
			while(!received_data_available() && j < 300)
     884:	87 01       	movw	r16, r14
		{
			i++;
			_delay_ms(1);
		}
		i=0;
		while(received_data_available() && i < 15)
     886:	25 dd       	rcall	.-1462   	; 0x2d2 <received_data_available>
     888:	88 23       	and	r24, r24
     88a:	59 f1       	breq	.+86     	; 0x8e2 <init_BLE_name+0x178>
     88c:	0a 15       	cp	r16, r10
     88e:	1b 05       	cpc	r17, r11
     890:	41 f1       	breq	.+80     	; 0x8e2 <init_BLE_name+0x178>
		{
			response[i] = receive_char();
     892:	37 dd       	rcall	.-1426   	; 0x302 <receive_char>
     894:	f8 01       	movw	r30, r16
     896:	81 93       	st	Z+, r24
     898:	8f 01       	movw	r16, r30
     89a:	8f e9       	ldi	r24, 0x9F	; 159
     89c:	9f e0       	ldi	r25, 0x0F	; 15
     89e:	01 97       	sbiw	r24, 0x01	; 1
     8a0:	f1 f7       	brne	.-4      	; 0x89e <init_BLE_name+0x134>
     8a2:	00 c0       	rjmp	.+0      	; 0x8a4 <init_BLE_name+0x13a>
     8a4:	00 00       	nop
			i++;
			_delay_ms(1);
			j=0;
			while(!received_data_available() && j < 300)
     8a6:	8d e2       	ldi	r24, 0x2D	; 45
     8a8:	c8 2e       	mov	r12, r24
     8aa:	dd 24       	eor	r13, r13
     8ac:	d3 94       	inc	r13
     8ae:	11 dd       	rcall	.-1502   	; 0x2d2 <received_data_available>
     8b0:	81 11       	cpse	r24, r1
     8b2:	e9 cf       	rjmp	.-46     	; 0x886 <init_BLE_name+0x11c>
     8b4:	f1 e0       	ldi	r31, 0x01	; 1
     8b6:	cf 1a       	sub	r12, r31
     8b8:	d1 08       	sbc	r13, r1
     8ba:	29 f3       	breq	.-54     	; 0x886 <init_BLE_name+0x11c>
     8bc:	ef e9       	ldi	r30, 0x9F	; 159
     8be:	ff e0       	ldi	r31, 0x0F	; 15
     8c0:	31 97       	sbiw	r30, 0x01	; 1
     8c2:	f1 f7       	brne	.-4      	; 0x8c0 <init_BLE_name+0x156>
     8c4:	00 c0       	rjmp	.+0      	; 0x8c6 <init_BLE_name+0x15c>
     8c6:	00 00       	nop
     8c8:	f2 cf       	rjmp	.-28     	; 0x8ae <init_BLE_name+0x144>
     8ca:	01 50       	subi	r16, 0x01	; 1
     8cc:	11 09       	sbc	r17, r1
		{
			response[i] = receive_char();
			i++;
			_delay_ms(1);
			j=0;
			while(!received_data_available() && j < 300)
     8ce:	49 f0       	breq	.+18     	; 0x8e2 <init_BLE_name+0x178>
     8d0:	ef e9       	ldi	r30, 0x9F	; 159
     8d2:	ff e0       	ldi	r31, 0x0F	; 15
     8d4:	31 97       	sbiw	r30, 0x01	; 1
     8d6:	f1 f7       	brne	.-4      	; 0x8d4 <init_BLE_name+0x16a>
     8d8:	00 c0       	rjmp	.+0      	; 0x8da <init_BLE_name+0x170>
     8da:	00 00       	nop
     8dc:	fa dc       	rcall	.-1548   	; 0x2d2 <received_data_available>
     8de:	88 23       	and	r24, r24
     8e0:	a1 f3       	breq	.-24     	; 0x8ca <init_BLE_name+0x160>
				j++;
				_delay_ms(1);
			}
		}
		i=0;
		while(received_data_available())
     8e2:	f7 dc       	rcall	.-1554   	; 0x2d2 <received_data_available>
     8e4:	88 23       	and	r24, r24
     8e6:	69 f0       	breq	.+26     	; 0x902 <init_BLE_name+0x198>
		{
			response[i] = receive_char();
     8e8:	0c dd       	rcall	.-1512   	; 0x302 <receive_char>
     8ea:	f7 01       	movw	r30, r14
     8ec:	81 93       	st	Z+, r24
     8ee:	7f 01       	movw	r14, r30
     8f0:	8f e9       	ldi	r24, 0x9F	; 159
     8f2:	9f e0       	ldi	r25, 0x0F	; 15
     8f4:	01 97       	sbiw	r24, 0x01	; 1
     8f6:	f1 f7       	brne	.-4      	; 0x8f4 <init_BLE_name+0x18a>
     8f8:	00 c0       	rjmp	.+0      	; 0x8fa <init_BLE_name+0x190>
     8fa:	00 00       	nop
			i++;
			_delay_ms(1);
			j=0;
			while(!received_data_available() && j < 300)
     8fc:	0d e2       	ldi	r16, 0x2D	; 45
     8fe:	11 e0       	ldi	r17, 0x01	; 1
     900:	ed cf       	rjmp	.-38     	; 0x8dc <init_BLE_name+0x172>
				_delay_ms(1);
			}		
		}

		// send AT+GAPDEVNAME=HBXXXXX
		send_char('A');
     902:	81 e4       	ldi	r24, 0x41	; 65
     904:	df dc       	rcall	.-1602   	; 0x2c4 <send_char>
		send_char('T');
     906:	84 e5       	ldi	r24, 0x54	; 84
     908:	dd dc       	rcall	.-1606   	; 0x2c4 <send_char>
		send_char('+');
     90a:	8b e2       	ldi	r24, 0x2B	; 43
     90c:	db dc       	rcall	.-1610   	; 0x2c4 <send_char>
		send_char('G');
     90e:	87 e4       	ldi	r24, 0x47	; 71
     910:	d9 dc       	rcall	.-1614   	; 0x2c4 <send_char>
		send_char('A');
     912:	81 e4       	ldi	r24, 0x41	; 65
     914:	d7 dc       	rcall	.-1618   	; 0x2c4 <send_char>
		send_char('P');
     916:	80 e5       	ldi	r24, 0x50	; 80
     918:	d5 dc       	rcall	.-1622   	; 0x2c4 <send_char>
		send_char('D');
     91a:	84 e4       	ldi	r24, 0x44	; 68
     91c:	d3 dc       	rcall	.-1626   	; 0x2c4 <send_char>
		send_char('E');
     91e:	85 e4       	ldi	r24, 0x45	; 69
     920:	d1 dc       	rcall	.-1630   	; 0x2c4 <send_char>
		send_char('V');
     922:	86 e5       	ldi	r24, 0x56	; 86
     924:	cf dc       	rcall	.-1634   	; 0x2c4 <send_char>
		send_char('N');
     926:	8e e4       	ldi	r24, 0x4E	; 78
     928:	cd dc       	rcall	.-1638   	; 0x2c4 <send_char>
		send_char('A');
     92a:	81 e4       	ldi	r24, 0x41	; 65
     92c:	cb dc       	rcall	.-1642   	; 0x2c4 <send_char>
		send_char('M');
     92e:	8d e4       	ldi	r24, 0x4D	; 77
     930:	c9 dc       	rcall	.-1646   	; 0x2c4 <send_char>
		send_char('E');
     932:	85 e4       	ldi	r24, 0x45	; 69
     934:	c7 dc       	rcall	.-1650   	; 0x2c4 <send_char>
		send_char('=');
     936:	8d e3       	ldi	r24, 0x3D	; 61
     938:	c5 dc       	rcall	.-1654   	; 0x2c4 <send_char>
		send_char('H');
     93a:	88 e4       	ldi	r24, 0x48	; 72
     93c:	c3 dc       	rcall	.-1658   	; 0x2c4 <send_char>
		send_char('B');
     93e:	82 e4       	ldi	r24, 0x42	; 66
     940:	c1 dc       	rcall	.-1662   	; 0x2c4 <send_char>
		send_char(response[10]);
     942:	8b 85       	ldd	r24, Y+11	; 0x0b
     944:	bf dc       	rcall	.-1666   	; 0x2c4 <send_char>
		send_char(response[12]);
     946:	8d 85       	ldd	r24, Y+13	; 0x0d
     948:	bd dc       	rcall	.-1670   	; 0x2c4 <send_char>
		send_char(response[13]);
     94a:	8e 85       	ldd	r24, Y+14	; 0x0e
     94c:	bb dc       	rcall	.-1674   	; 0x2c4 <send_char>
		send_char(response[15]);
     94e:	88 89       	ldd	r24, Y+16	; 0x10
     950:	b9 dc       	rcall	.-1678   	; 0x2c4 <send_char>
		send_char(response[16]);
     952:	89 89       	ldd	r24, Y+17	; 0x11
     954:	b7 dc       	rcall	.-1682   	; 0x2c4 <send_char>
		send_char('\n');
     956:	8a e0       	ldi	r24, 0x0A	; 10
     958:	b5 dc       	rcall	.-1686   	; 0x2c4 <send_char>
		
		// Get back AT+GAPDEVNAME=HBXXXXX\n followed by OK and maybe a \n
		i=0;
		while(!received_data_available() && i < 300)
     95a:	0d e2       	ldi	r16, 0x2D	; 45
     95c:	11 e0       	ldi	r17, 0x01	; 1
     95e:	b9 dc       	rcall	.-1678   	; 0x2d2 <received_data_available>
     960:	81 11       	cpse	r24, r1
     962:	16 c0       	rjmp	.+44     	; 0x990 <init_BLE_name+0x226>
     964:	01 50       	subi	r16, 0x01	; 1
     966:	11 09       	sbc	r17, r1
     968:	99 f0       	breq	.+38     	; 0x990 <init_BLE_name+0x226>
     96a:	8f e9       	ldi	r24, 0x9F	; 159
     96c:	9f e0       	ldi	r25, 0x0F	; 15
     96e:	01 97       	sbiw	r24, 0x01	; 1
     970:	f1 f7       	brne	.-4      	; 0x96e <init_BLE_name+0x204>
     972:	00 c0       	rjmp	.+0      	; 0x974 <init_BLE_name+0x20a>
     974:	00 00       	nop
     976:	f3 cf       	rjmp	.-26     	; 0x95e <init_BLE_name+0x1f4>
     978:	01 50       	subi	r16, 0x01	; 1
     97a:	11 09       	sbc	r17, r1
		{
			response[i] = receive_char();
			i++;
			_delay_ms(1);
			j=0;
			while(!received_data_available() && j < 300)
     97c:	49 f0       	breq	.+18     	; 0x990 <init_BLE_name+0x226>
     97e:	8f e9       	ldi	r24, 0x9F	; 159
     980:	9f e0       	ldi	r25, 0x0F	; 15
     982:	01 97       	sbiw	r24, 0x01	; 1
     984:	f1 f7       	brne	.-4      	; 0x982 <init_BLE_name+0x218>
     986:	00 c0       	rjmp	.+0      	; 0x988 <init_BLE_name+0x21e>
     988:	00 00       	nop
     98a:	a3 dc       	rcall	.-1722   	; 0x2d2 <received_data_available>
     98c:	88 23       	and	r24, r24
     98e:	a1 f3       	breq	.-24     	; 0x978 <init_BLE_name+0x20e>
		{
			i++;
			_delay_ms(1);
		}
		i = 0;
		while(received_data_available())
     990:	a0 dc       	rcall	.-1728   	; 0x2d2 <received_data_available>
     992:	88 23       	and	r24, r24
     994:	51 f0       	breq	.+20     	; 0x9aa <init_BLE_name+0x240>
		{
			response[i] = receive_char();
     996:	b5 dc       	rcall	.-1686   	; 0x302 <receive_char>
     998:	ef e9       	ldi	r30, 0x9F	; 159
     99a:	ff e0       	ldi	r31, 0x0F	; 15
     99c:	31 97       	sbiw	r30, 0x01	; 1
     99e:	f1 f7       	brne	.-4      	; 0x99c <init_BLE_name+0x232>
     9a0:	00 c0       	rjmp	.+0      	; 0x9a2 <init_BLE_name+0x238>
     9a2:	00 00       	nop
			i++;
			_delay_ms(1);
			j=0;
			while(!received_data_available() && j < 300)
     9a4:	0d e2       	ldi	r16, 0x2D	; 45
     9a6:	11 e0       	ldi	r17, 0x01	; 1
     9a8:	f0 cf       	rjmp	.-32     	; 0x98a <init_BLE_name+0x220>
				_delay_ms(1);
			}		
		}

		// Send ATZ (save settings and reset)
		send_char('A');
     9aa:	81 e4       	ldi	r24, 0x41	; 65
     9ac:	8b dc       	rcall	.-1770   	; 0x2c4 <send_char>
		send_char('T');
     9ae:	84 e5       	ldi	r24, 0x54	; 84
     9b0:	89 dc       	rcall	.-1774   	; 0x2c4 <send_char>
		send_char('Z');
     9b2:	8a e5       	ldi	r24, 0x5A	; 90
     9b4:	87 dc       	rcall	.-1778   	; 0x2c4 <send_char>
		send_char('\n');
     9b6:	8a e0       	ldi	r24, 0x0A	; 10
     9b8:	85 dc       	rcall	.-1782   	; 0x2c4 <send_char>
		// Flush the receive buffer, most likely we only get "OK" back
		i=0;
		while(!received_data_available() && i < 300)
     9ba:	0d e2       	ldi	r16, 0x2D	; 45
     9bc:	11 e0       	ldi	r17, 0x01	; 1
     9be:	89 dc       	rcall	.-1774   	; 0x2d2 <received_data_available>
     9c0:	81 11       	cpse	r24, r1
     9c2:	16 c0       	rjmp	.+44     	; 0x9f0 <init_BLE_name+0x286>
     9c4:	01 50       	subi	r16, 0x01	; 1
     9c6:	11 09       	sbc	r17, r1
     9c8:	99 f0       	breq	.+38     	; 0x9f0 <init_BLE_name+0x286>
     9ca:	ef e9       	ldi	r30, 0x9F	; 159
     9cc:	ff e0       	ldi	r31, 0x0F	; 15
     9ce:	31 97       	sbiw	r30, 0x01	; 1
     9d0:	f1 f7       	brne	.-4      	; 0x9ce <init_BLE_name+0x264>
     9d2:	00 c0       	rjmp	.+0      	; 0x9d4 <init_BLE_name+0x26a>
     9d4:	00 00       	nop
     9d6:	f3 cf       	rjmp	.-26     	; 0x9be <init_BLE_name+0x254>
     9d8:	01 50       	subi	r16, 0x01	; 1
     9da:	11 09       	sbc	r17, r1
		{
			response[i] = receive_char();
			i++;
			_delay_ms(1);
			j=0;
			while(!received_data_available() && j < 300)
     9dc:	49 f0       	breq	.+18     	; 0x9f0 <init_BLE_name+0x286>
     9de:	ef e9       	ldi	r30, 0x9F	; 159
     9e0:	ff e0       	ldi	r31, 0x0F	; 15
     9e2:	31 97       	sbiw	r30, 0x01	; 1
     9e4:	f1 f7       	brne	.-4      	; 0x9e2 <init_BLE_name+0x278>
     9e6:	00 c0       	rjmp	.+0      	; 0x9e8 <init_BLE_name+0x27e>
     9e8:	00 00       	nop
     9ea:	73 dc       	rcall	.-1818   	; 0x2d2 <received_data_available>
     9ec:	88 23       	and	r24, r24
     9ee:	a1 f3       	breq	.-24     	; 0x9d8 <init_BLE_name+0x26e>
			i++;
			_delay_ms(1);
		}
		
		i=0;
		while(received_data_available())
     9f0:	70 dc       	rcall	.-1824   	; 0x2d2 <received_data_available>
     9f2:	88 23       	and	r24, r24
     9f4:	51 f0       	breq	.+20     	; 0xa0a <init_BLE_name+0x2a0>
		{
			response[i] = receive_char();
     9f6:	85 dc       	rcall	.-1782   	; 0x302 <receive_char>
     9f8:	8f e9       	ldi	r24, 0x9F	; 159
     9fa:	9f e0       	ldi	r25, 0x0F	; 15
     9fc:	01 97       	sbiw	r24, 0x01	; 1
     9fe:	f1 f7       	brne	.-4      	; 0x9fc <init_BLE_name+0x292>
     a00:	00 c0       	rjmp	.+0      	; 0xa02 <init_BLE_name+0x298>
     a02:	00 00       	nop
			i++;
			_delay_ms(1);
			j=0;
			while(!received_data_available() && j < 300)
     a04:	0d e2       	ldi	r16, 0x2D	; 45
     a06:	11 e0       	ldi	r17, 0x01	; 1
     a08:	f0 cf       	rjmp	.-32     	; 0x9ea <init_BLE_name+0x280>
				_delay_ms(1);
			}		
			
		}	
	}
}	
     a0a:	69 96       	adiw	r28, 0x19	; 25
     a0c:	0f b6       	in	r0, 0x3f	; 63
     a0e:	f8 94       	cli
     a10:	de bf       	out	0x3e, r29	; 62
     a12:	0f be       	out	0x3f, r0	; 63
     a14:	cd bf       	out	0x3d, r28	; 61
     a16:	df 91       	pop	r29
     a18:	cf 91       	pop	r28
     a1a:	1f 91       	pop	r17
     a1c:	0f 91       	pop	r16
     a1e:	ff 90       	pop	r15
     a20:	ef 90       	pop	r14
     a22:	df 90       	pop	r13
     a24:	cf 90       	pop	r12
     a26:	bf 90       	pop	r11
     a28:	af 90       	pop	r10
     a2a:	08 95       	ret

00000a2c <main>:

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
     a2c:	cf 93       	push	r28
     a2e:	df 93       	push	r29
     a30:	cd b7       	in	r28, 0x3d	; 61
     a32:	de b7       	in	r29, 0x3e	; 62
     a34:	6a 97       	sbiw	r28, 0x1a	; 26
     a36:	0f b6       	in	r0, 0x3f	; 63
     a38:	f8 94       	cli
     a3a:	de bf       	out	0x3e, r29	; 62
     a3c:	0f be       	out	0x3f, r0	; 63
     a3e:	cd bf       	out	0x3d, r28	; 61
	unsigned long int exit_count = 0;
	unsigned long int max_count = 500000;
	uint8_t timeout = 0;
	char usb_data; // Flag that marks if usb_data is received

	SetupHardware();
     a40:	70 de       	rcall	.-800    	; 0x722 <SetupHardware>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     a42:	78 94       	sei
     a44:	2f ef       	ldi	r18, 0xFF	; 255
     a46:	84 e3       	ldi	r24, 0x34	; 52
     a48:	9c e0       	ldi	r25, 0x0C	; 12
     a4a:	21 50       	subi	r18, 0x01	; 1
     a4c:	80 40       	sbci	r24, 0x00	; 0
     a4e:	90 40       	sbci	r25, 0x00	; 0
     a50:	e1 f7       	brne	.-8      	; 0xa4a <main+0x1e>
     a52:	00 c0       	rjmp	.+0      	; 0xa54 <main+0x28>
     a54:	00 00       	nop

	GlobalInterruptEnable();
	_delay_ms(250); // wait for BLE module to wake up
	init_BLE_name();
     a56:	89 de       	rcall	.-750    	; 0x76a <init_BLE_name>
	char serial_data[20]; // Buffer to hold serial commands send over TTL serial port

	// Counter to set a time-out after which Hummingbird reverts to idle state (indicated by status LED fading on and off)
	unsigned long int exit_count = 0;
	unsigned long int max_count = 500000;
	uint8_t timeout = 0;
     a58:	10 e0       	ldi	r17, 0x00	; 0
	int count = 0; // Counter variable
	char serial_data[20]; // Buffer to hold serial commands send over TTL serial port

	// Counter to set a time-out after which Hummingbird reverts to idle state (indicated by status LED fading on and off)
	unsigned long int exit_count = 0;
	unsigned long int max_count = 500000;
     a5a:	a0 e2       	ldi	r26, 0x20	; 32
     a5c:	4a 2e       	mov	r4, r26
     a5e:	a1 ea       	ldi	r26, 0xA1	; 161
     a60:	5a 2e       	mov	r5, r26
     a62:	a7 e0       	ldi	r26, 0x07	; 7
     a64:	6a 2e       	mov	r6, r26
     a66:	71 2c       	mov	r7, r1
{
	int count = 0; // Counter variable
	char serial_data[20]; // Buffer to hold serial commands send over TTL serial port

	// Counter to set a time-out after which Hummingbird reverts to idle state (indicated by status LED fading on and off)
	unsigned long int exit_count = 0;
     a68:	c1 2c       	mov	r12, r1
     a6a:	d1 2c       	mov	r13, r1
     a6c:	76 01       	movw	r14, r12
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	int count = 0; // Counter variable
     a6e:	a1 2c       	mov	r10, r1
     a70:	b1 2c       	mov	r11, r1
     a72:	fe 01       	movw	r30, r28
     a74:	34 96       	adiw	r30, 0x04	; 4
     a76:	fe 8b       	std	Y+22, r31	; 0x16
     a78:	ed 8b       	std	Y+21, r30	; 0x15
     a7a:	ce 01       	movw	r24, r28
     a7c:	05 96       	adiw	r24, 0x05	; 5
     a7e:	98 8f       	std	Y+24, r25	; 0x18
     a80:	8f 8b       	std	Y+23, r24	; 0x17
     a82:	1e 01       	movw	r2, r28
     a84:	96 e0       	ldi	r25, 0x06	; 6
     a86:	29 0e       	add	r2, r25
     a88:	31 1c       	adc	r3, r1
     a8a:	70 96       	adiw	r30, 0x10	; 16
     a8c:	fa 8f       	std	Y+26, r31	; 0x1a
     a8e:	e9 8f       	std	Y+25, r30	; 0x19
	init_BLE_name();

	for (;;)
	{
		// Necessary LUFA library calls that need be run periodically to check USB for data
		HID_Device_USBTask(&Generic_HID_Interface);
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	91 e0       	ldi	r25, 0x01	; 1
     a94:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <HID_Device_USBTask>
		USB_USBTask();
     a98:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <USB_USBTask>

		if(sensor_broadcast_count > 30)
     a9c:	80 91 10 01 	lds	r24, 0x0110
     aa0:	8f 31       	cpi	r24, 0x1F	; 31
     aa2:	18 f0       	brcs	.+6      	; 0xaaa <main+0x7e>
		{
			sensor_broadcast_count = 0;
     aa4:	10 92 10 01 	sts	0x0110, r1
			send_sensors();
     aa8:	1d dc       	rcall	.-1990   	; 0x2e4 <send_sensors>
		}

		// If we reach an idle timer count of 500,000 (in USB mode) or 5 million (in serial mode), ~5 (or 50) seconds has elapsed and we turn everything off and go back to idle mode
		if(exit_count == max_count && exit_count <= max_count+5) {
     aaa:	c4 14       	cp	r12, r4
     aac:	d5 04       	cpc	r13, r5
     aae:	e6 04       	cpc	r14, r6
     ab0:	f7 04       	cpc	r15, r7
     ab2:	99 f4       	brne	.+38     	; 0xada <main+0xae>
     ab4:	fb ef       	ldi	r31, 0xFB	; 251
     ab6:	cf 16       	cp	r12, r31
     ab8:	ff ef       	ldi	r31, 0xFF	; 255
     aba:	df 06       	cpc	r13, r31
     abc:	ef 06       	cpc	r14, r31
     abe:	ff 06       	cpc	r15, r31
     ac0:	b0 f4       	brcc	.+44     	; 0xaee <main+0xc2>
			turn_off_motors();
     ac2:	a6 db       	rcall	.-2228   	; 0x210 <turn_off_motors>
			turn_off_leds();
     ac4:	21 de       	rcall	.-958    	; 0x708 <turn_off_leds>
			disable_servos();
     ac6:	d6 db       	rcall	.-2132   	; 0x274 <disable_servos>
			disable_vibration_motors();
     ac8:	6e dc       	rcall	.-1828   	; 0x3a6 <disable_vibration_motors>
			activity_state = 0; // Idle mode flag
     aca:	10 92 14 01 	sts	0x0114, r1
			exit_count++;
     ace:	2f ef       	ldi	r18, 0xFF	; 255
     ad0:	c2 1a       	sub	r12, r18
     ad2:	d2 0a       	sbc	r13, r18
     ad4:	e2 0a       	sbc	r14, r18
     ad6:	f2 0a       	sbc	r15, r18
     ad8:	0a c0       	rjmp	.+20     	; 0xaee <main+0xc2>
		}
		// Otherwise count up!
		else if(exit_count < max_count) {
     ada:	c4 14       	cp	r12, r4
     adc:	d5 04       	cpc	r13, r5
     ade:	e6 04       	cpc	r14, r6
     ae0:	f7 04       	cpc	r15, r7
     ae2:	28 f4       	brcc	.+10     	; 0xaee <main+0xc2>
			exit_count++;
     ae4:	8f ef       	ldi	r24, 0xFF	; 255
     ae6:	c8 1a       	sub	r12, r24
     ae8:	d8 0a       	sbc	r13, r24
     aea:	e8 0a       	sbc	r14, r24
     aec:	f8 0a       	sbc	r15, r24
		}

		// Check if we've received data over serial, this is experimental
		if(received_data_available()!=0)
     aee:	f1 db       	rcall	.-2078   	; 0x2d2 <received_data_available>
     af0:	88 23       	and	r24, r24
     af2:	09 f4       	brne	.+2      	; 0xaf6 <main+0xca>
     af4:	5a c2       	rjmp	.+1204   	; 0xfaa <__stack+0x4ab>
		{
			max_count = 5000000; // Set the time out to 5,000,000, so now we time out in 50 seconds instead of 5
			serial_data[0] = receive_char();
     af6:	05 dc       	rcall	.-2038   	; 0x302 <receive_char>
			
			
			
			switch(serial_data[0]) {
     af8:	82 35       	cpi	r24, 0x52	; 82
     afa:	09 f4       	brne	.+2      	; 0xafe <main+0xd2>
     afc:	86 c1       	rjmp	.+780    	; 0xe0a <__stack+0x30b>
     afe:	d0 f4       	brcc	.+52     	; 0xb34 <__stack+0x35>
     b00:	8c 34       	cpi	r24, 0x4C	; 76
     b02:	09 f4       	brne	.+2      	; 0xb06 <__stack+0x7>
     b04:	c2 c0       	rjmp	.+388    	; 0xc8a <__stack+0x18b>
     b06:	48 f4       	brcc	.+18     	; 0xb1a <__stack+0x1b>
     b08:	81 34       	cpi	r24, 0x41	; 65
     b0a:	61 f1       	breq	.+88     	; 0xb64 <__stack+0x65>
     b0c:	87 34       	cpi	r24, 0x47	; 71
     b0e:	09 f0       	breq	.+2      	; 0xb12 <__stack+0x13>
     b10:	91 c1       	rjmp	.+802    	; 0xe34 <__stack+0x335>
				sensor_broadcast = 0;
				sensor_broadcast_count = 0;
				exit_count = 0;
				break;
				case 'G':
				activity_state=1;
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	80 93 14 01 	sts	0x0114, r24
				while(!received_data_available() && timeout < 250) {
     b18:	88 c1       	rjmp	.+784    	; 0xe2a <__stack+0x32b>
			max_count = 5000000; // Set the time out to 5,000,000, so now we time out in 50 seconds instead of 5
			serial_data[0] = receive_char();
			
			
			
			switch(serial_data[0]) {
     b1a:	8d 34       	cpi	r24, 0x4D	; 77
     b1c:	09 f4       	brne	.+2      	; 0xb20 <__stack+0x21>
     b1e:	db c0       	rjmp	.+438    	; 0xcd6 <__stack+0x1d7>
     b20:	8f 34       	cpi	r24, 0x4F	; 79
     b22:	09 f0       	breq	.+2      	; 0xb26 <__stack+0x27>
     b24:	87 c1       	rjmp	.+782    	; 0xe34 <__stack+0x335>
					exit_count = 0;  // Reset time-out counter
				}
				break;
				// If O, set an RGB LED using 4 bytes of serial data
				case 'O':
				activity_state=1;
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	80 93 14 01 	sts	0x0114, r24
     b2c:	fe 01       	movw	r30, r28
     b2e:	32 96       	adiw	r30, 0x02	; 2
     b30:	4f 01       	movw	r8, r30
     b32:	7f c0       	rjmp	.+254    	; 0xc32 <__stack+0x133>
			max_count = 5000000; // Set the time out to 5,000,000, so now we time out in 50 seconds instead of 5
			serial_data[0] = receive_char();
			
			
			
			switch(serial_data[0]) {
     b34:	88 35       	cpi	r24, 0x58	; 88
     b36:	09 f4       	brne	.+2      	; 0xb3a <__stack+0x3b>
     b38:	64 c1       	rjmp	.+712    	; 0xe02 <__stack+0x303>
     b3a:	68 f4       	brcc	.+26     	; 0xb56 <__stack+0x57>
     b3c:	83 35       	cpi	r24, 0x53	; 83
     b3e:	09 f4       	brne	.+2      	; 0xb42 <__stack+0x43>
     b40:	11 c1       	rjmp	.+546    	; 0xd64 <__stack+0x265>
     b42:	86 35       	cpi	r24, 0x56	; 86
     b44:	09 f0       	breq	.+2      	; 0xb48 <__stack+0x49>
     b46:	76 c1       	rjmp	.+748    	; 0xe34 <__stack+0x335>
					exit_count = 0;  // Reset time-out counter
				}
				break;
				// If 'V', use bytes 1-2 to set vibration motor intensity
				case 'V':
				activity_state=1;
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	80 93 14 01 	sts	0x0114, r24
     b4e:	fe 01       	movw	r30, r28
     b50:	32 96       	adiw	r30, 0x02	; 2
     b52:	4f 01       	movw	r8, r30
     b54:	e8 c0       	rjmp	.+464    	; 0xd26 <__stack+0x227>
			max_count = 5000000; // Set the time out to 5,000,000, so now we time out in 50 seconds instead of 5
			serial_data[0] = receive_char();
			
			
			
			switch(serial_data[0]) {
     b56:	83 37       	cpi	r24, 0x73	; 115
     b58:	09 f4       	brne	.+2      	; 0xb5c <__stack+0x5d>
     b5a:	2a c1       	rjmp	.+596    	; 0xdb0 <__stack+0x2b1>
     b5c:	8a 37       	cpi	r24, 0x7A	; 122
     b5e:	09 f4       	brne	.+2      	; 0xb62 <__stack+0x63>
     b60:	09 c2       	rjmp	.+1042   	; 0xf74 <__stack+0x475>
     b62:	68 c1       	rjmp	.+720    	; 0xe34 <__stack+0x335>
				// If A, set ALL outputs using 18 bytes of serial data
				case 'A':
				activity_state=1;
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	80 93 14 01 	sts	0x0114, r24
     b6a:	fe 01       	movw	r30, r28
     b6c:	32 96       	adiw	r30, 0x02	; 2
     b6e:	4f 01       	movw	r8, r30
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	int count = 0; // Counter variable
     b70:	10 e0       	ldi	r17, 0x00	; 0
				activity_state=1;
				for(int t = 1; t < 19; t++)
				{
					timeout = 0;
					// Wait up to 500ms for the next byte
					while(!received_data_available() && timeout < 250) {
     b72:	af db       	rcall	.-2210   	; 0x2d2 <received_data_available>
     b74:	81 11       	cpse	r24, r1
     b76:	0b c0       	rjmp	.+22     	; 0xb8e <__stack+0x8f>
     b78:	1a 3f       	cpi	r17, 0xFA	; 250
     b7a:	09 f4       	brne	.+2      	; 0xb7e <__stack+0x7f>
     b7c:	5b c1       	rjmp	.+694    	; 0xe34 <__stack+0x335>
     b7e:	8f e3       	ldi	r24, 0x3F	; 63
     b80:	9f e1       	ldi	r25, 0x1F	; 31
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	f1 f7       	brne	.-4      	; 0xb82 <__stack+0x83>
     b86:	00 c0       	rjmp	.+0      	; 0xb88 <__stack+0x89>
     b88:	00 00       	nop
						_delay_ms(2);
						timeout++;
     b8a:	1f 5f       	subi	r17, 0xFF	; 255
     b8c:	f2 cf       	rjmp	.-28     	; 0xb72 <__stack+0x73>
					}
					if(timeout >= 250)
     b8e:	1a 3f       	cpi	r17, 0xFA	; 250
     b90:	09 f4       	brne	.+2      	; 0xb94 <__stack+0x95>
     b92:	50 c1       	rjmp	.+672    	; 0xe34 <__stack+0x335>
						break;
					serial_data[t] = receive_char();
     b94:	b6 db       	rcall	.-2196   	; 0x302 <receive_char>
     b96:	f4 01       	movw	r30, r8
     b98:	81 93       	st	Z+, r24
     b9a:	4f 01       	movw	r8, r30
			
			switch(serial_data[0]) {
				// If A, set ALL outputs using 18 bytes of serial data
				case 'A':
				activity_state=1;
				for(int t = 1; t < 19; t++)
     b9c:	89 8d       	ldd	r24, Y+25	; 0x19
     b9e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     ba0:	e8 17       	cp	r30, r24
     ba2:	f9 07       	cpc	r31, r25
     ba4:	29 f7       	brne	.-54     	; 0xb70 <__stack+0x71>
					if(timeout >= 250)
						break;
					serial_data[t] = receive_char();
				}
				if(timeout < 250) {
					set_orb('0', serial_data[1], serial_data[2], serial_data[3]);
     ba6:	2c 81       	ldd	r18, Y+4	; 0x04
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	4b 81       	ldd	r20, Y+3	; 0x03
     bac:	50 e0       	ldi	r21, 0x00	; 0
     bae:	6a 81       	ldd	r22, Y+2	; 0x02
     bb0:	70 e0       	ldi	r23, 0x00	; 0
     bb2:	80 e3       	ldi	r24, 0x30	; 48
     bb4:	82 dd       	rcall	.-1276   	; 0x6ba <set_orb>
					set_orb('1', serial_data[4], serial_data[5], serial_data[6]);
     bb6:	2f 81       	ldd	r18, Y+7	; 0x07
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	4e 81       	ldd	r20, Y+6	; 0x06
     bbc:	50 e0       	ldi	r21, 0x00	; 0
     bbe:	6d 81       	ldd	r22, Y+5	; 0x05
     bc0:	70 e0       	ldi	r23, 0x00	; 0
     bc2:	81 e3       	ldi	r24, 0x31	; 49
     bc4:	7a dd       	rcall	.-1292   	; 0x6ba <set_orb>
					set_led('0', serial_data[7]);
     bc6:	68 85       	ldd	r22, Y+8	; 0x08
     bc8:	70 e0       	ldi	r23, 0x00	; 0
     bca:	80 e3       	ldi	r24, 0x30	; 48
     bcc:	86 dd       	rcall	.-1268   	; 0x6da <set_led>
					set_led('1', serial_data[8]);
     bce:	69 85       	ldd	r22, Y+9	; 0x09
     bd0:	70 e0       	ldi	r23, 0x00	; 0
     bd2:	81 e3       	ldi	r24, 0x31	; 49
     bd4:	82 dd       	rcall	.-1276   	; 0x6da <set_led>
					set_led('2', serial_data[9]);
     bd6:	6a 85       	ldd	r22, Y+10	; 0x0a
     bd8:	70 e0       	ldi	r23, 0x00	; 0
     bda:	82 e3       	ldi	r24, 0x32	; 50
     bdc:	7e dd       	rcall	.-1284   	; 0x6da <set_led>
					set_led('3', serial_data[10]);
     bde:	6b 85       	ldd	r22, Y+11	; 0x0b
     be0:	70 e0       	ldi	r23, 0x00	; 0
     be2:	83 e3       	ldi	r24, 0x33	; 51
     be4:	7a dd       	rcall	.-1292   	; 0x6da <set_led>
					set_servo(0, serial_data[11]);
     be6:	6c 85       	ldd	r22, Y+12	; 0x0c
     be8:	80 e0       	ldi	r24, 0x00	; 0
     bea:	46 db       	rcall	.-2420   	; 0x278 <set_servo>
					set_servo(1, serial_data[12]);
     bec:	6d 85       	ldd	r22, Y+13	; 0x0d
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	43 db       	rcall	.-2426   	; 0x278 <set_servo>
					set_servo(2, serial_data[13]);
     bf2:	6e 85       	ldd	r22, Y+14	; 0x0e
     bf4:	82 e0       	ldi	r24, 0x02	; 2
     bf6:	40 db       	rcall	.-2432   	; 0x278 <set_servo>
					set_servo(3, serial_data[14]);
     bf8:	6f 85       	ldd	r22, Y+15	; 0x0f
     bfa:	83 e0       	ldi	r24, 0x03	; 3
     bfc:	3d db       	rcall	.-2438   	; 0x278 <set_servo>
					set_vibration_motor('0', serial_data[15]);
     bfe:	68 89       	ldd	r22, Y+16	; 0x10
     c00:	80 e3       	ldi	r24, 0x30	; 48
     c02:	bf db       	rcall	.-2178   	; 0x382 <set_vibration_motor>
					set_vibration_motor('1', serial_data[16]);
     c04:	69 89       	ldd	r22, Y+17	; 0x11
     c06:	81 e3       	ldi	r24, 0x31	; 49
     c08:	bc db       	rcall	.-2184   	; 0x382 <set_vibration_motor>
					if(serial_data[17] < 128)
     c0a:	4a 89       	ldd	r20, Y+18	; 0x12
     c0c:	47 fd       	sbrc	r20, 7
     c0e:	03 c0       	rjmp	.+6      	; 0xc16 <__stack+0x117>
						set_motor(0, 0, serial_data[17]*2);
     c10:	44 0f       	add	r20, r20
     c12:	60 e0       	ldi	r22, 0x00	; 0
     c14:	02 c0       	rjmp	.+4      	; 0xc1a <__stack+0x11b>
					else
						set_motor(0, 1, (serial_data[17]-128)*2);
     c16:	44 0f       	add	r20, r20
     c18:	61 e0       	ldi	r22, 0x01	; 1
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	fb da       	rcall	.-2570   	; 0x214 <set_motor>
					if(serial_data[18] < 128)
     c1e:	4b 89       	ldd	r20, Y+19	; 0x13
     c20:	47 fd       	sbrc	r20, 7
     c22:	03 c0       	rjmp	.+6      	; 0xc2a <__stack+0x12b>
						set_motor(1, 0, serial_data[18]*2);
     c24:	44 0f       	add	r20, r20
     c26:	60 e0       	ldi	r22, 0x00	; 0
     c28:	02 c0       	rjmp	.+4      	; 0xc2e <__stack+0x12f>
					else
						set_motor(1, 1, (serial_data[18]-128)*2);
     c2a:	44 0f       	add	r20, r20
     c2c:	61 e0       	ldi	r22, 0x01	; 1
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	78 c0       	rjmp	.+240    	; 0xd22 <__stack+0x223>
     c32:	10 e0       	ldi	r17, 0x00	; 0
				activity_state=1;
				for(int t = 1; t < 5; t++)
				{
					timeout = 0;
					// Wait up to 500ms for the next byte
					while(!received_data_available() && timeout < 250) {
     c34:	4e db       	rcall	.-2404   	; 0x2d2 <received_data_available>
     c36:	81 11       	cpse	r24, r1
     c38:	0b c0       	rjmp	.+22     	; 0xc50 <__stack+0x151>
     c3a:	1a 3f       	cpi	r17, 0xFA	; 250
     c3c:	09 f4       	brne	.+2      	; 0xc40 <__stack+0x141>
     c3e:	fa c0       	rjmp	.+500    	; 0xe34 <__stack+0x335>
     c40:	8f e3       	ldi	r24, 0x3F	; 63
     c42:	9f e1       	ldi	r25, 0x1F	; 31
     c44:	01 97       	sbiw	r24, 0x01	; 1
     c46:	f1 f7       	brne	.-4      	; 0xc44 <__stack+0x145>
     c48:	00 c0       	rjmp	.+0      	; 0xc4a <__stack+0x14b>
     c4a:	00 00       	nop
						_delay_ms(2);
						timeout++;
     c4c:	1f 5f       	subi	r17, 0xFF	; 255
     c4e:	f2 cf       	rjmp	.-28     	; 0xc34 <__stack+0x135>
					}
					if(timeout >= 250)
     c50:	1a 3f       	cpi	r17, 0xFA	; 250
     c52:	09 f4       	brne	.+2      	; 0xc56 <__stack+0x157>
     c54:	ef c0       	rjmp	.+478    	; 0xe34 <__stack+0x335>
						break;
					serial_data[t] = receive_char();
     c56:	55 db       	rcall	.-2390   	; 0x302 <receive_char>
     c58:	f4 01       	movw	r30, r8
     c5a:	81 93       	st	Z+, r24
     c5c:	4f 01       	movw	r8, r30
				}
				break;
				// If O, set an RGB LED using 4 bytes of serial data
				case 'O':
				activity_state=1;
				for(int t = 1; t < 5; t++)
     c5e:	e2 15       	cp	r30, r2
     c60:	f3 05       	cpc	r31, r3
     c62:	39 f7       	brne	.-50     	; 0xc32 <__stack+0x133>
					if(timeout >= 250)
						break;
					serial_data[t] = receive_char();
				}
				if(timeout < 250) {
					set_orb(serial_data[1], serial_data[2], serial_data[3], serial_data[4]);
     c64:	2d 81       	ldd	r18, Y+5	; 0x05
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	4c 81       	ldd	r20, Y+4	; 0x04
     c6a:	50 e0       	ldi	r21, 0x00	; 0
     c6c:	6b 81       	ldd	r22, Y+3	; 0x03
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	23 dd       	rcall	.-1466   	; 0x6ba <set_orb>
		}

		// Check if we've received data over serial, this is experimental
		if(received_data_available()!=0)
		{
			max_count = 5000000; // Set the time out to 5,000,000, so now we time out in 50 seconds instead of 5
     c74:	f0 e4       	ldi	r31, 0x40	; 64
     c76:	4f 2e       	mov	r4, r31
     c78:	fb e4       	ldi	r31, 0x4B	; 75
     c7a:	5f 2e       	mov	r5, r31
     c7c:	fc e4       	ldi	r31, 0x4C	; 76
     c7e:	6f 2e       	mov	r6, r31
     c80:	71 2c       	mov	r7, r1
					send_char(count);
					count++;
					if(count > 255) {
						count = 0;
					}
					exit_count = 0;
     c82:	c1 2c       	mov	r12, r1
     c84:	d1 2c       	mov	r13, r1
     c86:	76 01       	movw	r14, r12
     c88:	03 cf       	rjmp	.-506    	; 0xa90 <main+0x64>
					exit_count = 0;  // Reset time-out counter
				}
				break;
				// If 'L', set an LED's intensity with 2 bytes of serial data
				case 'L':
				activity_state=1;
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	80 93 14 01 	sts	0x0114, r24
     c90:	ce 01       	movw	r24, r28
     c92:	02 96       	adiw	r24, 0x02	; 2
     c94:	4c 01       	movw	r8, r24
     c96:	10 e0       	ldi	r17, 0x00	; 0
				for(int t = 1; t < 3; t++)
				{
					timeout = 0;
					while(!received_data_available() && timeout < 250) {
     c98:	1c db       	rcall	.-2504   	; 0x2d2 <received_data_available>
     c9a:	81 11       	cpse	r24, r1
     c9c:	0b c0       	rjmp	.+22     	; 0xcb4 <__stack+0x1b5>
     c9e:	1a 3f       	cpi	r17, 0xFA	; 250
     ca0:	09 f4       	brne	.+2      	; 0xca4 <__stack+0x1a5>
     ca2:	c8 c0       	rjmp	.+400    	; 0xe34 <__stack+0x335>
     ca4:	ef e3       	ldi	r30, 0x3F	; 63
     ca6:	ff e1       	ldi	r31, 0x1F	; 31
     ca8:	31 97       	sbiw	r30, 0x01	; 1
     caa:	f1 f7       	brne	.-4      	; 0xca8 <__stack+0x1a9>
     cac:	00 c0       	rjmp	.+0      	; 0xcae <__stack+0x1af>
     cae:	00 00       	nop
						_delay_ms(2);
						timeout++;
     cb0:	1f 5f       	subi	r17, 0xFF	; 255
     cb2:	f2 cf       	rjmp	.-28     	; 0xc98 <__stack+0x199>
					}
					if(timeout >= 250)
     cb4:	1a 3f       	cpi	r17, 0xFA	; 250
     cb6:	09 f4       	brne	.+2      	; 0xcba <__stack+0x1bb>
     cb8:	bd c0       	rjmp	.+378    	; 0xe34 <__stack+0x335>
					break;
					serial_data[t] = receive_char();
     cba:	23 db       	rcall	.-2490   	; 0x302 <receive_char>
     cbc:	f4 01       	movw	r30, r8
     cbe:	81 93       	st	Z+, r24
     cc0:	4f 01       	movw	r8, r30
				}
				break;
				// If 'L', set an LED's intensity with 2 bytes of serial data
				case 'L':
				activity_state=1;
				for(int t = 1; t < 3; t++)
     cc2:	8d 89       	ldd	r24, Y+21	; 0x15
     cc4:	9e 89       	ldd	r25, Y+22	; 0x16
     cc6:	e8 17       	cp	r30, r24
     cc8:	f9 07       	cpc	r31, r25
     cca:	29 f7       	brne	.-54     	; 0xc96 <__stack+0x197>
					if(timeout >= 250)
					break;
					serial_data[t] = receive_char();
				}
				if(timeout < 250) {
					set_led(serial_data[1], serial_data[2]);
     ccc:	6b 81       	ldd	r22, Y+3	; 0x03
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	8a 81       	ldd	r24, Y+2	; 0x02
     cd2:	03 dd       	rcall	.-1530   	; 0x6da <set_led>
     cd4:	cf cf       	rjmp	.-98     	; 0xc74 <__stack+0x175>
					exit_count = 0;  // Reset time-out counter
				}
				break;
				// If 'M', use bytes 1-3 to set motor speed and direction
				case 'M':
				activity_state=1;
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	80 93 14 01 	sts	0x0114, r24
     cdc:	fe 01       	movw	r30, r28
     cde:	32 96       	adiw	r30, 0x02	; 2
     ce0:	4f 01       	movw	r8, r30
     ce2:	10 e0       	ldi	r17, 0x00	; 0
				for(int t = 1; t < 4; t++)
				{
					timeout = 0;
					while(!received_data_available() && timeout < 250) {
     ce4:	f6 da       	rcall	.-2580   	; 0x2d2 <received_data_available>
     ce6:	81 11       	cpse	r24, r1
     ce8:	0b c0       	rjmp	.+22     	; 0xd00 <__stack+0x201>
     cea:	1a 3f       	cpi	r17, 0xFA	; 250
     cec:	09 f4       	brne	.+2      	; 0xcf0 <__stack+0x1f1>
     cee:	a2 c0       	rjmp	.+324    	; 0xe34 <__stack+0x335>
     cf0:	8f e3       	ldi	r24, 0x3F	; 63
     cf2:	9f e1       	ldi	r25, 0x1F	; 31
     cf4:	01 97       	sbiw	r24, 0x01	; 1
     cf6:	f1 f7       	brne	.-4      	; 0xcf4 <__stack+0x1f5>
     cf8:	00 c0       	rjmp	.+0      	; 0xcfa <__stack+0x1fb>
     cfa:	00 00       	nop
						_delay_ms(2);
						timeout++;
     cfc:	1f 5f       	subi	r17, 0xFF	; 255
     cfe:	f2 cf       	rjmp	.-28     	; 0xce4 <__stack+0x1e5>
					}
					if(timeout >= 250)
     d00:	1a 3f       	cpi	r17, 0xFA	; 250
     d02:	09 f4       	brne	.+2      	; 0xd06 <__stack+0x207>
     d04:	97 c0       	rjmp	.+302    	; 0xe34 <__stack+0x335>
					break;
					serial_data[t] = receive_char();
     d06:	fd da       	rcall	.-2566   	; 0x302 <receive_char>
     d08:	f4 01       	movw	r30, r8
     d0a:	81 93       	st	Z+, r24
     d0c:	4f 01       	movw	r8, r30
				}
				break;
				// If 'M', use bytes 1-3 to set motor speed and direction
				case 'M':
				activity_state=1;
				for(int t = 1; t < 4; t++)
     d0e:	8f 89       	ldd	r24, Y+23	; 0x17
     d10:	98 8d       	ldd	r25, Y+24	; 0x18
     d12:	e8 17       	cp	r30, r24
     d14:	f9 07       	cpc	r31, r25
     d16:	29 f7       	brne	.-54     	; 0xce2 <__stack+0x1e3>
					if(timeout >= 250)
					break;
					serial_data[t] = receive_char();
				}
				if(timeout < 250) {
					set_motor(serial_data[1]-48, serial_data[2]-48, serial_data[3]);
     d18:	6b 81       	ldd	r22, Y+3	; 0x03
     d1a:	60 53       	subi	r22, 0x30	; 48
     d1c:	8a 81       	ldd	r24, Y+2	; 0x02
     d1e:	4c 81       	ldd	r20, Y+4	; 0x04
     d20:	80 53       	subi	r24, 0x30	; 48
     d22:	78 da       	rcall	.-2832   	; 0x214 <set_motor>
     d24:	a7 cf       	rjmp	.-178    	; 0xc74 <__stack+0x175>
     d26:	10 e0       	ldi	r17, 0x00	; 0
				case 'V':
				activity_state=1;
				for(int t = 1; t < 3; t++)
				{
					timeout = 0;
					while(!received_data_available() && timeout < 250) {
     d28:	d4 da       	rcall	.-2648   	; 0x2d2 <received_data_available>
     d2a:	81 11       	cpse	r24, r1
     d2c:	0b c0       	rjmp	.+22     	; 0xd44 <__stack+0x245>
     d2e:	1a 3f       	cpi	r17, 0xFA	; 250
     d30:	09 f4       	brne	.+2      	; 0xd34 <__stack+0x235>
     d32:	80 c0       	rjmp	.+256    	; 0xe34 <__stack+0x335>
     d34:	8f e3       	ldi	r24, 0x3F	; 63
     d36:	9f e1       	ldi	r25, 0x1F	; 31
     d38:	01 97       	sbiw	r24, 0x01	; 1
     d3a:	f1 f7       	brne	.-4      	; 0xd38 <__stack+0x239>
     d3c:	00 c0       	rjmp	.+0      	; 0xd3e <__stack+0x23f>
     d3e:	00 00       	nop
						_delay_ms(2);
						timeout++;
     d40:	1f 5f       	subi	r17, 0xFF	; 255
     d42:	f2 cf       	rjmp	.-28     	; 0xd28 <__stack+0x229>
					}
					if(timeout >= 250)
     d44:	1a 3f       	cpi	r17, 0xFA	; 250
     d46:	09 f4       	brne	.+2      	; 0xd4a <__stack+0x24b>
     d48:	75 c0       	rjmp	.+234    	; 0xe34 <__stack+0x335>
					break;
					serial_data[t] = receive_char();
     d4a:	db da       	rcall	.-2634   	; 0x302 <receive_char>
     d4c:	f4 01       	movw	r30, r8
     d4e:	81 93       	st	Z+, r24
     d50:	4f 01       	movw	r8, r30
				}
				break;
				// If 'V', use bytes 1-2 to set vibration motor intensity
				case 'V':
				activity_state=1;
				for(int t = 1; t < 3; t++)
     d52:	8d 89       	ldd	r24, Y+21	; 0x15
     d54:	9e 89       	ldd	r25, Y+22	; 0x16
     d56:	e8 17       	cp	r30, r24
     d58:	f9 07       	cpc	r31, r25
     d5a:	29 f7       	brne	.-54     	; 0xd26 <__stack+0x227>
					if(timeout >= 250)
					break;
					serial_data[t] = receive_char();
				}
				if(timeout < 250) {
					set_vibration_motor(serial_data[1], serial_data[2]);
     d5c:	6b 81       	ldd	r22, Y+3	; 0x03
     d5e:	8a 81       	ldd	r24, Y+2	; 0x02
     d60:	10 db       	rcall	.-2528   	; 0x382 <set_vibration_motor>
     d62:	88 cf       	rjmp	.-240    	; 0xc74 <__stack+0x175>
					exit_count = 0;
				}
				break;
				// If 'S', use bytes 1-2 to set servo position
				case 'S':
				activity_state=1;
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	80 93 14 01 	sts	0x0114, r24
     d6a:	fe 01       	movw	r30, r28
     d6c:	32 96       	adiw	r30, 0x02	; 2
     d6e:	4f 01       	movw	r8, r30
     d70:	10 e0       	ldi	r17, 0x00	; 0
				for(int t = 1; t < 3; t++)
				{
					timeout = 0;
					while(!received_data_available() && timeout < 250) {
     d72:	af da       	rcall	.-2722   	; 0x2d2 <received_data_available>
     d74:	81 11       	cpse	r24, r1
     d76:	0b c0       	rjmp	.+22     	; 0xd8e <__stack+0x28f>
     d78:	1a 3f       	cpi	r17, 0xFA	; 250
     d7a:	09 f4       	brne	.+2      	; 0xd7e <__stack+0x27f>
     d7c:	5b c0       	rjmp	.+182    	; 0xe34 <__stack+0x335>
     d7e:	8f e3       	ldi	r24, 0x3F	; 63
     d80:	9f e1       	ldi	r25, 0x1F	; 31
     d82:	01 97       	sbiw	r24, 0x01	; 1
     d84:	f1 f7       	brne	.-4      	; 0xd82 <__stack+0x283>
     d86:	00 c0       	rjmp	.+0      	; 0xd88 <__stack+0x289>
     d88:	00 00       	nop
						_delay_ms(2);
						timeout++;
     d8a:	1f 5f       	subi	r17, 0xFF	; 255
     d8c:	f2 cf       	rjmp	.-28     	; 0xd72 <__stack+0x273>
					}
					if(timeout >= 250)
     d8e:	1a 3f       	cpi	r17, 0xFA	; 250
     d90:	09 f4       	brne	.+2      	; 0xd94 <__stack+0x295>
     d92:	50 c0       	rjmp	.+160    	; 0xe34 <__stack+0x335>
					break;
					serial_data[t] = receive_char();
     d94:	b6 da       	rcall	.-2708   	; 0x302 <receive_char>
     d96:	f4 01       	movw	r30, r8
     d98:	81 93       	st	Z+, r24
     d9a:	4f 01       	movw	r8, r30
				}
				break;
				// If 'S', use bytes 1-2 to set servo position
				case 'S':
				activity_state=1;
				for(int t = 1; t < 3; t++)
     d9c:	8d 89       	ldd	r24, Y+21	; 0x15
     d9e:	9e 89       	ldd	r25, Y+22	; 0x16
     da0:	e8 17       	cp	r30, r24
     da2:	f9 07       	cpc	r31, r25
     da4:	29 f7       	brne	.-54     	; 0xd70 <__stack+0x271>
					if(timeout >= 250)
					break;
					serial_data[t] = receive_char();
				}
				if(timeout < 250) {
					set_servo(serial_data[1]-48, serial_data[2]);
     da6:	8a 81       	ldd	r24, Y+2	; 0x02
     da8:	6b 81       	ldd	r22, Y+3	; 0x03
     daa:	80 53       	subi	r24, 0x30	; 48
     dac:	65 da       	rcall	.-2870   	; 0x278 <set_servo>
     dae:	62 cf       	rjmp	.-316    	; 0xc74 <__stack+0x175>
					exit_count = 0;
				}
				break;
				// If 's', return sensor values of the selected sensor port
				case 's':
				activity_state=1;
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	80 93 14 01 	sts	0x0114, r24
				while(!received_data_available() && timeout < 250) {
     db6:	8d da       	rcall	.-2790   	; 0x2d2 <received_data_available>
     db8:	81 11       	cpse	r24, r1
     dba:	0b c0       	rjmp	.+22     	; 0xdd2 <__stack+0x2d3>
     dbc:	1a 3f       	cpi	r17, 0xFA	; 250
     dbe:	08 f0       	brcs	.+2      	; 0xdc2 <__stack+0x2c3>
     dc0:	39 c0       	rjmp	.+114    	; 0xe34 <__stack+0x335>
     dc2:	ef e3       	ldi	r30, 0x3F	; 63
     dc4:	ff e1       	ldi	r31, 0x1F	; 31
     dc6:	31 97       	sbiw	r30, 0x01	; 1
     dc8:	f1 f7       	brne	.-4      	; 0xdc6 <__stack+0x2c7>
     dca:	00 c0       	rjmp	.+0      	; 0xdcc <__stack+0x2cd>
     dcc:	00 00       	nop
					_delay_ms(2);
					timeout++;
     dce:	1f 5f       	subi	r17, 0xFF	; 255
     dd0:	f2 cf       	rjmp	.-28     	; 0xdb6 <__stack+0x2b7>
				}
				if(timeout < 250)
     dd2:	1a 3f       	cpi	r17, 0xFA	; 250
     dd4:	78 f5       	brcc	.+94     	; 0xe34 <__stack+0x335>
				{
					serial_data[1] = receive_char();
     dd6:	95 da       	rcall	.-2774   	; 0x302 <receive_char>
     dd8:	8a 83       	std	Y+2, r24	; 0x02
					if(serial_data[1]=='0')
     dda:	80 33       	cpi	r24, 0x30	; 48
     ddc:	11 f4       	brne	.+4      	; 0xde2 <__stack+0x2e3>
					{
						send_char(read_sensor(SENSOR1));
     dde:	86 e6       	ldi	r24, 0x66	; 102
     de0:	84 c0       	rjmp	.+264    	; 0xeea <__stack+0x3eb>
					}
					else if(serial_data[1]=='1')
     de2:	81 33       	cpi	r24, 0x31	; 49
     de4:	11 f4       	brne	.+4      	; 0xdea <__stack+0x2eb>
					{
						send_char(read_sensor(SENSOR2));
     de6:	85 e6       	ldi	r24, 0x65	; 101
     de8:	80 c0       	rjmp	.+256    	; 0xeea <__stack+0x3eb>
					}
					else if(serial_data[1]=='2')
     dea:	82 33       	cpi	r24, 0x32	; 50
     dec:	11 f4       	brne	.+4      	; 0xdf2 <__stack+0x2f3>
					{
						send_char(read_sensor(SENSOR3));
     dee:	84 e6       	ldi	r24, 0x64	; 100
     df0:	7c c0       	rjmp	.+248    	; 0xeea <__stack+0x3eb>
					}
					else if(serial_data[1]=='3')
     df2:	83 33       	cpi	r24, 0x33	; 51
     df4:	11 f4       	brne	.+4      	; 0xdfa <__stack+0x2fb>
					{
						send_char(read_sensor(SENSOR4));
     df6:	81 e6       	ldi	r24, 0x61	; 97
     df8:	78 c0       	rjmp	.+240    	; 0xeea <__stack+0x3eb>
					}
					else if(serial_data[1]=='4')
     dfa:	84 33       	cpi	r24, 0x34	; 52
     dfc:	09 f0       	breq	.+2      	; 0xe00 <__stack+0x301>
     dfe:	3a cf       	rjmp	.-396    	; 0xc74 <__stack+0x175>
     e00:	73 c0       	rjmp	.+230    	; 0xee8 <__stack+0x3e9>
					exit_count = 0;
				}
				break;
				// Fast way to turn everything off
				case 'X':
				activity_state=1;
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	80 93 14 01 	sts	0x0114, r24
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <__stack+0x30f>
				sensor_broadcast_count = 0;
				exit_count = 0;
				break;
				// Fast way to turn everything off AND go to idle state
				case 'R':
				activity_state=0; // idle mode flag
     e0a:	10 92 14 01 	sts	0x0114, r1
				turn_off_motors();
     e0e:	00 da       	rcall	.-3072   	; 0x210 <turn_off_motors>
				turn_off_leds();
     e10:	7b dc       	rcall	.-1802   	; 0x708 <turn_off_leds>
				disable_servos();
     e12:	30 da       	rcall	.-2976   	; 0x274 <disable_servos>
				disable_vibration_motors();
     e14:	c8 da       	rcall	.-2672   	; 0x3a6 <disable_vibration_motors>
     e16:	7f c0       	rjmp	.+254    	; 0xf16 <__stack+0x417>
				sensor_broadcast_count = 0;
				exit_count = 0;
				break;
				case 'G':
				activity_state=1;
				while(!received_data_available() && timeout < 250) {
     e18:	1a 3f       	cpi	r17, 0xFA	; 250
     e1a:	60 f4       	brcc	.+24     	; 0xe34 <__stack+0x335>
     e1c:	8f e3       	ldi	r24, 0x3F	; 63
     e1e:	9f e1       	ldi	r25, 0x1F	; 31
     e20:	01 97       	sbiw	r24, 0x01	; 1
     e22:	f1 f7       	brne	.-4      	; 0xe20 <__stack+0x321>
     e24:	00 c0       	rjmp	.+0      	; 0xe26 <__stack+0x327>
     e26:	00 00       	nop
					_delay_ms(2);
					timeout++;
     e28:	1f 5f       	subi	r17, 0xFF	; 255
				sensor_broadcast_count = 0;
				exit_count = 0;
				break;
				case 'G':
				activity_state=1;
				while(!received_data_available() && timeout < 250) {
     e2a:	53 da       	rcall	.-2906   	; 0x2d2 <received_data_available>
     e2c:	88 23       	and	r24, r24
     e2e:	a1 f3       	breq	.-24     	; 0xe18 <__stack+0x319>
					_delay_ms(2);
					timeout++;
				}
				// If you didn't timeout, provide the requested data
				if(timeout < 250)
     e30:	1a 3f       	cpi	r17, 0xFA	; 250
     e32:	40 f0       	brcs	.+16     	; 0xe44 <__stack+0x345>
		}

		// Check if we've received data over serial, this is experimental
		if(received_data_available()!=0)
		{
			max_count = 5000000; // Set the time out to 5,000,000, so now we time out in 50 seconds instead of 5
     e34:	e0 e4       	ldi	r30, 0x40	; 64
     e36:	4e 2e       	mov	r4, r30
     e38:	eb e4       	ldi	r30, 0x4B	; 75
     e3a:	5e 2e       	mov	r5, r30
     e3c:	ec e4       	ldi	r30, 0x4C	; 76
     e3e:	6e 2e       	mov	r6, r30
     e40:	71 2c       	mov	r7, r1
     e42:	26 ce       	rjmp	.-948    	; 0xa90 <main+0x64>
					timeout++;
				}
				// If you didn't timeout, provide the requested data
				if(timeout < 250)
				{
					serial_data[1] = receive_char();
     e44:	5e da       	rcall	.-2884   	; 0x302 <receive_char>
     e46:	8a 83       	std	Y+2, r24	; 0x02
					if(serial_data[1] == '0') {
     e48:	80 33       	cpi	r24, 0x30	; 48
     e4a:	71 f4       	brne	.+28     	; 0xe68 <__stack+0x369>
     e4c:	76 e1       	ldi	r23, 0x16	; 22
     e4e:	e7 2e       	mov	r14, r23
     e50:	71 e0       	ldi	r23, 0x01	; 1
     e52:	f7 2e       	mov	r15, r23
						for(int i = 0; i < 6; i++) {
							send_char(led_values_temp[i]);
     e54:	f7 01       	movw	r30, r14
     e56:	81 91       	ld	r24, Z+
     e58:	7f 01       	movw	r14, r30
     e5a:	34 da       	rcall	.-2968   	; 0x2c4 <send_char>
				// If you didn't timeout, provide the requested data
				if(timeout < 250)
				{
					serial_data[1] = receive_char();
					if(serial_data[1] == '0') {
						for(int i = 0; i < 6; i++) {
     e5c:	fc e1       	ldi	r31, 0x1C	; 28
     e5e:	ef 16       	cp	r14, r31
     e60:	f1 e0       	ldi	r31, 0x01	; 1
     e62:	ff 06       	cpc	r15, r31
     e64:	b9 f7       	brne	.-18     	; 0xe54 <__stack+0x355>
     e66:	06 cf       	rjmp	.-500    	; 0xc74 <__stack+0x175>
							send_char(led_values_temp[i]);
						}
					}
					else if(serial_data[1] == '1') {
     e68:	81 33       	cpi	r24, 0x31	; 49
     e6a:	d9 f4       	brne	.+54     	; 0xea2 <__stack+0x3a3>
     e6c:	6c e1       	ldi	r22, 0x1C	; 28
     e6e:	e6 2e       	mov	r14, r22
     e70:	61 e0       	ldi	r22, 0x01	; 1
     e72:	f6 2e       	mov	r15, r22
						for(int i = 6; i < 10; i++) {
							send_char(led_values_temp[i]);
     e74:	f7 01       	movw	r30, r14
     e76:	81 91       	ld	r24, Z+
     e78:	7f 01       	movw	r14, r30
     e7a:	24 da       	rcall	.-3000   	; 0x2c4 <send_char>
						for(int i = 0; i < 6; i++) {
							send_char(led_values_temp[i]);
						}
					}
					else if(serial_data[1] == '1') {
						for(int i = 6; i < 10; i++) {
     e7c:	f0 e2       	ldi	r31, 0x20	; 32
     e7e:	ef 16       	cp	r14, r31
     e80:	f1 e0       	ldi	r31, 0x01	; 1
     e82:	ff 06       	cpc	r15, r31
     e84:	b9 f7       	brne	.-18     	; 0xe74 <__stack+0x375>
     e86:	5e e2       	ldi	r21, 0x2E	; 46
     e88:	e5 2e       	mov	r14, r21
     e8a:	51 e0       	ldi	r21, 0x01	; 1
     e8c:	f5 2e       	mov	r15, r21
							send_char(led_values_temp[i]);
						}
						for(int i = 0; i < 4; i++) {
							send_char(servo_values_temp[i]);
     e8e:	f7 01       	movw	r30, r14
     e90:	81 91       	ld	r24, Z+
     e92:	7f 01       	movw	r14, r30
     e94:	17 da       	rcall	.-3026   	; 0x2c4 <send_char>
					}
					else if(serial_data[1] == '1') {
						for(int i = 6; i < 10; i++) {
							send_char(led_values_temp[i]);
						}
						for(int i = 0; i < 4; i++) {
     e96:	f2 e3       	ldi	r31, 0x32	; 50
     e98:	ef 16       	cp	r14, r31
     e9a:	f1 e0       	ldi	r31, 0x01	; 1
     e9c:	ff 06       	cpc	r15, r31
     e9e:	b9 f7       	brne	.-18     	; 0xe8e <__stack+0x38f>
     ea0:	e9 ce       	rjmp	.-558    	; 0xc74 <__stack+0x175>
							send_char(servo_values_temp[i]);
						}
					}
					else if(serial_data[1] == '2') {
     ea2:	82 33       	cpi	r24, 0x32	; 50
     ea4:	99 f4       	brne	.+38     	; 0xecc <__stack+0x3cd>
     ea6:	44 e3       	ldi	r20, 0x34	; 52
     ea8:	e4 2e       	mov	r14, r20
     eaa:	41 e0       	ldi	r20, 0x01	; 1
     eac:	f4 2e       	mov	r15, r20
						for(int i = 0; i < 4; i++) {
							send_char(motor_vals[i]);
     eae:	f7 01       	movw	r30, r14
     eb0:	81 91       	ld	r24, Z+
     eb2:	7f 01       	movw	r14, r30
     eb4:	07 da       	rcall	.-3058   	; 0x2c4 <send_char>
						for(int i = 0; i < 4; i++) {
							send_char(servo_values_temp[i]);
						}
					}
					else if(serial_data[1] == '2') {
						for(int i = 0; i < 4; i++) {
     eb6:	f8 e3       	ldi	r31, 0x38	; 56
     eb8:	ef 16       	cp	r14, r31
     eba:	f1 e0       	ldi	r31, 0x01	; 1
     ebc:	ff 06       	cpc	r15, r31
     ebe:	b9 f7       	brne	.-18     	; 0xeae <__stack+0x3af>
							send_char(motor_vals[i]);
						}
						send_char(vbr_values_temp[0]);
     ec0:	80 91 2c 01 	lds	r24, 0x012C
     ec4:	ff d9       	rcall	.-3074   	; 0x2c4 <send_char>
						send_char(vbr_values_temp[1]);
     ec6:	80 91 2d 01 	lds	r24, 0x012D
     eca:	52 c0       	rjmp	.+164    	; 0xf70 <__stack+0x471>
					}
					else if(serial_data[1] == '3') {
     ecc:	83 33       	cpi	r24, 0x33	; 51
     ece:	79 f4       	brne	.+30     	; 0xeee <__stack+0x3ef>
						send_char(read_sensor(SENSOR1));
     ed0:	86 e6       	ldi	r24, 0x66	; 102
     ed2:	74 d9       	rcall	.-3352   	; 0x1bc <read_sensor>
     ed4:	f7 d9       	rcall	.-3090   	; 0x2c4 <send_char>
						send_char(read_sensor(SENSOR2));
     ed6:	85 e6       	ldi	r24, 0x65	; 101
     ed8:	71 d9       	rcall	.-3358   	; 0x1bc <read_sensor>
     eda:	f4 d9       	rcall	.-3096   	; 0x2c4 <send_char>
						send_char(read_sensor(SENSOR3));
     edc:	84 e6       	ldi	r24, 0x64	; 100
     ede:	6e d9       	rcall	.-3364   	; 0x1bc <read_sensor>
     ee0:	f1 d9       	rcall	.-3102   	; 0x2c4 <send_char>
						send_char(read_sensor(SENSOR4));
     ee2:	81 e6       	ldi	r24, 0x61	; 97
     ee4:	6b d9       	rcall	.-3370   	; 0x1bc <read_sensor>
     ee6:	ee d9       	rcall	.-3108   	; 0x2c4 <send_char>
						send_char(read_sensor(EXT_PWR));
     ee8:	80 e6       	ldi	r24, 0x60	; 96
     eea:	68 d9       	rcall	.-3376   	; 0x1bc <read_sensor>
     eec:	41 c0       	rjmp	.+130    	; 0xf70 <__stack+0x471>

					}
					// Returns hardware/firmware version
					else if(serial_data[1] == '4') {
     eee:	84 33       	cpi	r24, 0x34	; 52
     ef0:	51 f4       	brne	.+20     	; 0xf06 <__stack+0x407>
						// hardware version
						send_char(0x03);
     ef2:	83 e0       	ldi	r24, 0x03	; 3
     ef4:	e7 d9       	rcall	.-3122   	; 0x2c4 <send_char>
						send_char(0x00);
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	e5 d9       	rcall	.-3126   	; 0x2c4 <send_char>
						// firmware version
						send_char(MAJOR_FIRMWARE_VERSION);
     efa:	82 e0       	ldi	r24, 0x02	; 2
     efc:	e3 d9       	rcall	.-3130   	; 0x2c4 <send_char>
						send_char(MINOR_FIRMWARE_VERSION);
     efe:	82 e0       	ldi	r24, 0x02	; 2
     f00:	e1 d9       	rcall	.-3134   	; 0x2c4 <send_char>
						send_char(MINOR_FIRMWARE_VERSION2);
     f02:	82 e6       	ldi	r24, 0x62	; 98
     f04:	35 c0       	rjmp	.+106    	; 0xf70 <__stack+0x471>
						}
					// Turns sensor broadcasting on
					else if(serial_data[1] == '5') {
     f06:	85 33       	cpi	r24, 0x35	; 53
     f08:	21 f4       	brne	.+8      	; 0xf12 <__stack+0x413>
						sensor_broadcast = 1;
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	80 93 11 01 	sts	0x0111, r24
     f10:	b1 ce       	rjmp	.-670    	; 0xc74 <__stack+0x175>
						}
					// Turns sensor broadcasting off
					else if(serial_data[1] == '6') {
     f12:	86 33       	cpi	r24, 0x36	; 54
     f14:	29 f4       	brne	.+10     	; 0xf20 <__stack+0x421>
						sensor_broadcast = 0;
     f16:	10 92 11 01 	sts	0x0111, r1
						sensor_broadcast_count = 0;
     f1a:	10 92 10 01 	sts	0x0110, r1
     f1e:	aa ce       	rjmp	.-684    	; 0xc74 <__stack+0x175>
						}				
					else if(serial_data[1] == '7') {
     f20:	87 33       	cpi	r24, 0x37	; 55
     f22:	09 f0       	breq	.+2      	; 0xf26 <__stack+0x427>
     f24:	a7 ce       	rjmp	.-690    	; 0xc74 <__stack+0x175>
     f26:	36 e1       	ldi	r19, 0x16	; 22
     f28:	e3 2e       	mov	r14, r19
     f2a:	31 e0       	ldi	r19, 0x01	; 1
     f2c:	f3 2e       	mov	r15, r19
						for(int i = 0; i < 10; i++) {
							send_char(led_values_temp[i]);
     f2e:	f7 01       	movw	r30, r14
     f30:	81 91       	ld	r24, Z+
     f32:	7f 01       	movw	r14, r30
     f34:	c7 d9       	rcall	.-3186   	; 0x2c4 <send_char>
					else if(serial_data[1] == '6') {
						sensor_broadcast = 0;
						sensor_broadcast_count = 0;
						}				
					else if(serial_data[1] == '7') {
						for(int i = 0; i < 10; i++) {
     f36:	f0 e2       	ldi	r31, 0x20	; 32
     f38:	ef 16       	cp	r14, r31
     f3a:	f1 e0       	ldi	r31, 0x01	; 1
     f3c:	ff 06       	cpc	r15, r31
     f3e:	b9 f7       	brne	.-18     	; 0xf2e <__stack+0x42f>
     f40:	2e e2       	ldi	r18, 0x2E	; 46
     f42:	e2 2e       	mov	r14, r18
     f44:	21 e0       	ldi	r18, 0x01	; 1
     f46:	f2 2e       	mov	r15, r18
							send_char(led_values_temp[i]);
						}
						for(int i = 0; i < 4; i++) {
							send_char(servo_values_temp[i]);
     f48:	f7 01       	movw	r30, r14
     f4a:	81 91       	ld	r24, Z+
     f4c:	7f 01       	movw	r14, r30
     f4e:	ba d9       	rcall	.-3212   	; 0x2c4 <send_char>
						}				
					else if(serial_data[1] == '7') {
						for(int i = 0; i < 10; i++) {
							send_char(led_values_temp[i]);
						}
						for(int i = 0; i < 4; i++) {
     f50:	f2 e3       	ldi	r31, 0x32	; 50
     f52:	ef 16       	cp	r14, r31
     f54:	f1 e0       	ldi	r31, 0x01	; 1
     f56:	ff 06       	cpc	r15, r31
     f58:	b9 f7       	brne	.-18     	; 0xf48 <__stack+0x449>
							send_char(servo_values_temp[i]);
						}
						send_char(vbr_values_temp[0]);
     f5a:	80 91 2c 01 	lds	r24, 0x012C
     f5e:	b2 d9       	rcall	.-3228   	; 0x2c4 <send_char>
						send_char(vbr_values_temp[1]);
     f60:	80 91 2d 01 	lds	r24, 0x012D
     f64:	af d9       	rcall	.-3234   	; 0x2c4 <send_char>
						
						for(int i = 0; i < 2; i++) {
							send_char(motor_vals_compressed[i]);
     f66:	80 91 32 01 	lds	r24, 0x0132
     f6a:	ac d9       	rcall	.-3240   	; 0x2c4 <send_char>
     f6c:	80 91 33 01 	lds	r24, 0x0133
     f70:	a9 d9       	rcall	.-3246   	; 0x2c4 <send_char>
     f72:	80 ce       	rjmp	.-768    	; 0xc74 <__stack+0x175>
					exit_count = 0;					
				}
				break;
				// Returns an incrementing counter - used to measure cycle time and as a keep-alive.
				case 'z':
					activity_state=1;
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	80 93 14 01 	sts	0x0114, r24
					send_char(count);
     f7a:	8a 2d       	mov	r24, r10
     f7c:	a3 d9       	rcall	.-3258   	; 0x2c4 <send_char>
					count++;
     f7e:	2f ef       	ldi	r18, 0xFF	; 255
     f80:	a2 1a       	sub	r10, r18
     f82:	b2 0a       	sbc	r11, r18
					if(count > 255) {
     f84:	8f ef       	ldi	r24, 0xFF	; 255
     f86:	a8 16       	cp	r10, r24
     f88:	b1 04       	cpc	r11, r1
     f8a:	09 f0       	breq	.+2      	; 0xf8e <__stack+0x48f>
     f8c:	0c f4       	brge	.+2      	; 0xf90 <__stack+0x491>
     f8e:	72 ce       	rjmp	.-796    	; 0xc74 <__stack+0x175>
		}

		// Check if we've received data over serial, this is experimental
		if(received_data_available()!=0)
		{
			max_count = 5000000; // Set the time out to 5,000,000, so now we time out in 50 seconds instead of 5
     f90:	90 e4       	ldi	r25, 0x40	; 64
     f92:	49 2e       	mov	r4, r25
     f94:	9b e4       	ldi	r25, 0x4B	; 75
     f96:	59 2e       	mov	r5, r25
     f98:	9c e4       	ldi	r25, 0x4C	; 76
     f9a:	69 2e       	mov	r6, r25
     f9c:	71 2c       	mov	r7, r1
					send_char(count);
					count++;
					if(count > 255) {
						count = 0;
					}
					exit_count = 0;
     f9e:	c1 2c       	mov	r12, r1
     fa0:	d1 2c       	mov	r13, r1
     fa2:	76 01       	movw	r14, r12
				case 'z':
					activity_state=1;
					send_char(count);
					count++;
					if(count > 255) {
						count = 0;
     fa4:	a1 2c       	mov	r10, r1
     fa6:	b1 2c       	mov	r11, r1
     fa8:	73 cd       	rjmp	.-1306   	; 0xa90 <main+0x64>
		}
		else
		{
			usb_data = 1;
		// HID Reports are 8 bytes long. The first byte specifies the function of that report (set motors, get light sensor values, etc).
			switch(HIDReportEcho.ReportData[0]) {
     faa:	80 91 43 02 	lds	r24, 0x0243
     fae:	82 35       	cpi	r24, 0x52	; 82
     fb0:	09 f4       	brne	.+2      	; 0xfb4 <__stack+0x4b5>
     fb2:	61 c0       	rjmp	.+194    	; 0x1076 <__stack+0x577>
     fb4:	c8 f4       	brcc	.+50     	; 0xfe8 <__stack+0x4e9>
     fb6:	8c 34       	cpi	r24, 0x4C	; 76
     fb8:	61 f1       	breq	.+88     	; 0x1012 <__stack+0x513>
     fba:	20 f4       	brcc	.+8      	; 0xfc4 <__stack+0x4c5>
     fbc:	87 34       	cpi	r24, 0x47	; 71
     fbe:	09 f4       	brne	.+2      	; 0xfc2 <__stack+0x4c3>
     fc0:	5f c0       	rjmp	.+190    	; 0x1080 <__stack+0x581>
     fc2:	66 cd       	rjmp	.-1332   	; 0xa90 <main+0x64>
     fc4:	8d 34       	cpi	r24, 0x4D	; 77
     fc6:	61 f1       	breq	.+88     	; 0x1020 <__stack+0x521>
     fc8:	8f 34       	cpi	r24, 0x4F	; 79
     fca:	09 f0       	breq	.+2      	; 0xfce <__stack+0x4cf>
     fcc:	61 cd       	rjmp	.-1342   	; 0xa90 <main+0x64>
				// If O, set an RGB LED using bytes 1-4 of the HID report
				case 'O':
					set_orb(HIDReportEcho.ReportData[1], HIDReportEcho.ReportData[2], HIDReportEcho.ReportData[3], HIDReportEcho.ReportData[4]);
     fce:	20 91 47 02 	lds	r18, 0x0247
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	40 91 46 02 	lds	r20, 0x0246
     fd8:	50 e0       	ldi	r21, 0x00	; 0
     fda:	60 91 45 02 	lds	r22, 0x0245
     fde:	70 e0       	ldi	r23, 0x00	; 0
     fe0:	80 91 44 02 	lds	r24, 0x0244
     fe4:	6a db       	rcall	.-2348   	; 0x6ba <set_orb>
					break;
     fe6:	c6 c0       	rjmp	.+396    	; 0x1174 <__stack+0x675>
		}
		else
		{
			usb_data = 1;
		// HID Reports are 8 bytes long. The first byte specifies the function of that report (set motors, get light sensor values, etc).
			switch(HIDReportEcho.ReportData[0]) {
     fe8:	88 35       	cpi	r24, 0x58	; 88
     fea:	09 f4       	brne	.+2      	; 0xfee <__stack+0x4ef>
     fec:	44 c0       	rjmp	.+136    	; 0x1076 <__stack+0x577>
     fee:	58 f4       	brcc	.+22     	; 0x1006 <__stack+0x507>
     ff0:	83 35       	cpi	r24, 0x53	; 83
     ff2:	01 f1       	breq	.+64     	; 0x1034 <__stack+0x535>
     ff4:	86 35       	cpi	r24, 0x56	; 86
     ff6:	09 f0       	breq	.+2      	; 0xffa <__stack+0x4fb>
     ff8:	4b cd       	rjmp	.-1386   	; 0xa90 <main+0x64>
				case 'M':
					set_motor(HIDReportEcho.ReportData[1]-48, HIDReportEcho.ReportData[2]-48, HIDReportEcho.ReportData[3]);
					break;
				// If 'V', use bytes 1-2 to set vibration motor intensity
				case 'V':
					set_vibration_motor(HIDReportEcho.ReportData[1], HIDReportEcho.ReportData[2]);
     ffa:	60 91 45 02 	lds	r22, 0x0245
     ffe:	80 91 44 02 	lds	r24, 0x0244
    1002:	bf d9       	rcall	.-3202   	; 0x382 <set_vibration_motor>
					break;
    1004:	b7 c0       	rjmp	.+366    	; 0x1174 <__stack+0x675>
		}
		else
		{
			usb_data = 1;
		// HID Reports are 8 bytes long. The first byte specifies the function of that report (set motors, get light sensor values, etc).
			switch(HIDReportEcho.ReportData[0]) {
    1006:	83 37       	cpi	r24, 0x73	; 115
    1008:	e1 f0       	breq	.+56     	; 0x1042 <__stack+0x543>
    100a:	8a 37       	cpi	r24, 0x7A	; 122
    100c:	09 f4       	brne	.+2      	; 0x1010 <__stack+0x511>
    100e:	a6 c0       	rjmp	.+332    	; 0x115c <__stack+0x65d>
    1010:	3f cd       	rjmp	.-1410   	; 0xa90 <main+0x64>
				case 'O':
					set_orb(HIDReportEcho.ReportData[1], HIDReportEcho.ReportData[2], HIDReportEcho.ReportData[3], HIDReportEcho.ReportData[4]);
					break;
				// If 'L', set an LED's intensity with bytes 1-2 of the HID report
				case 'L':
					set_led(HIDReportEcho.ReportData[1], HIDReportEcho.ReportData[2]);
    1012:	60 91 45 02 	lds	r22, 0x0245
    1016:	70 e0       	ldi	r23, 0x00	; 0
    1018:	80 91 44 02 	lds	r24, 0x0244
    101c:	5e db       	rcall	.-2372   	; 0x6da <set_led>
					break;
    101e:	aa c0       	rjmp	.+340    	; 0x1174 <__stack+0x675>
				// If 'M', use bytes 1-3 to set motor speed and direction
				case 'M':
					set_motor(HIDReportEcho.ReportData[1]-48, HIDReportEcho.ReportData[2]-48, HIDReportEcho.ReportData[3]);
    1020:	60 91 45 02 	lds	r22, 0x0245
    1024:	60 53       	subi	r22, 0x30	; 48
    1026:	80 91 44 02 	lds	r24, 0x0244
    102a:	40 91 46 02 	lds	r20, 0x0246
    102e:	80 53       	subi	r24, 0x30	; 48
    1030:	f1 d8       	rcall	.-3614   	; 0x214 <set_motor>
					break;
    1032:	a0 c0       	rjmp	.+320    	; 0x1174 <__stack+0x675>
				case 'V':
					set_vibration_motor(HIDReportEcho.ReportData[1], HIDReportEcho.ReportData[2]);
					break;
				// If 'S', use bytes 1-2 to set servo position
				case 'S':
					set_servo(HIDReportEcho.ReportData[1]-48, HIDReportEcho.ReportData[2]);
    1034:	80 91 44 02 	lds	r24, 0x0244
    1038:	60 91 45 02 	lds	r22, 0x0245
    103c:	80 53       	subi	r24, 0x30	; 48
    103e:	1c d9       	rcall	.-3528   	; 0x278 <set_servo>
					break;
    1040:	99 c0       	rjmp	.+306    	; 0x1174 <__stack+0x675>
				// If 's', return sensor values of the selected sensor port
				case 's':
					if(HIDReportEcho.ReportData[1]=='0')
    1042:	80 91 44 02 	lds	r24, 0x0244
    1046:	80 33       	cpi	r24, 0x30	; 48
    1048:	11 f4       	brne	.+4      	; 0x104e <__stack+0x54f>
					{
						OutGoingReport.ReportData[0] = read_sensor(SENSOR1);
    104a:	86 e6       	ldi	r24, 0x66	; 102
    104c:	07 c0       	rjmp	.+14     	; 0x105c <__stack+0x55d>
					}
					else if(HIDReportEcho.ReportData[1]=='1')
    104e:	81 33       	cpi	r24, 0x31	; 49
    1050:	11 f4       	brne	.+4      	; 0x1056 <__stack+0x557>
					{
						OutGoingReport.ReportData[0] = read_sensor(SENSOR2);
    1052:	85 e6       	ldi	r24, 0x65	; 101
    1054:	03 c0       	rjmp	.+6      	; 0x105c <__stack+0x55d>
					}
					else if(HIDReportEcho.ReportData[1]=='2')
    1056:	82 33       	cpi	r24, 0x32	; 50
    1058:	29 f4       	brne	.+10     	; 0x1064 <__stack+0x565>
					{
						OutGoingReport.ReportData[0] = read_sensor(SENSOR3);
    105a:	84 e6       	ldi	r24, 0x64	; 100
    105c:	af d8       	rcall	.-3746   	; 0x1bc <read_sensor>
    105e:	80 93 4e 02 	sts	0x024E, r24
    1062:	88 c0       	rjmp	.+272    	; 0x1174 <__stack+0x675>
					}
					else if(HIDReportEcho.ReportData[1]=='3')
    1064:	83 33       	cpi	r24, 0x33	; 51
    1066:	11 f4       	brne	.+4      	; 0x106c <__stack+0x56d>
					{
						OutGoingReport.ReportData[0] = read_sensor(SENSOR4);
    1068:	81 e6       	ldi	r24, 0x61	; 97
    106a:	f8 cf       	rjmp	.-16     	; 0x105c <__stack+0x55d>
					}
					else if(HIDReportEcho.ReportData[1]=='4')
    106c:	84 33       	cpi	r24, 0x34	; 52
    106e:	09 f0       	breq	.+2      	; 0x1072 <__stack+0x573>
    1070:	81 c0       	rjmp	.+258    	; 0x1174 <__stack+0x675>
					{
						OutGoingReport.ReportData[0] = read_sensor(EXT_PWR);
    1072:	80 e6       	ldi	r24, 0x60	; 96
    1074:	f3 cf       	rjmp	.-26     	; 0x105c <__stack+0x55d>
					disable_servos();
					disable_vibration_motors();
					break;
				// Fast way to turn everything off AND go to idle state
				case 'R':
					turn_off_motors();
    1076:	cc d8       	rcall	.-3688   	; 0x210 <turn_off_motors>
					turn_off_leds();
    1078:	47 db       	rcall	.-2418   	; 0x708 <turn_off_leds>
					disable_servos();
    107a:	fc d8       	rcall	.-3592   	; 0x274 <disable_servos>
					disable_vibration_motors();
    107c:	94 d9       	rcall	.-3288   	; 0x3a6 <disable_vibration_motors>
					// Turn off everything
					break;
    107e:	7a c0       	rjmp	.+244    	; 0x1174 <__stack+0x675>
				case 'G':
					if(HIDReportEcho.ReportData[1] == '0') {
    1080:	80 91 44 02 	lds	r24, 0x0244
    1084:	80 33       	cpi	r24, 0x30	; 48
    1086:	59 f4       	brne	.+22     	; 0x109e <__stack+0x59f>
    1088:	e6 e1       	ldi	r30, 0x16	; 22
    108a:	f1 e0       	ldi	r31, 0x01	; 1
    108c:	ae e4       	ldi	r26, 0x4E	; 78
    108e:	b2 e0       	ldi	r27, 0x02	; 2
						for(int i = 0; i < 7; i++) {
							OutGoingReport.ReportData[i] = led_values_temp[i];
    1090:	81 91       	ld	r24, Z+
    1092:	8d 93       	st	X+, r24
					disable_vibration_motors();
					// Turn off everything
					break;
				case 'G':
					if(HIDReportEcho.ReportData[1] == '0') {
						for(int i = 0; i < 7; i++) {
    1094:	91 e0       	ldi	r25, 0x01	; 1
    1096:	ed 31       	cpi	r30, 0x1D	; 29
    1098:	f9 07       	cpc	r31, r25
    109a:	d1 f7       	brne	.-12     	; 0x1090 <__stack+0x591>
    109c:	6b c0       	rjmp	.+214    	; 0x1174 <__stack+0x675>
							OutGoingReport.ReportData[i] = led_values_temp[i];
						}
					}
					else if(HIDReportEcho.ReportData[1] == '1') {
    109e:	81 33       	cpi	r24, 0x31	; 49
    10a0:	e9 f4       	brne	.+58     	; 0x10dc <__stack+0x5dd>
						for(int i = 7; i < 10; i++) {
							OutGoingReport.ReportData[i-7] = led_values_temp[i];
    10a2:	80 91 1d 01 	lds	r24, 0x011D
    10a6:	80 93 4e 02 	sts	0x024E, r24
    10aa:	80 91 1e 01 	lds	r24, 0x011E
    10ae:	80 93 4f 02 	sts	0x024F, r24
    10b2:	80 91 1f 01 	lds	r24, 0x011F
    10b6:	80 93 50 02 	sts	0x0250, r24
						}
						for(int i = 0; i < 4; i++) {
							OutGoingReport.ReportData[i+3] = servo_values_temp[i];
    10ba:	80 91 2e 01 	lds	r24, 0x012E
    10be:	80 93 51 02 	sts	0x0251, r24
    10c2:	80 91 2f 01 	lds	r24, 0x012F
    10c6:	80 93 52 02 	sts	0x0252, r24
    10ca:	80 91 30 01 	lds	r24, 0x0130
    10ce:	80 93 53 02 	sts	0x0253, r24
    10d2:	80 91 31 01 	lds	r24, 0x0131
    10d6:	80 93 54 02 	sts	0x0254, r24
    10da:	4c c0       	rjmp	.+152    	; 0x1174 <__stack+0x675>
						}
					}
					else if(HIDReportEcho.ReportData[1] == '2') {
    10dc:	82 33       	cpi	r24, 0x32	; 50
    10de:	c9 f4       	brne	.+50     	; 0x1112 <__stack+0x613>
						for(int i = 0; i < 4; i++) {
							OutGoingReport.ReportData[i] = motor_vals[i];
    10e0:	80 91 34 01 	lds	r24, 0x0134
    10e4:	80 93 4e 02 	sts	0x024E, r24
    10e8:	80 91 35 01 	lds	r24, 0x0135
    10ec:	80 93 4f 02 	sts	0x024F, r24
    10f0:	80 91 36 01 	lds	r24, 0x0136
    10f4:	80 93 50 02 	sts	0x0250, r24
    10f8:	80 91 37 01 	lds	r24, 0x0137
    10fc:	80 93 51 02 	sts	0x0251, r24
						}
						OutGoingReport.ReportData[4] = vbr_values_temp[0];
    1100:	80 91 2c 01 	lds	r24, 0x012C
    1104:	80 93 52 02 	sts	0x0252, r24
						OutGoingReport.ReportData[5] = vbr_values_temp[1];
    1108:	80 91 2d 01 	lds	r24, 0x012D
    110c:	80 93 53 02 	sts	0x0253, r24
    1110:	31 c0       	rjmp	.+98     	; 0x1174 <__stack+0x675>
					}
					else if(HIDReportEcho.ReportData[1] == '3') {
    1112:	83 33       	cpi	r24, 0x33	; 51
    1114:	99 f4       	brne	.+38     	; 0x113c <__stack+0x63d>
						OutGoingReport.ReportData[0] = read_sensor(SENSOR1);
    1116:	86 e6       	ldi	r24, 0x66	; 102
    1118:	51 d8       	rcall	.-3934   	; 0x1bc <read_sensor>
    111a:	80 93 4e 02 	sts	0x024E, r24
						OutGoingReport.ReportData[1] = read_sensor(SENSOR2);
    111e:	85 e6       	ldi	r24, 0x65	; 101
    1120:	4d d8       	rcall	.-3942   	; 0x1bc <read_sensor>
    1122:	80 93 4f 02 	sts	0x024F, r24
						OutGoingReport.ReportData[2] = read_sensor(SENSOR3);
    1126:	84 e6       	ldi	r24, 0x64	; 100
    1128:	49 d8       	rcall	.-3950   	; 0x1bc <read_sensor>
    112a:	80 93 50 02 	sts	0x0250, r24
						OutGoingReport.ReportData[3] = read_sensor(SENSOR4);
    112e:	81 e6       	ldi	r24, 0x61	; 97
    1130:	45 d8       	rcall	.-3958   	; 0x1bc <read_sensor>
    1132:	80 93 51 02 	sts	0x0251, r24
						OutGoingReport.ReportData[4] = read_sensor(EXT_PWR);
    1136:	80 e6       	ldi	r24, 0x60	; 96
    1138:	41 d8       	rcall	.-3966   	; 0x1bc <read_sensor>
    113a:	0d c0       	rjmp	.+26     	; 0x1156 <__stack+0x657>

					}
					// Returns hardware/firmware version
					else if(HIDReportEcho.ReportData[1] == '4') {
    113c:	84 33       	cpi	r24, 0x34	; 52
    113e:	d1 f4       	brne	.+52     	; 0x1174 <__stack+0x675>
						// hardware version
						OutGoingReport.ReportData[0] = 3;
    1140:	83 e0       	ldi	r24, 0x03	; 3
    1142:	80 93 4e 02 	sts	0x024E, r24
						OutGoingReport.ReportData[1] = 0;
    1146:	10 92 4f 02 	sts	0x024F, r1
						// firmware version
						OutGoingReport.ReportData[2] = MAJOR_FIRMWARE_VERSION;
    114a:	82 e0       	ldi	r24, 0x02	; 2
    114c:	80 93 50 02 	sts	0x0250, r24
						OutGoingReport.ReportData[3] = MINOR_FIRMWARE_VERSION;
    1150:	80 93 51 02 	sts	0x0251, r24
						OutGoingReport.ReportData[4] = MINOR_FIRMWARE_VERSION2;
    1154:	82 e6       	ldi	r24, 0x62	; 98
    1156:	80 93 52 02 	sts	0x0252, r24
    115a:	0c c0       	rjmp	.+24     	; 0x1174 <__stack+0x675>

					}
					break;
				// Returns an incrementing counter - used to measure cycle time and as a keep-alive.
				case 'z':
					OutGoingReport.ReportData[0] = count;
    115c:	a0 92 4e 02 	sts	0x024E, r10
					count++;
    1160:	ef ef       	ldi	r30, 0xFF	; 255
    1162:	ae 1a       	sub	r10, r30
    1164:	be 0a       	sbc	r11, r30
					if(count > 255) {
    1166:	ff ef       	ldi	r31, 0xFF	; 255
    1168:	af 16       	cp	r10, r31
    116a:	b1 04       	cpc	r11, r1
    116c:	19 f0       	breq	.+6      	; 0x1174 <__stack+0x675>
    116e:	14 f0       	brlt	.+4      	; 0x1174 <__stack+0x675>
						count = 0;
    1170:	a1 2c       	mov	r10, r1
    1172:	b1 2c       	mov	r11, r1
					break;
			}
			// Only if there was valid data, set the last byte of the outgoing report, and reset the exit_count, max_count things
			if(usb_data == 1) {
				// Reset idle mode
				if(HIDReportEcho.ReportData[0] == 'R')
    1174:	80 91 43 02 	lds	r24, 0x0243
    1178:	82 35       	cpi	r24, 0x52	; 82
    117a:	19 f4       	brne	.+6      	; 0x1182 <__stack+0x683>
				{
					activity_state = 0;
    117c:	10 92 14 01 	sts	0x0114, r1
    1180:	03 c0       	rjmp	.+6      	; 0x1188 <__stack+0x689>
					exit_count = max_count+5;
				}
				else
					activity_state = 1;
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	80 93 14 01 	sts	0x0114, r24
				HIDReportEcho.ReportData[0] = 0x00;
    1188:	10 92 43 02 	sts	0x0243, r1
				// Sets last byte of outgoing report to last byte of incoming report so an outgoing report can be matched to its incoming request
				OutGoingReport.ReportData[7]= HIDReportEcho.ReportData[7];
    118c:	80 91 4a 02 	lds	r24, 0x024A
    1190:	80 93 55 02 	sts	0x0255, r24
				exit_count = 0;
				max_count = 500000;
    1194:	80 e2       	ldi	r24, 0x20	; 32
    1196:	48 2e       	mov	r4, r24
    1198:	81 ea       	ldi	r24, 0xA1	; 161
    119a:	58 2e       	mov	r5, r24
    119c:	87 e0       	ldi	r24, 0x07	; 7
    119e:	68 2e       	mov	r6, r24
    11a0:	71 2c       	mov	r7, r1
    11a2:	6f cd       	rjmp	.-1314   	; 0xc82 <__stack+0x183>

000011a4 <EVENT_USB_Device_Connect>:
	}
}	

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
    11a4:	08 95       	ret

000011a6 <EVENT_USB_Device_Disconnect>:
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	activity_state=0;
    11a6:	10 92 14 01 	sts	0x0114, r1
	turn_off_motors();
    11aa:	32 d8       	rcall	.-3996   	; 0x210 <turn_off_motors>
	turn_off_leds();
    11ac:	ad da       	rcall	.-2726   	; 0x708 <turn_off_leds>
	disable_servos();
    11ae:	62 d8       	rcall	.-3900   	; 0x274 <disable_servos>
	disable_vibration_motors();
    11b0:	fa c8       	rjmp	.-3596   	; 0x3a6 <disable_vibration_motors>

000011b2 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Generic_HID_Interface);
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	91 e0       	ldi	r25, 0x01	; 1
    11b6:	56 d6       	rcall	.+3244   	; 0x1e64 <HID_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    11b8:	e2 ee       	ldi	r30, 0xE2	; 226
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	84 60       	ori	r24, 0x04	; 4
    11c0:	80 83       	st	Z, r24
    11c2:	08 95       	ret

000011c4 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&Generic_HID_Interface);
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	91 e0       	ldi	r25, 0x01	; 1
    11c8:	19 c5       	rjmp	.+2610   	; 0x1bfc <HID_Device_ProcessControlRequest>

000011ca <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
    11ca:	80 91 0e 01 	lds	r24, 0x010E
    11ce:	90 91 0f 01 	lds	r25, 0x010F
    11d2:	00 97       	sbiw	r24, 0x00	; 0
    11d4:	29 f0       	breq	.+10     	; 0x11e0 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
    11d6:	01 97       	sbiw	r24, 0x01	; 1
    11d8:	90 93 0f 01 	sts	0x010F, r25
    11dc:	80 93 0e 01 	sts	0x010E, r24
    11e0:	08 95       	ret

000011e2 <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
    11e2:	0f 93       	push	r16
    11e4:	1f 93       	push	r17
	if (OutGoingReport.ReportID)
    11e6:	90 91 4b 02 	lds	r25, 0x024B
    11ea:	99 23       	and	r25, r25
    11ec:	11 f0       	breq	.+4      	; 0x11f2 <CALLBACK_HID_Device_CreateHIDReport+0x10>
	  *ReportID = OutGoingReport.ReportID;
    11ee:	fb 01       	movw	r30, r22
    11f0:	90 83       	st	Z, r25

	memcpy(ReportData, OutGoingReport.ReportData, OutGoingReport.ReportSize);
    11f2:	40 91 4c 02 	lds	r20, 0x024C
    11f6:	50 91 4d 02 	lds	r21, 0x024D
    11fa:	6e e4       	ldi	r22, 0x4E	; 78
    11fc:	72 e0       	ldi	r23, 0x02	; 2
    11fe:	c9 01       	movw	r24, r18
    1200:	19 d7       	rcall	.+3634   	; 0x2034 <memcpy>

	*ReportSize = OutGoingReport.ReportSize;
    1202:	80 91 4c 02 	lds	r24, 0x024C
    1206:	90 91 4d 02 	lds	r25, 0x024D
    120a:	f8 01       	movw	r30, r16
    120c:	91 83       	std	Z+1, r25	; 0x01
    120e:	80 83       	st	Z, r24
	return false;
}
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	1f 91       	pop	r17
    1214:	0f 91       	pop	r16
    1216:	08 95       	ret

00001218 <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
    1218:	0f 93       	push	r16
    121a:	1f 93       	push	r17
    121c:	a8 01       	movw	r20, r16
	HIDReportEcho.ReportID   = ReportID;
    121e:	a0 e4       	ldi	r26, 0x40	; 64
    1220:	b2 e0       	ldi	r27, 0x02	; 2
    1222:	6c 93       	st	X, r22
	OutGoingReport.ReportID   = ReportID;
    1224:	eb e4       	ldi	r30, 0x4B	; 75
    1226:	f2 e0       	ldi	r31, 0x02	; 2
    1228:	60 83       	st	Z, r22

	HIDReportEcho.ReportSize = ReportSize;
    122a:	12 96       	adiw	r26, 0x02	; 2
    122c:	1c 93       	st	X, r17
    122e:	0e 93       	st	-X, r16
    1230:	11 97       	sbiw	r26, 0x01	; 1
	OutGoingReport.ReportSize = ReportSize;
    1232:	12 83       	std	Z+2, r17	; 0x02
    1234:	01 83       	std	Z+1, r16	; 0x01
	memcpy(HIDReportEcho.ReportData, ReportData, ReportSize);
    1236:	b9 01       	movw	r22, r18
    1238:	83 e4       	ldi	r24, 0x43	; 67
    123a:	92 e0       	ldi	r25, 0x02	; 2
}
    123c:	1f 91       	pop	r17
    123e:	0f 91       	pop	r16
	HIDReportEcho.ReportID   = ReportID;
	OutGoingReport.ReportID   = ReportID;

	HIDReportEcho.ReportSize = ReportSize;
	OutGoingReport.ReportSize = ReportSize;
	memcpy(HIDReportEcho.ReportData, ReportData, ReportSize);
    1240:	f9 c6       	rjmp	.+3570   	; 0x2034 <memcpy>

00001242 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
    1242:	29 2f       	mov	r18, r25
    1244:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    1246:	23 30       	cpi	r18, 0x03	; 3
    1248:	31 05       	cpc	r19, r1
    124a:	e1 f0       	breq	.+56     	; 0x1284 <CALLBACK_USB_GetDescriptor+0x42>
    124c:	5c f4       	brge	.+22     	; 0x1264 <CALLBACK_USB_GetDescriptor+0x22>
    124e:	21 30       	cpi	r18, 0x01	; 1
    1250:	31 05       	cpc	r19, r1
    1252:	99 f0       	breq	.+38     	; 0x127a <CALLBACK_USB_GetDescriptor+0x38>
    1254:	22 30       	cpi	r18, 0x02	; 2
    1256:	31 05       	cpc	r19, r1
    1258:	79 f5       	brne	.+94     	; 0x12b8 <CALLBACK_USB_GetDescriptor+0x76>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
    125a:	82 e2       	ldi	r24, 0x22	; 34
    125c:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
    125e:	26 e1       	ldi	r18, 0x16	; 22
    1260:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
    1262:	2e c0       	rjmp	.+92     	; 0x12c0 <CALLBACK_USB_GetDescriptor+0x7e>
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    1264:	21 32       	cpi	r18, 0x21	; 33
    1266:	31 05       	cpc	r19, r1
    1268:	11 f1       	breq	.+68     	; 0x12ae <CALLBACK_USB_GetDescriptor+0x6c>
    126a:	22 32       	cpi	r18, 0x22	; 34
    126c:	31 05       	cpc	r19, r1
    126e:	21 f5       	brne	.+72     	; 0x12b8 <CALLBACK_USB_GetDescriptor+0x76>
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &GenericReport;
			Size    = sizeof(GenericReport);
    1270:	80 e2       	ldi	r24, 0x20	; 32
    1272:	90 e0       	ldi	r25, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &GenericReport;
    1274:	2a e4       	ldi	r18, 0x4A	; 74
    1276:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(GenericReport);
			break;
    1278:	23 c0       	rjmp	.+70     	; 0x12c0 <CALLBACK_USB_GetDescriptor+0x7e>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
    127a:	82 e1       	ldi	r24, 0x12	; 18
    127c:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
    127e:	28 e3       	ldi	r18, 0x38	; 56
    1280:	31 e0       	ldi	r19, 0x01	; 1
    1282:	1e c0       	rjmp	.+60     	; 0x12c0 <CALLBACK_USB_GetDescriptor+0x7e>
    1284:	99 27       	eor	r25, r25
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
    1286:	81 30       	cpi	r24, 0x01	; 1
    1288:	91 05       	cpc	r25, r1
    128a:	41 f0       	breq	.+16     	; 0x129c <CALLBACK_USB_GetDescriptor+0x5a>
    128c:	82 30       	cpi	r24, 0x02	; 2
    128e:	91 05       	cpc	r25, r1
    1290:	41 f0       	breq	.+16     	; 0x12a2 <CALLBACK_USB_GetDescriptor+0x60>
    1292:	89 2b       	or	r24, r25
    1294:	89 f4       	brne	.+34     	; 0x12b8 <CALLBACK_USB_GetDescriptor+0x76>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
    1296:	e2 e1       	ldi	r30, 0x12	; 18
    1298:	f1 e0       	ldi	r31, 0x01	; 1
    129a:	05 c0       	rjmp	.+10     	; 0x12a6 <CALLBACK_USB_GetDescriptor+0x64>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    129c:	e2 ee       	ldi	r30, 0xE2	; 226
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <CALLBACK_USB_GetDescriptor+0x64>
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
    12a2:	e0 ec       	ldi	r30, 0xC0	; 192
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	84 91       	lpm	r24, Z
    12a8:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
    12aa:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
    12ac:	09 c0       	rjmp	.+18     	; 0x12c0 <CALLBACK_USB_GetDescriptor+0x7e>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
    12ae:	89 e0       	ldi	r24, 0x09	; 9
    12b0:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
    12b2:	28 e2       	ldi	r18, 0x28	; 40
    12b4:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
    12b6:	04 c0       	rjmp	.+8      	; 0x12c0 <CALLBACK_USB_GetDescriptor+0x7e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	30 e0       	ldi	r19, 0x00	; 0
			Address = &GenericReport;
			Size    = sizeof(GenericReport);
			break;
	}

	*DescriptorAddress = Address;
    12c0:	fa 01       	movw	r30, r20
    12c2:	31 83       	std	Z+1, r19	; 0x01
    12c4:	20 83       	st	Z, r18
	return Size;
}
    12c6:	08 95       	ret

000012c8 <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    12c8:	cf 92       	push	r12
    12ca:	df 92       	push	r13
    12cc:	ef 92       	push	r14
    12ce:	ff 92       	push	r15
    12d0:	0f 93       	push	r16
    12d2:	1f 93       	push	r17
    12d4:	cf 93       	push	r28
    12d6:	df 93       	push	r29
    12d8:	ec 01       	movw	r28, r24
    12da:	8b 01       	movw	r16, r22
    12dc:	7a 01       	movw	r14, r20
    12de:	d6 d1       	rcall	.+940    	; 0x168c <Endpoint_WaitUntilReady>
    12e0:	81 11       	cpse	r24, r1
    12e2:	33 c0       	rjmp	.+102    	; 0x134a <Endpoint_Write_Stream_LE+0x82>
    12e4:	e1 14       	cp	r14, r1
    12e6:	f1 04       	cpc	r15, r1
    12e8:	39 f0       	breq	.+14     	; 0x12f8 <Endpoint_Write_Stream_LE+0x30>
    12ea:	f7 01       	movw	r30, r14
    12ec:	80 81       	ld	r24, Z
    12ee:	91 81       	ldd	r25, Z+1	; 0x01
    12f0:	08 1b       	sub	r16, r24
    12f2:	19 0b       	sbc	r17, r25
    12f4:	c8 0f       	add	r28, r24
    12f6:	d9 1f       	adc	r29, r25
    12f8:	c1 2c       	mov	r12, r1
    12fa:	d1 2c       	mov	r13, r1
    12fc:	01 15       	cp	r16, r1
    12fe:	11 05       	cpc	r17, r1
    1300:	19 f1       	breq	.+70     	; 0x1348 <Endpoint_Write_Stream_LE+0x80>
    1302:	80 91 e8 00 	lds	r24, 0x00E8
    1306:	85 fd       	sbrc	r24, 5
    1308:	16 c0       	rjmp	.+44     	; 0x1336 <Endpoint_Write_Stream_LE+0x6e>
    130a:	80 91 e8 00 	lds	r24, 0x00E8
    130e:	8e 77       	andi	r24, 0x7E	; 126
    1310:	80 93 e8 00 	sts	0x00E8, r24
    1314:	59 d4       	rcall	.+2226   	; 0x1bc8 <USB_USBTask>
    1316:	e1 14       	cp	r14, r1
    1318:	f1 04       	cpc	r15, r1
    131a:	49 f0       	breq	.+18     	; 0x132e <Endpoint_Write_Stream_LE+0x66>
    131c:	f7 01       	movw	r30, r14
    131e:	80 81       	ld	r24, Z
    1320:	91 81       	ldd	r25, Z+1	; 0x01
    1322:	c8 0e       	add	r12, r24
    1324:	d9 1e       	adc	r13, r25
    1326:	d1 82       	std	Z+1, r13	; 0x01
    1328:	c0 82       	st	Z, r12
    132a:	85 e0       	ldi	r24, 0x05	; 5
    132c:	0e c0       	rjmp	.+28     	; 0x134a <Endpoint_Write_Stream_LE+0x82>
    132e:	ae d1       	rcall	.+860    	; 0x168c <Endpoint_WaitUntilReady>
    1330:	88 23       	and	r24, r24
    1332:	21 f3       	breq	.-56     	; 0x12fc <Endpoint_Write_Stream_LE+0x34>
    1334:	0a c0       	rjmp	.+20     	; 0x134a <Endpoint_Write_Stream_LE+0x82>
    1336:	89 91       	ld	r24, Y+
    1338:	80 93 f1 00 	sts	0x00F1, r24
    133c:	01 50       	subi	r16, 0x01	; 1
    133e:	11 09       	sbc	r17, r1
    1340:	ff ef       	ldi	r31, 0xFF	; 255
    1342:	cf 1a       	sub	r12, r31
    1344:	df 0a       	sbc	r13, r31
    1346:	da cf       	rjmp	.-76     	; 0x12fc <Endpoint_Write_Stream_LE+0x34>
    1348:	80 e0       	ldi	r24, 0x00	; 0
    134a:	df 91       	pop	r29
    134c:	cf 91       	pop	r28
    134e:	1f 91       	pop	r17
    1350:	0f 91       	pop	r16
    1352:	ff 90       	pop	r15
    1354:	ef 90       	pop	r14
    1356:	df 90       	pop	r13
    1358:	cf 90       	pop	r12
    135a:	08 95       	ret

0000135c <Endpoint_Write_Control_Stream_LE>:
    135c:	20 91 63 03 	lds	r18, 0x0363
    1360:	30 91 64 03 	lds	r19, 0x0364
    1364:	26 17       	cp	r18, r22
    1366:	37 07       	cpc	r19, r23
    1368:	48 f0       	brcs	.+18     	; 0x137c <Endpoint_Write_Control_Stream_LE+0x20>
    136a:	61 15       	cp	r22, r1
    136c:	71 05       	cpc	r23, r1
    136e:	39 f4       	brne	.+14     	; 0x137e <Endpoint_Write_Control_Stream_LE+0x22>
    1370:	20 91 e8 00 	lds	r18, 0x00E8
    1374:	2e 77       	andi	r18, 0x7E	; 126
    1376:	20 93 e8 00 	sts	0x00E8, r18
    137a:	01 c0       	rjmp	.+2      	; 0x137e <Endpoint_Write_Control_Stream_LE+0x22>
    137c:	b9 01       	movw	r22, r18
    137e:	40 e0       	ldi	r20, 0x00	; 0
    1380:	61 15       	cp	r22, r1
    1382:	71 05       	cpc	r23, r1
    1384:	a9 f1       	breq	.+106    	; 0x13f0 <Endpoint_Write_Control_Stream_LE+0x94>
    1386:	20 91 5c 03 	lds	r18, 0x035C
    138a:	22 23       	and	r18, r18
    138c:	09 f4       	brne	.+2      	; 0x1390 <Endpoint_Write_Control_Stream_LE+0x34>
    138e:	41 c0       	rjmp	.+130    	; 0x1412 <Endpoint_Write_Control_Stream_LE+0xb6>
    1390:	25 30       	cpi	r18, 0x05	; 5
    1392:	09 f4       	brne	.+2      	; 0x1396 <Endpoint_Write_Control_Stream_LE+0x3a>
    1394:	40 c0       	rjmp	.+128    	; 0x1416 <Endpoint_Write_Control_Stream_LE+0xba>
    1396:	20 91 e8 00 	lds	r18, 0x00E8
    139a:	23 fd       	sbrc	r18, 3
    139c:	38 c0       	rjmp	.+112    	; 0x140e <Endpoint_Write_Control_Stream_LE+0xb2>
    139e:	20 91 e8 00 	lds	r18, 0x00E8
    13a2:	22 fd       	sbrc	r18, 2
    13a4:	2e c0       	rjmp	.+92     	; 0x1402 <Endpoint_Write_Control_Stream_LE+0xa6>
    13a6:	20 91 e8 00 	lds	r18, 0x00E8
    13aa:	20 ff       	sbrs	r18, 0
    13ac:	e9 cf       	rjmp	.-46     	; 0x1380 <Endpoint_Write_Control_Stream_LE+0x24>
    13ae:	40 91 f3 00 	lds	r20, 0x00F3
    13b2:	20 91 f2 00 	lds	r18, 0x00F2
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	34 2b       	or	r19, r20
    13ba:	fc 01       	movw	r30, r24
    13bc:	cf 01       	movw	r24, r30
    13be:	61 15       	cp	r22, r1
    13c0:	71 05       	cpc	r23, r1
    13c2:	59 f0       	breq	.+22     	; 0x13da <Endpoint_Write_Control_Stream_LE+0x7e>
    13c4:	28 30       	cpi	r18, 0x08	; 8
    13c6:	31 05       	cpc	r19, r1
    13c8:	40 f4       	brcc	.+16     	; 0x13da <Endpoint_Write_Control_Stream_LE+0x7e>
    13ca:	81 91       	ld	r24, Z+
    13cc:	80 93 f1 00 	sts	0x00F1, r24
    13d0:	61 50       	subi	r22, 0x01	; 1
    13d2:	71 09       	sbc	r23, r1
    13d4:	2f 5f       	subi	r18, 0xFF	; 255
    13d6:	3f 4f       	sbci	r19, 0xFF	; 255
    13d8:	f1 cf       	rjmp	.-30     	; 0x13bc <Endpoint_Write_Control_Stream_LE+0x60>
    13da:	41 e0       	ldi	r20, 0x01	; 1
    13dc:	28 30       	cpi	r18, 0x08	; 8
    13de:	31 05       	cpc	r19, r1
    13e0:	09 f0       	breq	.+2      	; 0x13e4 <Endpoint_Write_Control_Stream_LE+0x88>
    13e2:	40 e0       	ldi	r20, 0x00	; 0
    13e4:	20 91 e8 00 	lds	r18, 0x00E8
    13e8:	2e 77       	andi	r18, 0x7E	; 126
    13ea:	20 93 e8 00 	sts	0x00E8, r18
    13ee:	c8 cf       	rjmp	.-112    	; 0x1380 <Endpoint_Write_Control_Stream_LE+0x24>
    13f0:	41 11       	cpse	r20, r1
    13f2:	c9 cf       	rjmp	.-110    	; 0x1386 <Endpoint_Write_Control_Stream_LE+0x2a>
    13f4:	06 c0       	rjmp	.+12     	; 0x1402 <Endpoint_Write_Control_Stream_LE+0xa6>
    13f6:	80 91 5c 03 	lds	r24, 0x035C
    13fa:	88 23       	and	r24, r24
    13fc:	51 f0       	breq	.+20     	; 0x1412 <Endpoint_Write_Control_Stream_LE+0xb6>
    13fe:	85 30       	cpi	r24, 0x05	; 5
    1400:	51 f0       	breq	.+20     	; 0x1416 <Endpoint_Write_Control_Stream_LE+0xba>
    1402:	80 91 e8 00 	lds	r24, 0x00E8
    1406:	82 ff       	sbrs	r24, 2
    1408:	f6 cf       	rjmp	.-20     	; 0x13f6 <Endpoint_Write_Control_Stream_LE+0x9a>
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	08 95       	ret
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	08 95       	ret
    1412:	82 e0       	ldi	r24, 0x02	; 2
    1414:	08 95       	ret
    1416:	83 e0       	ldi	r24, 0x03	; 3
    1418:	08 95       	ret

0000141a <Endpoint_Read_Control_Stream_LE>:
    141a:	61 15       	cp	r22, r1
    141c:	71 05       	cpc	r23, r1
    141e:	29 f4       	brne	.+10     	; 0x142a <Endpoint_Read_Control_Stream_LE+0x10>
    1420:	20 91 e8 00 	lds	r18, 0x00E8
    1424:	2b 77       	andi	r18, 0x7B	; 123
    1426:	20 93 e8 00 	sts	0x00E8, r18
    142a:	fc 01       	movw	r30, r24
    142c:	61 15       	cp	r22, r1
    142e:	71 05       	cpc	r23, r1
    1430:	41 f1       	breq	.+80     	; 0x1482 <Endpoint_Read_Control_Stream_LE+0x68>
    1432:	80 91 5c 03 	lds	r24, 0x035C
    1436:	88 23       	and	r24, r24
    1438:	61 f1       	breq	.+88     	; 0x1492 <Endpoint_Read_Control_Stream_LE+0x78>
    143a:	85 30       	cpi	r24, 0x05	; 5
    143c:	61 f1       	breq	.+88     	; 0x1496 <Endpoint_Read_Control_Stream_LE+0x7c>
    143e:	80 91 e8 00 	lds	r24, 0x00E8
    1442:	83 fd       	sbrc	r24, 3
    1444:	24 c0       	rjmp	.+72     	; 0x148e <Endpoint_Read_Control_Stream_LE+0x74>
    1446:	80 91 e8 00 	lds	r24, 0x00E8
    144a:	82 ff       	sbrs	r24, 2
    144c:	ef cf       	rjmp	.-34     	; 0x142c <Endpoint_Read_Control_Stream_LE+0x12>
    144e:	20 91 f3 00 	lds	r18, 0x00F3
    1452:	80 91 f2 00 	lds	r24, 0x00F2
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	92 2b       	or	r25, r18
    145a:	89 2b       	or	r24, r25
    145c:	31 f0       	breq	.+12     	; 0x146a <Endpoint_Read_Control_Stream_LE+0x50>
    145e:	80 91 f1 00 	lds	r24, 0x00F1
    1462:	81 93       	st	Z+, r24
    1464:	61 50       	subi	r22, 0x01	; 1
    1466:	71 09       	sbc	r23, r1
    1468:	91 f7       	brne	.-28     	; 0x144e <Endpoint_Read_Control_Stream_LE+0x34>
    146a:	80 91 e8 00 	lds	r24, 0x00E8
    146e:	8b 77       	andi	r24, 0x7B	; 123
    1470:	80 93 e8 00 	sts	0x00E8, r24
    1474:	db cf       	rjmp	.-74     	; 0x142c <Endpoint_Read_Control_Stream_LE+0x12>
    1476:	80 91 5c 03 	lds	r24, 0x035C
    147a:	88 23       	and	r24, r24
    147c:	51 f0       	breq	.+20     	; 0x1492 <Endpoint_Read_Control_Stream_LE+0x78>
    147e:	85 30       	cpi	r24, 0x05	; 5
    1480:	51 f0       	breq	.+20     	; 0x1496 <Endpoint_Read_Control_Stream_LE+0x7c>
    1482:	80 91 e8 00 	lds	r24, 0x00E8
    1486:	80 ff       	sbrs	r24, 0
    1488:	f6 cf       	rjmp	.-20     	; 0x1476 <Endpoint_Read_Control_Stream_LE+0x5c>
    148a:	80 e0       	ldi	r24, 0x00	; 0
    148c:	08 95       	ret
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	08 95       	ret
    1492:	82 e0       	ldi	r24, 0x02	; 2
    1494:	08 95       	ret
    1496:	83 e0       	ldi	r24, 0x03	; 3
    1498:	08 95       	ret

0000149a <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    149a:	20 91 63 03 	lds	r18, 0x0363
    149e:	30 91 64 03 	lds	r19, 0x0364
    14a2:	26 17       	cp	r18, r22
    14a4:	37 07       	cpc	r19, r23
    14a6:	48 f0       	brcs	.+18     	; 0x14ba <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    14a8:	61 15       	cp	r22, r1
    14aa:	71 05       	cpc	r23, r1
    14ac:	39 f4       	brne	.+14     	; 0x14bc <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    14ae:	20 91 e8 00 	lds	r18, 0x00E8
    14b2:	2e 77       	andi	r18, 0x7E	; 126
    14b4:	20 93 e8 00 	sts	0x00E8, r18
    14b8:	01 c0       	rjmp	.+2      	; 0x14bc <Endpoint_Write_Control_PStream_LE+0x22>
    14ba:	b9 01       	movw	r22, r18
    14bc:	fc 01       	movw	r30, r24
    14be:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    14c0:	61 15       	cp	r22, r1
    14c2:	71 05       	cpc	r23, r1
    14c4:	91 f1       	breq	.+100    	; 0x152a <Endpoint_Write_Control_PStream_LE+0x90>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    14c6:	80 91 5c 03 	lds	r24, 0x035C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    14ca:	88 23       	and	r24, r24
    14cc:	09 f4       	brne	.+2      	; 0x14d0 <Endpoint_Write_Control_PStream_LE+0x36>
    14ce:	3e c0       	rjmp	.+124    	; 0x154c <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    14d0:	85 30       	cpi	r24, 0x05	; 5
    14d2:	09 f4       	brne	.+2      	; 0x14d6 <Endpoint_Write_Control_PStream_LE+0x3c>
    14d4:	3d c0       	rjmp	.+122    	; 0x1550 <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    14d6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    14da:	83 fd       	sbrc	r24, 3
    14dc:	35 c0       	rjmp	.+106    	; 0x1548 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    14de:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    14e2:	82 fd       	sbrc	r24, 2
    14e4:	2b c0       	rjmp	.+86     	; 0x153c <Endpoint_Write_Control_PStream_LE+0xa2>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    14e6:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    14ea:	80 ff       	sbrs	r24, 0
    14ec:	e9 cf       	rjmp	.-46     	; 0x14c0 <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    14ee:	20 91 f3 00 	lds	r18, 0x00F3
    14f2:	80 91 f2 00 	lds	r24, 0x00F2
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    14fa:	61 15       	cp	r22, r1
    14fc:	71 05       	cpc	r23, r1
    14fe:	59 f0       	breq	.+22     	; 0x1516 <Endpoint_Write_Control_PStream_LE+0x7c>
    1500:	88 30       	cpi	r24, 0x08	; 8
    1502:	91 05       	cpc	r25, r1
    1504:	40 f4       	brcc	.+16     	; 0x1516 <Endpoint_Write_Control_PStream_LE+0x7c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1506:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1508:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    150c:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    150e:	61 50       	subi	r22, 0x01	; 1
    1510:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1512:	01 96       	adiw	r24, 0x01	; 1
    1514:	f2 cf       	rjmp	.-28     	; 0x14fa <Endpoint_Write_Control_PStream_LE+0x60>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1516:	21 e0       	ldi	r18, 0x01	; 1
    1518:	08 97       	sbiw	r24, 0x08	; 8
    151a:	09 f0       	breq	.+2      	; 0x151e <Endpoint_Write_Control_PStream_LE+0x84>
    151c:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    151e:	80 91 e8 00 	lds	r24, 0x00E8
    1522:	8e 77       	andi	r24, 0x7E	; 126
    1524:	80 93 e8 00 	sts	0x00E8, r24
    1528:	cb cf       	rjmp	.-106    	; 0x14c0 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    152a:	21 11       	cpse	r18, r1
    152c:	cc cf       	rjmp	.-104    	; 0x14c6 <Endpoint_Write_Control_PStream_LE+0x2c>
    152e:	06 c0       	rjmp	.+12     	; 0x153c <Endpoint_Write_Control_PStream_LE+0xa2>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1530:	80 91 5c 03 	lds	r24, 0x035C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1534:	88 23       	and	r24, r24
    1536:	51 f0       	breq	.+20     	; 0x154c <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1538:	85 30       	cpi	r24, 0x05	; 5
    153a:	51 f0       	breq	.+20     	; 0x1550 <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    153c:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1540:	82 ff       	sbrs	r24, 2
    1542:	f6 cf       	rjmp	.-20     	; 0x1530 <Endpoint_Write_Control_PStream_LE+0x96>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1544:	80 e0       	ldi	r24, 0x00	; 0
    1546:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    154c:	82 e0       	ldi	r24, 0x02	; 2
    154e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1550:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1552:	08 95       	ret

00001554 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    1554:	98 2f       	mov	r25, r24
    1556:	97 30       	cpi	r25, 0x07	; 7
    1558:	58 f5       	brcc	.+86     	; 0x15b0 <Endpoint_ConfigureEndpoint_Prv+0x5c>
    155a:	90 93 e9 00 	sts	0x00E9, r25
    155e:	98 17       	cp	r25, r24
    1560:	39 f0       	breq	.+14     	; 0x1570 <Endpoint_ConfigureEndpoint_Prv+0x1c>
    1562:	70 91 ec 00 	lds	r23, 0x00EC
    1566:	20 91 ed 00 	lds	r18, 0x00ED
    156a:	50 91 f0 00 	lds	r21, 0x00F0
    156e:	03 c0       	rjmp	.+6      	; 0x1576 <Endpoint_ConfigureEndpoint_Prv+0x22>
    1570:	24 2f       	mov	r18, r20
    1572:	76 2f       	mov	r23, r22
    1574:	50 e0       	ldi	r21, 0x00	; 0
    1576:	21 ff       	sbrs	r18, 1
    1578:	19 c0       	rjmp	.+50     	; 0x15ac <Endpoint_ConfigureEndpoint_Prv+0x58>
    157a:	30 91 eb 00 	lds	r19, 0x00EB
    157e:	3e 7f       	andi	r19, 0xFE	; 254
    1580:	30 93 eb 00 	sts	0x00EB, r19
    1584:	30 91 ed 00 	lds	r19, 0x00ED
    1588:	3d 7f       	andi	r19, 0xFD	; 253
    158a:	30 93 ed 00 	sts	0x00ED, r19
    158e:	30 91 eb 00 	lds	r19, 0x00EB
    1592:	31 60       	ori	r19, 0x01	; 1
    1594:	30 93 eb 00 	sts	0x00EB, r19
    1598:	70 93 ec 00 	sts	0x00EC, r23
    159c:	20 93 ed 00 	sts	0x00ED, r18
    15a0:	50 93 f0 00 	sts	0x00F0, r21
    15a4:	20 91 ee 00 	lds	r18, 0x00EE
    15a8:	27 ff       	sbrs	r18, 7
    15aa:	07 c0       	rjmp	.+14     	; 0x15ba <Endpoint_ConfigureEndpoint_Prv+0x66>
    15ac:	9f 5f       	subi	r25, 0xFF	; 255
    15ae:	d3 cf       	rjmp	.-90     	; 0x1556 <Endpoint_ConfigureEndpoint_Prv+0x2>
    15b0:	8f 70       	andi	r24, 0x0F	; 15
    15b2:	80 93 e9 00 	sts	0x00E9, r24
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	08 95       	ret
    15ba:	80 e0       	ldi	r24, 0x00	; 0
    15bc:	08 95       	ret

000015be <Endpoint_ConfigureEndpointTable>:
    15be:	ef 92       	push	r14
    15c0:	ff 92       	push	r15
    15c2:	0f 93       	push	r16
    15c4:	1f 93       	push	r17
    15c6:	cf 93       	push	r28
    15c8:	df 93       	push	r29
    15ca:	e6 2e       	mov	r14, r22
    15cc:	ec 01       	movw	r28, r24
    15ce:	8c 01       	movw	r16, r24
    15d0:	0c 5f       	subi	r16, 0xFC	; 252
    15d2:	1f 4f       	sbci	r17, 0xFF	; 255
    15d4:	f1 2c       	mov	r15, r1
    15d6:	fe 14       	cp	r15, r14
    15d8:	91 f1       	breq	.+100    	; 0x163e <Endpoint_ConfigureEndpointTable+0x80>
    15da:	58 81       	ld	r21, Y
    15dc:	55 23       	and	r21, r21
    15de:	51 f1       	breq	.+84     	; 0x1634 <Endpoint_ConfigureEndpointTable+0x76>
    15e0:	f8 01       	movw	r30, r16
    15e2:	20 81       	ld	r18, Z
    15e4:	69 81       	ldd	r22, Y+1	; 0x01
    15e6:	7a 81       	ldd	r23, Y+2	; 0x02
    15e8:	31 97       	sbiw	r30, 0x01	; 1
    15ea:	90 81       	ld	r25, Z
    15ec:	85 2f       	mov	r24, r21
    15ee:	8f 70       	andi	r24, 0x0F	; 15
    15f0:	87 30       	cpi	r24, 0x07	; 7
    15f2:	10 f0       	brcs	.+4      	; 0x15f8 <Endpoint_ConfigureEndpointTable+0x3a>
    15f4:	80 e0       	ldi	r24, 0x00	; 0
    15f6:	24 c0       	rjmp	.+72     	; 0x1640 <Endpoint_ConfigureEndpointTable+0x82>
    15f8:	22 30       	cpi	r18, 0x02	; 2
    15fa:	10 f4       	brcc	.+4      	; 0x1600 <Endpoint_ConfigureEndpointTable+0x42>
    15fc:	42 e0       	ldi	r20, 0x02	; 2
    15fe:	01 c0       	rjmp	.+2      	; 0x1602 <Endpoint_ConfigureEndpointTable+0x44>
    1600:	46 e0       	ldi	r20, 0x06	; 6
    1602:	e8 e0       	ldi	r30, 0x08	; 8
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	20 e0       	ldi	r18, 0x00	; 0
    1608:	e6 17       	cp	r30, r22
    160a:	f7 07       	cpc	r31, r23
    160c:	20 f4       	brcc	.+8      	; 0x1616 <Endpoint_ConfigureEndpointTable+0x58>
    160e:	2f 5f       	subi	r18, 0xFF	; 255
    1610:	ee 0f       	add	r30, r30
    1612:	ff 1f       	adc	r31, r31
    1614:	f9 cf       	rjmp	.-14     	; 0x1608 <Endpoint_ConfigureEndpointTable+0x4a>
    1616:	22 95       	swap	r18
    1618:	20 7f       	andi	r18, 0xF0	; 240
    161a:	42 2b       	or	r20, r18
    161c:	f0 e4       	ldi	r31, 0x40	; 64
    161e:	9f 9f       	mul	r25, r31
    1620:	90 01       	movw	r18, r0
    1622:	11 24       	eor	r1, r1
    1624:	55 1f       	adc	r21, r21
    1626:	55 27       	eor	r21, r21
    1628:	55 1f       	adc	r21, r21
    162a:	65 2f       	mov	r22, r21
    162c:	62 2b       	or	r22, r18
    162e:	92 df       	rcall	.-220    	; 0x1554 <Endpoint_ConfigureEndpoint_Prv>
    1630:	88 23       	and	r24, r24
    1632:	01 f3       	breq	.-64     	; 0x15f4 <Endpoint_ConfigureEndpointTable+0x36>
    1634:	f3 94       	inc	r15
    1636:	25 96       	adiw	r28, 0x05	; 5
    1638:	0b 5f       	subi	r16, 0xFB	; 251
    163a:	1f 4f       	sbci	r17, 0xFF	; 255
    163c:	cc cf       	rjmp	.-104    	; 0x15d6 <Endpoint_ConfigureEndpointTable+0x18>
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	df 91       	pop	r29
    1642:	cf 91       	pop	r28
    1644:	1f 91       	pop	r17
    1646:	0f 91       	pop	r16
    1648:	ff 90       	pop	r15
    164a:	ef 90       	pop	r14
    164c:	08 95       	ret

0000164e <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    164e:	80 91 5d 03 	lds	r24, 0x035D
    1652:	87 ff       	sbrs	r24, 7
    1654:	11 c0       	rjmp	.+34     	; 0x1678 <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1656:	80 91 e8 00 	lds	r24, 0x00E8
	{
		while (!(Endpoint_IsOUTReceived()))
    165a:	82 fd       	sbrc	r24, 2
    165c:	05 c0       	rjmp	.+10     	; 0x1668 <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    165e:	80 91 5c 03 	lds	r24, 0x035C
    1662:	81 11       	cpse	r24, r1
    1664:	f8 cf       	rjmp	.-16     	; 0x1656 <Endpoint_ClearStatusStage+0x8>
    1666:	11 c0       	rjmp	.+34     	; 0x168a <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1668:	80 91 e8 00 	lds	r24, 0x00E8
    166c:	8b 77       	andi	r24, 0x7B	; 123
    166e:	0b c0       	rjmp	.+22     	; 0x1686 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1670:	80 91 5c 03 	lds	r24, 0x035C
    1674:	88 23       	and	r24, r24
    1676:	49 f0       	breq	.+18     	; 0x168a <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1678:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    167c:	80 ff       	sbrs	r24, 0
    167e:	f8 cf       	rjmp	.-16     	; 0x1670 <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1680:	80 91 e8 00 	lds	r24, 0x00E8
    1684:	8e 77       	andi	r24, 0x7E	; 126
    1686:	80 93 e8 00 	sts	0x00E8, r24
    168a:	08 95       	ret

0000168c <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    168c:	20 91 e4 00 	lds	r18, 0x00E4
    1690:	30 91 e5 00 	lds	r19, 0x00E5
    1694:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1696:	40 91 ec 00 	lds	r20, 0x00EC
    169a:	84 2f       	mov	r24, r20
    169c:	81 70       	andi	r24, 0x01	; 1
    169e:	40 ff       	sbrs	r20, 0
    16a0:	22 c0       	rjmp	.+68     	; 0x16e6 <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    16a2:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    16a6:	80 fd       	sbrc	r24, 0
    16a8:	1c c0       	rjmp	.+56     	; 0x16e2 <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    16aa:	80 91 5c 03 	lds	r24, 0x035C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    16ae:	88 23       	and	r24, r24
    16b0:	91 f0       	breq	.+36     	; 0x16d6 <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    16b2:	85 30       	cpi	r24, 0x05	; 5
    16b4:	91 f0       	breq	.+36     	; 0x16da <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    16b6:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    16ba:	85 fd       	sbrc	r24, 5
    16bc:	10 c0       	rjmp	.+32     	; 0x16de <Endpoint_WaitUntilReady+0x52>
    16be:	40 91 e4 00 	lds	r20, 0x00E4
    16c2:	50 91 e5 00 	lds	r21, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    16c6:	42 17       	cp	r20, r18
    16c8:	53 07       	cpc	r21, r19
    16ca:	29 f3       	breq	.-54     	; 0x1696 <Endpoint_WaitUntilReady+0xa>
    16cc:	9a 01       	movw	r18, r20
    16ce:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    16d0:	11 f7       	brne	.-60     	; 0x1696 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    16d2:	84 e0       	ldi	r24, 0x04	; 4
    16d4:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    16d6:	82 e0       	ldi	r24, 0x02	; 2
    16d8:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    16da:	83 e0       	ldi	r24, 0x03	; 3
    16dc:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    16e2:	80 e0       	ldi	r24, 0x00	; 0
    16e4:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    16e6:	40 91 e8 00 	lds	r20, 0x00E8
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    16ea:	42 ff       	sbrs	r20, 2
    16ec:	de cf       	rjmp	.-68     	; 0x16aa <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    16ee:	08 95       	ret

000016f0 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    16f0:	0f 93       	push	r16
    16f2:	1f 93       	push	r17
    16f4:	cf 93       	push	r28
    16f6:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    16f8:	4b d0       	rcall	.+150    	; 0x1790 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    16fa:	52 d0       	rcall	.+164    	; 0x17a0 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    16fc:	c8 ed       	ldi	r28, 0xD8	; 216
    16fe:	d0 e0       	ldi	r29, 0x00	; 0
    1700:	88 81       	ld	r24, Y
    1702:	8f 77       	andi	r24, 0x7F	; 127
    1704:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    1706:	88 81       	ld	r24, Y
    1708:	80 68       	ori	r24, 0x80	; 128
    170a:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    170c:	88 81       	ld	r24, Y
    170e:	8f 7d       	andi	r24, 0xDF	; 223
    1710:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1712:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1714:	10 92 5c 03 	sts	0x035C, r1
	USB_Device_ConfigurationNumber  = 0;
    1718:	10 92 58 03 	sts	0x0358, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    171c:	10 92 5a 03 	sts	0x035A, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1720:	10 92 59 03 	sts	0x0359, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1724:	00 ee       	ldi	r16, 0xE0	; 224
    1726:	10 e0       	ldi	r17, 0x00	; 0
    1728:	f8 01       	movw	r30, r16
    172a:	80 81       	ld	r24, Z
    172c:	8b 7f       	andi	r24, 0xFB	; 251
    172e:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1730:	88 81       	ld	r24, Y
    1732:	81 60       	ori	r24, 0x01	; 1
    1734:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1736:	42 e0       	ldi	r20, 0x02	; 2
    1738:	60 e0       	ldi	r22, 0x00	; 0
    173a:	80 e0       	ldi	r24, 0x00	; 0
    173c:	0b df       	rcall	.-490    	; 0x1554 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    173e:	e1 ee       	ldi	r30, 0xE1	; 225
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	8e 7f       	andi	r24, 0xFE	; 254
    1746:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1748:	e2 ee       	ldi	r30, 0xE2	; 226
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	81 60       	ori	r24, 0x01	; 1
    1750:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1752:	80 81       	ld	r24, Z
    1754:	88 60       	ori	r24, 0x08	; 8
    1756:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1758:	f8 01       	movw	r30, r16
    175a:	80 81       	ld	r24, Z
    175c:	8e 7f       	andi	r24, 0xFE	; 254
    175e:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1760:	88 81       	ld	r24, Y
    1762:	80 61       	ori	r24, 0x10	; 16
    1764:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1766:	df 91       	pop	r29
    1768:	cf 91       	pop	r28
    176a:	1f 91       	pop	r17
    176c:	0f 91       	pop	r16
    176e:	08 95       	ret

00001770 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1770:	e8 ed       	ldi	r30, 0xD8	; 216
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	8f 7e       	andi	r24, 0xEF	; 239
    1778:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    177a:	e7 ed       	ldi	r30, 0xD7	; 215
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	81 60       	ori	r24, 0x01	; 1
    1782:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    1784:	84 e0       	ldi	r24, 0x04	; 4
    1786:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	80 93 5b 03 	sts	0x035B, r24

	USB_ResetInterface();
    178e:	b0 cf       	rjmp	.-160    	; 0x16f0 <USB_ResetInterface>

00001790 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    1790:	e8 ed       	ldi	r30, 0xD8	; 216
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	8e 7f       	andi	r24, 0xFE	; 254
    1798:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    179a:	10 92 e2 00 	sts	0x00E2, r1
    179e:	08 95       	ret

000017a0 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    17a0:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    17a4:	10 92 e1 00 	sts	0x00E1, r1
    17a8:	08 95       	ret

000017aa <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    17aa:	1f 92       	push	r1
    17ac:	0f 92       	push	r0
    17ae:	0f b6       	in	r0, 0x3f	; 63
    17b0:	0f 92       	push	r0
    17b2:	11 24       	eor	r1, r1
    17b4:	2f 93       	push	r18
    17b6:	3f 93       	push	r19
    17b8:	4f 93       	push	r20
    17ba:	5f 93       	push	r21
    17bc:	6f 93       	push	r22
    17be:	7f 93       	push	r23
    17c0:	8f 93       	push	r24
    17c2:	9f 93       	push	r25
    17c4:	af 93       	push	r26
    17c6:	bf 93       	push	r27
    17c8:	ef 93       	push	r30
    17ca:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    17cc:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    17d0:	82 ff       	sbrs	r24, 2
    17d2:	0a c0       	rjmp	.+20     	; 0x17e8 <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    17d4:	80 91 e2 00 	lds	r24, 0x00E2
    17d8:	82 ff       	sbrs	r24, 2
    17da:	06 c0       	rjmp	.+12     	; 0x17e8 <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    17dc:	80 91 e1 00 	lds	r24, 0x00E1
    17e0:	8b 7f       	andi	r24, 0xFB	; 251
    17e2:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    17e6:	f1 dc       	rcall	.-1566   	; 0x11ca <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    17e8:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    17ec:	80 ff       	sbrs	r24, 0
    17ee:	1d c0       	rjmp	.+58     	; 0x182a <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    17f0:	80 91 d8 00 	lds	r24, 0x00D8
    17f4:	80 ff       	sbrs	r24, 0
    17f6:	19 c0       	rjmp	.+50     	; 0x182a <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    17f8:	80 91 da 00 	lds	r24, 0x00DA
    17fc:	8e 7f       	andi	r24, 0xFE	; 254
    17fe:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1802:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1806:	80 ff       	sbrs	r24, 0
    1808:	0c c0       	rjmp	.+24     	; 0x1822 <__vector_10+0x78>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    180a:	80 e1       	ldi	r24, 0x10	; 16
    180c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    180e:	82 e1       	ldi	r24, 0x12	; 18
    1810:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1812:	09 b4       	in	r0, 0x29	; 41
    1814:	00 fe       	sbrs	r0, 0
    1816:	fd cf       	rjmp	.-6      	; 0x1812 <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	80 93 5c 03 	sts	0x035C, r24
			EVENT_USB_Device_Connect();
    181e:	c2 dc       	rcall	.-1660   	; 0x11a4 <EVENT_USB_Device_Connect>
    1820:	04 c0       	rjmp	.+8      	; 0x182a <__vector_10+0x80>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1822:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1824:	10 92 5c 03 	sts	0x035C, r1
			EVENT_USB_Device_Disconnect();
    1828:	be dc       	rcall	.-1668   	; 0x11a6 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    182a:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    182e:	80 ff       	sbrs	r24, 0
    1830:	18 c0       	rjmp	.+48     	; 0x1862 <__vector_10+0xb8>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1832:	80 91 e2 00 	lds	r24, 0x00E2
    1836:	80 ff       	sbrs	r24, 0
    1838:	14 c0       	rjmp	.+40     	; 0x1862 <__vector_10+0xb8>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    183a:	80 91 e2 00 	lds	r24, 0x00E2
    183e:	8e 7f       	andi	r24, 0xFE	; 254
    1840:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1844:	80 91 e2 00 	lds	r24, 0x00E2
    1848:	80 61       	ori	r24, 0x10	; 16
    184a:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    184e:	80 91 d8 00 	lds	r24, 0x00D8
    1852:	80 62       	ori	r24, 0x20	; 32
    1854:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1858:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    185a:	85 e0       	ldi	r24, 0x05	; 5
    185c:	80 93 5c 03 	sts	0x035C, r24
		EVENT_USB_Device_Suspend();
    1860:	b2 d1       	rcall	.+868    	; 0x1bc6 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1862:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1866:	84 ff       	sbrs	r24, 4
    1868:	2f c0       	rjmp	.+94     	; 0x18c8 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    186a:	80 91 e2 00 	lds	r24, 0x00E2
    186e:	84 ff       	sbrs	r24, 4
    1870:	2b c0       	rjmp	.+86     	; 0x18c8 <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1872:	80 e1       	ldi	r24, 0x10	; 16
    1874:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1876:	82 e1       	ldi	r24, 0x12	; 18
    1878:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    187a:	09 b4       	in	r0, 0x29	; 41
    187c:	00 fe       	sbrs	r0, 0
    187e:	fd cf       	rjmp	.-6      	; 0x187a <__vector_10+0xd0>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1880:	80 91 d8 00 	lds	r24, 0x00D8
    1884:	8f 7d       	andi	r24, 0xDF	; 223
    1886:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    188a:	80 91 e1 00 	lds	r24, 0x00E1
    188e:	8f 7e       	andi	r24, 0xEF	; 239
    1890:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1894:	80 91 e2 00 	lds	r24, 0x00E2
    1898:	8f 7e       	andi	r24, 0xEF	; 239
    189a:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    189e:	80 91 e2 00 	lds	r24, 0x00E2
    18a2:	81 60       	ori	r24, 0x01	; 1
    18a4:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    18a8:	80 91 58 03 	lds	r24, 0x0358
    18ac:	88 23       	and	r24, r24
    18ae:	11 f0       	breq	.+4      	; 0x18b4 <__vector_10+0x10a>
		  USB_DeviceState = DEVICE_STATE_Configured;
    18b0:	84 e0       	ldi	r24, 0x04	; 4
    18b2:	07 c0       	rjmp	.+14     	; 0x18c2 <__vector_10+0x118>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    18b4:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    18b8:	87 fd       	sbrc	r24, 7
    18ba:	02 c0       	rjmp	.+4      	; 0x18c0 <__vector_10+0x116>
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	01 c0       	rjmp	.+2      	; 0x18c2 <__vector_10+0x118>
    18c0:	83 e0       	ldi	r24, 0x03	; 3
    18c2:	80 93 5c 03 	sts	0x035C, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    18c6:	7f d1       	rcall	.+766    	; 0x1bc6 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    18c8:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    18cc:	83 ff       	sbrs	r24, 3
    18ce:	22 c0       	rjmp	.+68     	; 0x1914 <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    18d0:	80 91 e2 00 	lds	r24, 0x00E2
    18d4:	83 ff       	sbrs	r24, 3
    18d6:	1e c0       	rjmp	.+60     	; 0x1914 <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    18d8:	80 91 e1 00 	lds	r24, 0x00E1
    18dc:	87 7f       	andi	r24, 0xF7	; 247
    18de:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    18e2:	82 e0       	ldi	r24, 0x02	; 2
    18e4:	80 93 5c 03 	sts	0x035C, r24
		USB_Device_ConfigurationNumber = 0;
    18e8:	10 92 58 03 	sts	0x0358, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    18ec:	80 91 e1 00 	lds	r24, 0x00E1
    18f0:	8e 7f       	andi	r24, 0xFE	; 254
    18f2:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    18f6:	80 91 e2 00 	lds	r24, 0x00E2
    18fa:	8e 7f       	andi	r24, 0xFE	; 254
    18fc:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1900:	80 91 e2 00 	lds	r24, 0x00E2
    1904:	80 61       	ori	r24, 0x10	; 16
    1906:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    190a:	42 e0       	ldi	r20, 0x02	; 2
    190c:	60 e0       	ldi	r22, 0x00	; 0
    190e:	80 e0       	ldi	r24, 0x00	; 0
    1910:	21 de       	rcall	.-958    	; 0x1554 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1912:	59 d1       	rcall	.+690    	; 0x1bc6 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1914:	ff 91       	pop	r31
    1916:	ef 91       	pop	r30
    1918:	bf 91       	pop	r27
    191a:	af 91       	pop	r26
    191c:	9f 91       	pop	r25
    191e:	8f 91       	pop	r24
    1920:	7f 91       	pop	r23
    1922:	6f 91       	pop	r22
    1924:	5f 91       	pop	r21
    1926:	4f 91       	pop	r20
    1928:	3f 91       	pop	r19
    192a:	2f 91       	pop	r18
    192c:	0f 90       	pop	r0
    192e:	0f be       	out	0x3f, r0	; 63
    1930:	0f 90       	pop	r0
    1932:	1f 90       	pop	r1
    1934:	18 95       	reti

00001936 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1936:	1f 93       	push	r17
    1938:	cf 93       	push	r28
    193a:	df 93       	push	r29
    193c:	cd b7       	in	r28, 0x3d	; 61
    193e:	de b7       	in	r29, 0x3e	; 62
    1940:	aa 97       	sbiw	r28, 0x2a	; 42
    1942:	0f b6       	in	r0, 0x3f	; 63
    1944:	f8 94       	cli
    1946:	de bf       	out	0x3e, r29	; 62
    1948:	0f be       	out	0x3f, r0	; 63
    194a:	cd bf       	out	0x3d, r28	; 61
    194c:	ed e5       	ldi	r30, 0x5D	; 93
    194e:	f3 e0       	ldi	r31, 0x03	; 3
    1950:	88 e0       	ldi	r24, 0x08	; 8
    1952:	8e 0f       	add	r24, r30
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1954:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1958:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    195a:	8e 13       	cpse	r24, r30
    195c:	fb cf       	rjmp	.-10     	; 0x1954 <USB_Device_ProcessControlRequest+0x1e>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    195e:	32 dc       	rcall	.-1948   	; 0x11c4 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1960:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1964:	83 ff       	sbrs	r24, 3
    1966:	17 c1       	rjmp	.+558    	; 0x1b96 <USB_Device_ProcessControlRequest+0x260>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1968:	80 91 5d 03 	lds	r24, 0x035D

		switch (USB_ControlRequest.bRequest)
    196c:	90 91 5e 03 	lds	r25, 0x035E
    1970:	49 2f       	mov	r20, r25
    1972:	50 e0       	ldi	r21, 0x00	; 0
    1974:	4a 30       	cpi	r20, 0x0A	; 10
    1976:	51 05       	cpc	r21, r1
    1978:	08 f0       	brcs	.+2      	; 0x197c <USB_Device_ProcessControlRequest+0x46>
    197a:	0d c1       	rjmp	.+538    	; 0x1b96 <USB_Device_ProcessControlRequest+0x260>
    197c:	fa 01       	movw	r30, r20
    197e:	ea 5a       	subi	r30, 0xAA	; 170
    1980:	ff 4f       	sbci	r31, 0xFF	; 255
    1982:	45 c3       	rjmp	.+1674   	; 0x200e <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1984:	80 38       	cpi	r24, 0x80	; 128
    1986:	81 f0       	breq	.+32     	; 0x19a8 <USB_Device_ProcessControlRequest+0x72>
    1988:	82 38       	cpi	r24, 0x82	; 130
    198a:	09 f0       	breq	.+2      	; 0x198e <USB_Device_ProcessControlRequest+0x58>
    198c:	04 c1       	rjmp	.+520    	; 0x1b96 <USB_Device_ProcessControlRequest+0x260>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    198e:	80 91 61 03 	lds	r24, 0x0361
    1992:	8f 70       	andi	r24, 0x0F	; 15
    1994:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1998:	80 91 eb 00 	lds	r24, 0x00EB
    199c:	85 fb       	bst	r24, 5
    199e:	88 27       	eor	r24, r24
    19a0:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    19a2:	10 92 e9 00 	sts	0x00E9, r1
    19a6:	06 c0       	rjmp	.+12     	; 0x19b4 <USB_Device_ProcessControlRequest+0x7e>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    19a8:	80 91 59 03 	lds	r24, 0x0359
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    19ac:	90 91 5a 03 	lds	r25, 0x035A
    19b0:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    19b2:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    19b4:	90 91 e8 00 	lds	r25, 0x00E8
    19b8:	97 7f       	andi	r25, 0xF7	; 247
    19ba:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    19be:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    19c2:	10 92 f1 00 	sts	0x00F1, r1
    19c6:	c4 c0       	rjmp	.+392    	; 0x1b50 <USB_Device_ProcessControlRequest+0x21a>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    19c8:	28 2f       	mov	r18, r24
    19ca:	2d 7f       	andi	r18, 0xFD	; 253
    19cc:	09 f0       	breq	.+2      	; 0x19d0 <USB_Device_ProcessControlRequest+0x9a>
    19ce:	e3 c0       	rjmp	.+454    	; 0x1b96 <USB_Device_ProcessControlRequest+0x260>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    19d0:	88 23       	and	r24, r24
    19d2:	19 f0       	breq	.+6      	; 0x19da <USB_Device_ProcessControlRequest+0xa4>
    19d4:	82 30       	cpi	r24, 0x02	; 2
    19d6:	61 f0       	breq	.+24     	; 0x19f0 <USB_Device_ProcessControlRequest+0xba>
    19d8:	de c0       	rjmp	.+444    	; 0x1b96 <USB_Device_ProcessControlRequest+0x260>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    19da:	80 91 5f 03 	lds	r24, 0x035F
    19de:	81 30       	cpi	r24, 0x01	; 1
    19e0:	09 f0       	breq	.+2      	; 0x19e4 <USB_Device_ProcessControlRequest+0xae>
    19e2:	d9 c0       	rjmp	.+434    	; 0x1b96 <USB_Device_ProcessControlRequest+0x260>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    19e4:	93 30       	cpi	r25, 0x03	; 3
    19e6:	09 f0       	breq	.+2      	; 0x19ea <USB_Device_ProcessControlRequest+0xb4>
    19e8:	80 e0       	ldi	r24, 0x00	; 0
    19ea:	80 93 5a 03 	sts	0x035A, r24
    19ee:	2b c0       	rjmp	.+86     	; 0x1a46 <USB_Device_ProcessControlRequest+0x110>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    19f0:	80 91 5f 03 	lds	r24, 0x035F
    19f4:	81 11       	cpse	r24, r1
    19f6:	27 c0       	rjmp	.+78     	; 0x1a46 <USB_Device_ProcessControlRequest+0x110>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    19f8:	80 91 61 03 	lds	r24, 0x0361
    19fc:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    19fe:	09 f4       	brne	.+2      	; 0x1a02 <USB_Device_ProcessControlRequest+0xcc>
    1a00:	ca c0       	rjmp	.+404    	; 0x1b96 <USB_Device_ProcessControlRequest+0x260>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1a02:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1a06:	20 91 eb 00 	lds	r18, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1a0a:	20 ff       	sbrs	r18, 0
    1a0c:	1c c0       	rjmp	.+56     	; 0x1a46 <USB_Device_ProcessControlRequest+0x110>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1a0e:	93 30       	cpi	r25, 0x03	; 3
    1a10:	21 f4       	brne	.+8      	; 0x1a1a <USB_Device_ProcessControlRequest+0xe4>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1a12:	80 91 eb 00 	lds	r24, 0x00EB
    1a16:	80 62       	ori	r24, 0x20	; 32
    1a18:	14 c0       	rjmp	.+40     	; 0x1a42 <USB_Device_ProcessControlRequest+0x10c>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1a1a:	90 91 eb 00 	lds	r25, 0x00EB
    1a1e:	90 61       	ori	r25, 0x10	; 16
    1a20:	90 93 eb 00 	sts	0x00EB, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1a24:	21 e0       	ldi	r18, 0x01	; 1
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	a9 01       	movw	r20, r18
    1a2a:	02 c0       	rjmp	.+4      	; 0x1a30 <USB_Device_ProcessControlRequest+0xfa>
    1a2c:	44 0f       	add	r20, r20
    1a2e:	55 1f       	adc	r21, r21
    1a30:	8a 95       	dec	r24
    1a32:	e2 f7       	brpl	.-8      	; 0x1a2c <USB_Device_ProcessControlRequest+0xf6>
    1a34:	40 93 ea 00 	sts	0x00EA, r20
				UERST = 0;
    1a38:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1a3c:	80 91 eb 00 	lds	r24, 0x00EB
    1a40:	88 60       	ori	r24, 0x08	; 8
    1a42:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1a46:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1a4a:	80 91 e8 00 	lds	r24, 0x00E8
    1a4e:	87 7f       	andi	r24, 0xF7	; 247
    1a50:	82 c0       	rjmp	.+260    	; 0x1b56 <USB_Device_ProcessControlRequest+0x220>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1a52:	81 11       	cpse	r24, r1
    1a54:	a0 c0       	rjmp	.+320    	; 0x1b96 <USB_Device_ProcessControlRequest+0x260>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1a56:	10 91 5f 03 	lds	r17, 0x035F
    1a5a:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1a5c:	80 91 e3 00 	lds	r24, 0x00E3
    1a60:	80 78       	andi	r24, 0x80	; 128
    1a62:	81 2b       	or	r24, r17
    1a64:	80 93 e3 00 	sts	0x00E3, r24
    1a68:	80 91 e8 00 	lds	r24, 0x00E8
    1a6c:	87 7f       	andi	r24, 0xF7	; 247
    1a6e:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1a72:	ed dd       	rcall	.-1062   	; 0x164e <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a74:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    1a78:	80 ff       	sbrs	r24, 0
    1a7a:	fc cf       	rjmp	.-8      	; 0x1a74 <USB_Device_ProcessControlRequest+0x13e>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
    1a7c:	80 91 e3 00 	lds	r24, 0x00E3
    1a80:	80 68       	ori	r24, 0x80	; 128
    1a82:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1a86:	11 11       	cpse	r17, r1
    1a88:	02 c0       	rjmp	.+4      	; 0x1a8e <USB_Device_ProcessControlRequest+0x158>
    1a8a:	82 e0       	ldi	r24, 0x02	; 2
    1a8c:	01 c0       	rjmp	.+2      	; 0x1a90 <USB_Device_ProcessControlRequest+0x15a>
    1a8e:	83 e0       	ldi	r24, 0x03	; 3
    1a90:	80 93 5c 03 	sts	0x035C, r24
    1a94:	80 c0       	rjmp	.+256    	; 0x1b96 <USB_Device_ProcessControlRequest+0x260>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1a96:	80 58       	subi	r24, 0x80	; 128
    1a98:	82 30       	cpi	r24, 0x02	; 2
    1a9a:	08 f0       	brcs	.+2      	; 0x1a9e <USB_Device_ProcessControlRequest+0x168>
    1a9c:	7c c0       	rjmp	.+248    	; 0x1b96 <USB_Device_ProcessControlRequest+0x260>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1a9e:	80 91 5f 03 	lds	r24, 0x035F
    1aa2:	90 91 60 03 	lds	r25, 0x0360
    1aa6:	8c 3d       	cpi	r24, 0xDC	; 220
    1aa8:	53 e0       	ldi	r21, 0x03	; 3
    1aaa:	95 07       	cpc	r25, r21
    1aac:	71 f5       	brne	.+92     	; 0x1b0a <USB_Device_ProcessControlRequest+0x1d4>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1aae:	83 e0       	ldi	r24, 0x03	; 3
    1ab0:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1ab2:	8a e2       	ldi	r24, 0x2A	; 42
    1ab4:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1ab6:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1ab8:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1aba:	de 01       	movw	r26, r28
    1abc:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1abe:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1ac0:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1ac2:	51 e2       	ldi	r21, 0x21	; 33
    1ac4:	e3 2f       	mov	r30, r19
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	50 93 57 00 	sts	0x0057, r21
    1acc:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    1ace:	20 ff       	sbrs	r18, 0
    1ad0:	03 c0       	rjmp	.+6      	; 0x1ad8 <USB_Device_ProcessControlRequest+0x1a2>
					{
						SerialByte >>= 4;
    1ad2:	e2 95       	swap	r30
    1ad4:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1ad6:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1ad8:	ef 70       	andi	r30, 0x0F	; 15
    1ada:	8e 2f       	mov	r24, r30
    1adc:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1ade:	ea 30       	cpi	r30, 0x0A	; 10
    1ae0:	10 f0       	brcs	.+4      	; 0x1ae6 <USB_Device_ProcessControlRequest+0x1b0>
    1ae2:	c7 96       	adiw	r24, 0x37	; 55
    1ae4:	01 c0       	rjmp	.+2      	; 0x1ae8 <USB_Device_ProcessControlRequest+0x1b2>
    1ae6:	c0 96       	adiw	r24, 0x30	; 48
    1ae8:	8d 93       	st	X+, r24
    1aea:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1aec:	2f 5f       	subi	r18, 0xFF	; 255
    1aee:	24 31       	cpi	r18, 0x14	; 20
    1af0:	49 f7       	brne	.-46     	; 0x1ac4 <USB_Device_ProcessControlRequest+0x18e>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1af2:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1af4:	80 91 e8 00 	lds	r24, 0x00E8
    1af8:	87 7f       	andi	r24, 0xF7	; 247
    1afa:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1afe:	6a e2       	ldi	r22, 0x2A	; 42
    1b00:	70 e0       	ldi	r23, 0x00	; 0
    1b02:	ce 01       	movw	r24, r28
    1b04:	01 96       	adiw	r24, 0x01	; 1
    1b06:	2a dc       	rcall	.-1964   	; 0x135c <Endpoint_Write_Control_Stream_LE>
    1b08:	12 c0       	rjmp	.+36     	; 0x1b2e <USB_Device_ProcessControlRequest+0x1f8>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1b0a:	ae 01       	movw	r20, r28
    1b0c:	4f 5f       	subi	r20, 0xFF	; 255
    1b0e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b10:	60 91 61 03 	lds	r22, 0x0361
    1b14:	96 db       	rcall	.-2260   	; 0x1242 <CALLBACK_USB_GetDescriptor>
    1b16:	bc 01       	movw	r22, r24
    1b18:	89 2b       	or	r24, r25
    1b1a:	09 f4       	brne	.+2      	; 0x1b1e <USB_Device_ProcessControlRequest+0x1e8>
    1b1c:	3c c0       	rjmp	.+120    	; 0x1b96 <USB_Device_ProcessControlRequest+0x260>
    1b1e:	90 91 e8 00 	lds	r25, 0x00E8
    1b22:	97 7f       	andi	r25, 0xF7	; 247
    1b24:	90 93 e8 00 	sts	0x00E8, r25
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1b28:	89 81       	ldd	r24, Y+1	; 0x01
    1b2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b2c:	b6 dc       	rcall	.-1684   	; 0x149a <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1b2e:	80 91 e8 00 	lds	r24, 0x00E8
    1b32:	8b 77       	andi	r24, 0x7B	; 123
    1b34:	80 93 e8 00 	sts	0x00E8, r24
    1b38:	2e c0       	rjmp	.+92     	; 0x1b96 <USB_Device_ProcessControlRequest+0x260>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1b3a:	80 38       	cpi	r24, 0x80	; 128
    1b3c:	61 f5       	brne	.+88     	; 0x1b96 <USB_Device_ProcessControlRequest+0x260>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1b3e:	80 91 e8 00 	lds	r24, 0x00E8
    1b42:	87 7f       	andi	r24, 0xF7	; 247
    1b44:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1b48:	80 91 58 03 	lds	r24, 0x0358
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1b4c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b50:	80 91 e8 00 	lds	r24, 0x00E8
    1b54:	8e 77       	andi	r24, 0x7E	; 126
    1b56:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1b5a:	79 dd       	rcall	.-1294   	; 0x164e <Endpoint_ClearStatusStage>
    1b5c:	1c c0       	rjmp	.+56     	; 0x1b96 <USB_Device_ProcessControlRequest+0x260>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1b5e:	81 11       	cpse	r24, r1
    1b60:	1a c0       	rjmp	.+52     	; 0x1b96 <USB_Device_ProcessControlRequest+0x260>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1b62:	90 91 5f 03 	lds	r25, 0x035F
    1b66:	92 30       	cpi	r25, 0x02	; 2
    1b68:	b0 f4       	brcc	.+44     	; 0x1b96 <USB_Device_ProcessControlRequest+0x260>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1b6a:	80 91 e8 00 	lds	r24, 0x00E8
    1b6e:	87 7f       	andi	r24, 0xF7	; 247
    1b70:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1b74:	90 93 58 03 	sts	0x0358, r25

	Endpoint_ClearStatusStage();
    1b78:	6a dd       	rcall	.-1324   	; 0x164e <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    1b7a:	80 91 58 03 	lds	r24, 0x0358
    1b7e:	81 11       	cpse	r24, r1
    1b80:	06 c0       	rjmp	.+12     	; 0x1b8e <USB_Device_ProcessControlRequest+0x258>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1b82:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1b86:	87 fd       	sbrc	r24, 7
    1b88:	02 c0       	rjmp	.+4      	; 0x1b8e <USB_Device_ProcessControlRequest+0x258>
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	01 c0       	rjmp	.+2      	; 0x1b90 <USB_Device_ProcessControlRequest+0x25a>
    1b8e:	84 e0       	ldi	r24, 0x04	; 4
    1b90:	80 93 5c 03 	sts	0x035C, r24

	EVENT_USB_Device_ConfigurationChanged();
    1b94:	0e db       	rcall	.-2532   	; 0x11b2 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1b96:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1b9a:	83 ff       	sbrs	r24, 3
    1b9c:	0a c0       	rjmp	.+20     	; 0x1bb2 <USB_Device_ProcessControlRequest+0x27c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1b9e:	80 91 e8 00 	lds	r24, 0x00E8
    1ba2:	87 7f       	andi	r24, 0xF7	; 247
    1ba4:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1ba8:	80 91 eb 00 	lds	r24, 0x00EB
    1bac:	80 62       	ori	r24, 0x20	; 32
    1bae:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1bb2:	aa 96       	adiw	r28, 0x2a	; 42
    1bb4:	0f b6       	in	r0, 0x3f	; 63
    1bb6:	f8 94       	cli
    1bb8:	de bf       	out	0x3e, r29	; 62
    1bba:	0f be       	out	0x3f, r0	; 63
    1bbc:	cd bf       	out	0x3d, r28	; 61
    1bbe:	df 91       	pop	r29
    1bc0:	cf 91       	pop	r28
    1bc2:	1f 91       	pop	r17
    1bc4:	08 95       	ret

00001bc6 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    1bc6:	08 95       	ret

00001bc8 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1bc8:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    1bca:	80 91 5c 03 	lds	r24, 0x035C
    1bce:	88 23       	and	r24, r24
    1bd0:	99 f0       	breq	.+38     	; 0x1bf8 <USB_USBTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1bd2:	c0 91 e9 00 	lds	r28, 0x00E9
    1bd6:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1bd8:	90 91 ec 00 	lds	r25, 0x00EC
    1bdc:	89 2f       	mov	r24, r25
    1bde:	81 70       	andi	r24, 0x01	; 1
    1be0:	90 fd       	sbrc	r25, 0
    1be2:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1be4:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1be6:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1bea:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    1bee:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    1bf0:	a2 de       	rcall	.-700    	; 0x1936 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1bf2:	cf 70       	andi	r28, 0x0F	; 15
    1bf4:	c0 93 e9 00 	sts	0x00E9, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1bf8:	cf 91       	pop	r28
    1bfa:	08 95       	ret

00001bfc <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1bfc:	6f 92       	push	r6
    1bfe:	7f 92       	push	r7
    1c00:	8f 92       	push	r8
    1c02:	9f 92       	push	r9
    1c04:	af 92       	push	r10
    1c06:	bf 92       	push	r11
    1c08:	cf 92       	push	r12
    1c0a:	df 92       	push	r13
    1c0c:	ef 92       	push	r14
    1c0e:	ff 92       	push	r15
    1c10:	0f 93       	push	r16
    1c12:	1f 93       	push	r17
    1c14:	cf 93       	push	r28
    1c16:	df 93       	push	r29
    1c18:	00 d0       	rcall	.+0      	; 0x1c1a <HID_Device_ProcessControlRequest+0x1e>
    1c1a:	1f 92       	push	r1
    1c1c:	cd b7       	in	r28, 0x3d	; 61
    1c1e:	de b7       	in	r29, 0x3e	; 62
    1c20:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    1c22:	cd b6       	in	r12, 0x3d	; 61
    1c24:	de b6       	in	r13, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1c26:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    1c2a:	83 ff       	sbrs	r24, 3
    1c2c:	04 c1       	rjmp	.+520    	; 0x1e36 <HID_Device_ProcessControlRequest+0x23a>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    1c2e:	f7 01       	movw	r30, r14
    1c30:	80 81       	ld	r24, Z
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	20 91 61 03 	lds	r18, 0x0361
    1c38:	30 91 62 03 	lds	r19, 0x0362
    1c3c:	28 17       	cp	r18, r24
    1c3e:	39 07       	cpc	r19, r25
    1c40:	09 f0       	breq	.+2      	; 0x1c44 <HID_Device_ProcessControlRequest+0x48>
    1c42:	f9 c0       	rjmp	.+498    	; 0x1e36 <HID_Device_ProcessControlRequest+0x23a>
	  return;

	switch (USB_ControlRequest.bRequest)
    1c44:	80 91 5e 03 	lds	r24, 0x035E
    1c48:	83 30       	cpi	r24, 0x03	; 3
    1c4a:	09 f4       	brne	.+2      	; 0x1c4e <HID_Device_ProcessControlRequest+0x52>
    1c4c:	9b c0       	rjmp	.+310    	; 0x1d84 <HID_Device_ProcessControlRequest+0x188>
    1c4e:	30 f4       	brcc	.+12     	; 0x1c5c <HID_Device_ProcessControlRequest+0x60>
    1c50:	81 30       	cpi	r24, 0x01	; 1
    1c52:	71 f0       	breq	.+28     	; 0x1c70 <HID_Device_ProcessControlRequest+0x74>
    1c54:	82 30       	cpi	r24, 0x02	; 2
    1c56:	09 f4       	brne	.+2      	; 0x1c5a <HID_Device_ProcessControlRequest+0x5e>
    1c58:	d2 c0       	rjmp	.+420    	; 0x1dfe <HID_Device_ProcessControlRequest+0x202>
    1c5a:	ed c0       	rjmp	.+474    	; 0x1e36 <HID_Device_ProcessControlRequest+0x23a>
    1c5c:	8a 30       	cpi	r24, 0x0A	; 10
    1c5e:	09 f4       	brne	.+2      	; 0x1c62 <HID_Device_ProcessControlRequest+0x66>
    1c60:	b6 c0       	rjmp	.+364    	; 0x1dce <HID_Device_ProcessControlRequest+0x1d2>
    1c62:	8b 30       	cpi	r24, 0x0B	; 11
    1c64:	09 f4       	brne	.+2      	; 0x1c68 <HID_Device_ProcessControlRequest+0x6c>
    1c66:	9f c0       	rjmp	.+318    	; 0x1da6 <HID_Device_ProcessControlRequest+0x1aa>
    1c68:	89 30       	cpi	r24, 0x09	; 9
    1c6a:	09 f0       	breq	.+2      	; 0x1c6e <HID_Device_ProcessControlRequest+0x72>
    1c6c:	e4 c0       	rjmp	.+456    	; 0x1e36 <HID_Device_ProcessControlRequest+0x23a>
    1c6e:	4d c0       	rjmp	.+154    	; 0x1d0a <HID_Device_ProcessControlRequest+0x10e>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1c70:	80 91 5d 03 	lds	r24, 0x035D
    1c74:	81 3a       	cpi	r24, 0xA1	; 161
    1c76:	09 f0       	breq	.+2      	; 0x1c7a <HID_Device_ProcessControlRequest+0x7e>
    1c78:	de c0       	rjmp	.+444    	; 0x1e36 <HID_Device_ProcessControlRequest+0x23a>
    1c7a:	8d b6       	in	r8, 0x3d	; 61
    1c7c:	9e b6       	in	r9, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
    1c7e:	1a 82       	std	Y+2, r1	; 0x02
    1c80:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    1c82:	80 91 5f 03 	lds	r24, 0x035F
    1c86:	10 91 60 03 	lds	r17, 0x0360
    1c8a:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    1c8c:	f7 01       	movw	r30, r14
    1c8e:	80 85       	ldd	r24, Z+8	; 0x08
    1c90:	48 2f       	mov	r20, r24
    1c92:	50 e0       	ldi	r21, 0x00	; 0
    1c94:	8d b7       	in	r24, 0x3d	; 61
    1c96:	9e b7       	in	r25, 0x3e	; 62
    1c98:	84 1b       	sub	r24, r20
    1c9a:	95 0b       	sbc	r25, r21
    1c9c:	0f b6       	in	r0, 0x3f	; 63
    1c9e:	f8 94       	cli
    1ca0:	9e bf       	out	0x3e, r25	; 62
    1ca2:	0f be       	out	0x3f, r0	; 63
    1ca4:	8d bf       	out	0x3d, r24	; 61
    1ca6:	ed b7       	in	r30, 0x3d	; 61
    1ca8:	fe b7       	in	r31, 0x3e	; 62
    1caa:	31 96       	adiw	r30, 0x01	; 1
    1cac:	5f 01       	movw	r10, r30

				memset(ReportData, 0, sizeof(ReportData));
    1cae:	60 e0       	ldi	r22, 0x00	; 0
    1cb0:	70 e0       	ldi	r23, 0x00	; 0
    1cb2:	cf 01       	movw	r24, r30
    1cb4:	c8 d1       	rcall	.+912    	; 0x2046 <memset>
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    1cb6:	4f ef       	ldi	r20, 0xFF	; 255
    1cb8:	41 0f       	add	r20, r17
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    1cba:	8e 01       	movw	r16, r28
    1cbc:	0f 5f       	subi	r16, 0xFF	; 255
    1cbe:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc0:	95 01       	movw	r18, r10
    1cc2:	be 01       	movw	r22, r28
    1cc4:	6d 5f       	subi	r22, 0xFD	; 253
    1cc6:	7f 4f       	sbci	r23, 0xFF	; 255
    1cc8:	c7 01       	movw	r24, r14
    1cca:	8b da       	rcall	.-2794   	; 0x11e2 <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1ccc:	f7 01       	movw	r30, r14
    1cce:	86 81       	ldd	r24, Z+6	; 0x06
    1cd0:	97 81       	ldd	r25, Z+7	; 0x07
    1cd2:	00 97       	sbiw	r24, 0x00	; 0
    1cd4:	21 f0       	breq	.+8      	; 0x1cde <HID_Device_ProcessControlRequest+0xe2>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    1cd6:	40 85       	ldd	r20, Z+8	; 0x08
    1cd8:	50 e0       	ldi	r21, 0x00	; 0
    1cda:	b5 01       	movw	r22, r10
    1cdc:	ab d1       	rcall	.+854    	; 0x2034 <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1cde:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1ce2:	80 91 e8 00 	lds	r24, 0x00E8
    1ce6:	87 7f       	andi	r24, 0xF7	; 247
    1ce8:	80 93 e8 00 	sts	0x00E8, r24
				}

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    1cec:	69 81       	ldd	r22, Y+1	; 0x01
    1cee:	7a 81       	ldd	r23, Y+2	; 0x02
    1cf0:	c5 01       	movw	r24, r10
    1cf2:	34 db       	rcall	.-2456   	; 0x135c <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1cf4:	80 91 e8 00 	lds	r24, 0x00E8
    1cf8:	8b 77       	andi	r24, 0x7B	; 123
    1cfa:	80 93 e8 00 	sts	0x00E8, r24
    1cfe:	0f b6       	in	r0, 0x3f	; 63
    1d00:	f8 94       	cli
    1d02:	9e be       	out	0x3e, r9	; 62
    1d04:	0f be       	out	0x3f, r0	; 63
    1d06:	8d be       	out	0x3d, r8	; 61
    1d08:	96 c0       	rjmp	.+300    	; 0x1e36 <HID_Device_ProcessControlRequest+0x23a>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1d0a:	80 91 5d 03 	lds	r24, 0x035D
    1d0e:	81 32       	cpi	r24, 0x21	; 33
    1d10:	09 f0       	breq	.+2      	; 0x1d14 <HID_Device_ProcessControlRequest+0x118>
    1d12:	91 c0       	rjmp	.+290    	; 0x1e36 <HID_Device_ProcessControlRequest+0x23a>
    1d14:	ad b6       	in	r10, 0x3d	; 61
    1d16:	be b6       	in	r11, 0x3e	; 62
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    1d18:	00 91 63 03 	lds	r16, 0x0363
    1d1c:	10 91 64 03 	lds	r17, 0x0364
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    1d20:	70 90 5f 03 	lds	r7, 0x035F
    1d24:	60 90 60 03 	lds	r6, 0x0360
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    1d28:	8d b7       	in	r24, 0x3d	; 61
    1d2a:	9e b7       	in	r25, 0x3e	; 62
    1d2c:	80 1b       	sub	r24, r16
    1d2e:	91 0b       	sbc	r25, r17
    1d30:	0f b6       	in	r0, 0x3f	; 63
    1d32:	f8 94       	cli
    1d34:	9e bf       	out	0x3e, r25	; 62
    1d36:	0f be       	out	0x3f, r0	; 63
    1d38:	8d bf       	out	0x3d, r24	; 61
    1d3a:	ed b7       	in	r30, 0x3d	; 61
    1d3c:	fe b7       	in	r31, 0x3e	; 62
    1d3e:	31 96       	adiw	r30, 0x01	; 1
    1d40:	4f 01       	movw	r8, r30
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1d42:	80 91 e8 00 	lds	r24, 0x00E8
    1d46:	87 7f       	andi	r24, 0xF7	; 247
    1d48:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    1d4c:	b8 01       	movw	r22, r16
    1d4e:	cf 01       	movw	r24, r30
    1d50:	64 db       	rcall	.-2360   	; 0x141a <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1d52:	80 91 e8 00 	lds	r24, 0x00E8
    1d56:	8e 77       	andi	r24, 0x7E	; 126
    1d58:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    1d5c:	21 e0       	ldi	r18, 0x01	; 1
    1d5e:	71 10       	cpse	r7, r1
    1d60:	01 c0       	rjmp	.+2      	; 0x1d64 <HID_Device_ProcessControlRequest+0x168>
    1d62:	20 e0       	ldi	r18, 0x00	; 0
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	02 1b       	sub	r16, r18
    1d68:	13 0b       	sbc	r17, r19
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
    1d6a:	28 0d       	add	r18, r8
    1d6c:	39 1d       	adc	r19, r9
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    1d6e:	4f ef       	ldi	r20, 0xFF	; 255
    1d70:	46 0d       	add	r20, r6

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    1d72:	67 2d       	mov	r22, r7
    1d74:	c7 01       	movw	r24, r14
    1d76:	50 da       	rcall	.-2912   	; 0x1218 <CALLBACK_HID_Device_ProcessHIDReport>
    1d78:	0f b6       	in	r0, 0x3f	; 63
    1d7a:	f8 94       	cli
    1d7c:	be be       	out	0x3e, r11	; 62
    1d7e:	0f be       	out	0x3f, r0	; 63
    1d80:	ad be       	out	0x3d, r10	; 61
    1d82:	59 c0       	rjmp	.+178    	; 0x1e36 <HID_Device_ProcessControlRequest+0x23a>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1d84:	80 91 5d 03 	lds	r24, 0x035D
    1d88:	81 3a       	cpi	r24, 0xA1	; 161
    1d8a:	09 f0       	breq	.+2      	; 0x1d8e <HID_Device_ProcessControlRequest+0x192>
    1d8c:	54 c0       	rjmp	.+168    	; 0x1e36 <HID_Device_ProcessControlRequest+0x23a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1d8e:	80 91 e8 00 	lds	r24, 0x00E8
    1d92:	87 7f       	andi	r24, 0xF7	; 247
    1d94:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1d98:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    1d9c:	80 ff       	sbrs	r24, 0
    1d9e:	fc cf       	rjmp	.-8      	; 0x1d98 <HID_Device_ProcessControlRequest+0x19c>
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    1da0:	f7 01       	movw	r30, r14
    1da2:	81 85       	ldd	r24, Z+9	; 0x09
    1da4:	40 c0       	rjmp	.+128    	; 0x1e26 <HID_Device_ProcessControlRequest+0x22a>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1da6:	80 91 5d 03 	lds	r24, 0x035D
    1daa:	81 32       	cpi	r24, 0x21	; 33
    1dac:	09 f0       	breq	.+2      	; 0x1db0 <HID_Device_ProcessControlRequest+0x1b4>
    1dae:	43 c0       	rjmp	.+134    	; 0x1e36 <HID_Device_ProcessControlRequest+0x23a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1db0:	80 91 e8 00 	lds	r24, 0x00E8
    1db4:	87 7f       	andi	r24, 0xF7	; 247
    1db6:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1dba:	49 dc       	rcall	.-1902   	; 0x164e <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    1dbc:	90 91 5f 03 	lds	r25, 0x035F
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	91 11       	cpse	r25, r1
    1dc4:	01 c0       	rjmp	.+2      	; 0x1dc8 <HID_Device_ProcessControlRequest+0x1cc>
    1dc6:	80 e0       	ldi	r24, 0x00	; 0
    1dc8:	f7 01       	movw	r30, r14
    1dca:	81 87       	std	Z+9, r24	; 0x09
    1dcc:	34 c0       	rjmp	.+104    	; 0x1e36 <HID_Device_ProcessControlRequest+0x23a>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1dce:	80 91 5d 03 	lds	r24, 0x035D
    1dd2:	81 32       	cpi	r24, 0x21	; 33
    1dd4:	81 f5       	brne	.+96     	; 0x1e36 <HID_Device_ProcessControlRequest+0x23a>
    1dd6:	80 91 e8 00 	lds	r24, 0x00E8
    1dda:	87 7f       	andi	r24, 0xF7	; 247
    1ddc:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1de0:	36 dc       	rcall	.-1940   	; 0x164e <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    1de2:	80 91 5f 03 	lds	r24, 0x035F
    1de6:	90 91 60 03 	lds	r25, 0x0360
    1dea:	88 27       	eor	r24, r24
    1dec:	36 e0       	ldi	r19, 0x06	; 6
    1dee:	96 95       	lsr	r25
    1df0:	87 95       	ror	r24
    1df2:	3a 95       	dec	r19
    1df4:	e1 f7       	brne	.-8      	; 0x1dee <HID_Device_ProcessControlRequest+0x1f2>
    1df6:	f7 01       	movw	r30, r14
    1df8:	95 87       	std	Z+13, r25	; 0x0d
    1dfa:	84 87       	std	Z+12, r24	; 0x0c
    1dfc:	1c c0       	rjmp	.+56     	; 0x1e36 <HID_Device_ProcessControlRequest+0x23a>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1dfe:	80 91 5d 03 	lds	r24, 0x035D
    1e02:	81 3a       	cpi	r24, 0xA1	; 161
    1e04:	c1 f4       	brne	.+48     	; 0x1e36 <HID_Device_ProcessControlRequest+0x23a>
    1e06:	80 91 e8 00 	lds	r24, 0x00E8
    1e0a:	87 7f       	andi	r24, 0xF7	; 247
    1e0c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1e10:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    1e14:	80 ff       	sbrs	r24, 0
    1e16:	fc cf       	rjmp	.-8      	; 0x1e10 <HID_Device_ProcessControlRequest+0x214>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    1e18:	f7 01       	movw	r30, r14
    1e1a:	84 85       	ldd	r24, Z+12	; 0x0c
    1e1c:	95 85       	ldd	r25, Z+13	; 0x0d
    1e1e:	96 95       	lsr	r25
    1e20:	87 95       	ror	r24
    1e22:	96 95       	lsr	r25
    1e24:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1e26:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1e2a:	80 91 e8 00 	lds	r24, 0x00E8
    1e2e:	8e 77       	andi	r24, 0x7E	; 126
    1e30:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1e34:	0c dc       	rcall	.-2024   	; 0x164e <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    1e36:	0f b6       	in	r0, 0x3f	; 63
    1e38:	f8 94       	cli
    1e3a:	de be       	out	0x3e, r13	; 62
    1e3c:	0f be       	out	0x3f, r0	; 63
    1e3e:	cd be       	out	0x3d, r12	; 61
    1e40:	0f 90       	pop	r0
    1e42:	0f 90       	pop	r0
    1e44:	0f 90       	pop	r0
    1e46:	df 91       	pop	r29
    1e48:	cf 91       	pop	r28
    1e4a:	1f 91       	pop	r17
    1e4c:	0f 91       	pop	r16
    1e4e:	ff 90       	pop	r15
    1e50:	ef 90       	pop	r14
    1e52:	df 90       	pop	r13
    1e54:	cf 90       	pop	r12
    1e56:	bf 90       	pop	r11
    1e58:	af 90       	pop	r10
    1e5a:	9f 90       	pop	r9
    1e5c:	8f 90       	pop	r8
    1e5e:	7f 90       	pop	r7
    1e60:	6f 90       	pop	r6
    1e62:	08 95       	ret

00001e64 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    1e64:	fc 01       	movw	r30, r24
    1e66:	39 96       	adiw	r30, 0x09	; 9
    1e68:	27 e0       	ldi	r18, 0x07	; 7
    1e6a:	df 01       	movw	r26, r30
    1e6c:	1d 92       	st	X+, r1
    1e6e:	2a 95       	dec	r18
    1e70:	e9 f7       	brne	.-6      	; 0x1e6c <HID_Device_ConfigureEndpoints+0x8>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    1e72:	21 e0       	ldi	r18, 0x01	; 1
    1e74:	fc 01       	movw	r30, r24
    1e76:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    1e78:	24 ef       	ldi	r18, 0xF4	; 244
    1e7a:	31 e0       	ldi	r19, 0x01	; 1
    1e7c:	35 87       	std	Z+13, r19	; 0x0d
    1e7e:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    1e80:	23 e0       	ldi	r18, 0x03	; 3
    1e82:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    1e84:	61 e0       	ldi	r22, 0x01	; 1
    1e86:	01 96       	adiw	r24, 0x01	; 1
    1e88:	9a cb       	rjmp	.-2252   	; 0x15be <Endpoint_ConfigureEndpointTable>

00001e8a <HID_Device_USBTask>:

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1e8a:	4f 92       	push	r4
    1e8c:	5f 92       	push	r5
    1e8e:	6f 92       	push	r6
    1e90:	7f 92       	push	r7
    1e92:	8f 92       	push	r8
    1e94:	9f 92       	push	r9
    1e96:	af 92       	push	r10
    1e98:	bf 92       	push	r11
    1e9a:	cf 92       	push	r12
    1e9c:	df 92       	push	r13
    1e9e:	ef 92       	push	r14
    1ea0:	ff 92       	push	r15
    1ea2:	0f 93       	push	r16
    1ea4:	1f 93       	push	r17
    1ea6:	cf 93       	push	r28
    1ea8:	df 93       	push	r29
    1eaa:	00 d0       	rcall	.+0      	; 0x1eac <HID_Device_USBTask+0x22>
    1eac:	1f 92       	push	r1
    1eae:	cd b7       	in	r28, 0x3d	; 61
    1eb0:	de b7       	in	r29, 0x3e	; 62
    1eb2:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    1eb4:	ad b6       	in	r10, 0x3d	; 61
    1eb6:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    1eb8:	80 91 5c 03 	lds	r24, 0x035C
    1ebc:	84 30       	cpi	r24, 0x04	; 4
    1ebe:	09 f0       	breq	.+2      	; 0x1ec2 <HID_Device_USBTask+0x38>
    1ec0:	8d c0       	rjmp	.+282    	; 0x1fdc <HID_Device_USBTask+0x152>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1ec2:	80 91 e4 00 	lds	r24, 0x00E4
    1ec6:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    1eca:	f7 01       	movw	r30, r14
    1ecc:	22 85       	ldd	r18, Z+10	; 0x0a
    1ece:	33 85       	ldd	r19, Z+11	; 0x0b
    1ed0:	28 17       	cp	r18, r24
    1ed2:	39 07       	cpc	r19, r25
    1ed4:	09 f4       	brne	.+2      	; 0x1ed8 <HID_Device_USBTask+0x4e>
    1ed6:	82 c0       	rjmp	.+260    	; 0x1fdc <HID_Device_USBTask+0x152>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ed8:	81 81       	ldd	r24, Z+1	; 0x01
    1eda:	8f 70       	andi	r24, 0x0F	; 15
    1edc:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1ee0:	80 91 e8 00 	lds	r24, 0x00E8
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    1ee4:	85 ff       	sbrs	r24, 5
    1ee6:	7a c0       	rjmp	.+244    	; 0x1fdc <HID_Device_USBTask+0x152>
    1ee8:	8d b6       	in	r8, 0x3d	; 61
    1eea:	9e b6       	in	r9, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    1eec:	40 85       	ldd	r20, Z+8	; 0x08
    1eee:	50 e0       	ldi	r21, 0x00	; 0
    1ef0:	8d b7       	in	r24, 0x3d	; 61
    1ef2:	9e b7       	in	r25, 0x3e	; 62
    1ef4:	84 1b       	sub	r24, r20
    1ef6:	95 0b       	sbc	r25, r21
    1ef8:	0f b6       	in	r0, 0x3f	; 63
    1efa:	f8 94       	cli
    1efc:	9e bf       	out	0x3e, r25	; 62
    1efe:	0f be       	out	0x3f, r0	; 63
    1f00:	8d bf       	out	0x3d, r24	; 61
    1f02:	ed b7       	in	r30, 0x3d	; 61
    1f04:	fe b7       	in	r31, 0x3e	; 62
    1f06:	31 96       	adiw	r30, 0x01	; 1
    1f08:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
    1f0a:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
    1f0c:	1a 82       	std	Y+2, r1	; 0x02
    1f0e:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
    1f10:	60 e0       	ldi	r22, 0x00	; 0
    1f12:	70 e0       	ldi	r23, 0x00	; 0
    1f14:	cf 01       	movw	r24, r30
    1f16:	97 d0       	rcall	.+302    	; 0x2046 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    1f18:	8e 01       	movw	r16, r28
    1f1a:	0f 5f       	subi	r16, 0xFF	; 255
    1f1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f1e:	96 01       	movw	r18, r12
    1f20:	40 e0       	ldi	r20, 0x00	; 0
    1f22:	be 01       	movw	r22, r28
    1f24:	6d 5f       	subi	r22, 0xFD	; 253
    1f26:	7f 4f       	sbci	r23, 0xFF	; 255
    1f28:	c7 01       	movw	r24, r14
    1f2a:	5b d9       	rcall	.-3402   	; 0x11e2 <CALLBACK_HID_Device_CreateHIDReport>
    1f2c:	48 2e       	mov	r4, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    1f2e:	f7 01       	movw	r30, r14
    1f30:	84 85       	ldd	r24, Z+12	; 0x0c
    1f32:	95 85       	ldd	r25, Z+13	; 0x0d
    1f34:	89 2b       	or	r24, r25
    1f36:	51 f0       	breq	.+20     	; 0x1f4c <HID_Device_USBTask+0xc2>
    1f38:	91 e0       	ldi	r25, 0x01	; 1
    1f3a:	80 e0       	ldi	r24, 0x00	; 0
    1f3c:	26 85       	ldd	r18, Z+14	; 0x0e
    1f3e:	37 85       	ldd	r19, Z+15	; 0x0f
    1f40:	23 2b       	or	r18, r19
    1f42:	09 f0       	breq	.+2      	; 0x1f46 <HID_Device_USBTask+0xbc>
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	09 2f       	mov	r16, r25
    1f48:	18 2f       	mov	r17, r24
    1f4a:	02 c0       	rjmp	.+4      	; 0x1f50 <HID_Device_USBTask+0xc6>
    1f4c:	00 e0       	ldi	r16, 0x00	; 0
    1f4e:	10 e0       	ldi	r17, 0x00	; 0

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1f50:	f7 01       	movw	r30, r14
    1f52:	66 80       	ldd	r6, Z+6	; 0x06
    1f54:	77 80       	ldd	r7, Z+7	; 0x07
    1f56:	61 14       	cp	r6, r1
    1f58:	71 04       	cpc	r7, r1
    1f5a:	89 f0       	breq	.+34     	; 0x1f7e <HID_Device_USBTask+0xf4>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    1f5c:	49 81       	ldd	r20, Y+1	; 0x01
    1f5e:	5a 81       	ldd	r21, Y+2	; 0x02
    1f60:	b3 01       	movw	r22, r6
    1f62:	c6 01       	movw	r24, r12
    1f64:	5a d0       	rcall	.+180    	; 0x201a <memcmp>
    1f66:	55 24       	eor	r5, r5
    1f68:	53 94       	inc	r5
    1f6a:	89 2b       	or	r24, r25
    1f6c:	09 f4       	brne	.+2      	; 0x1f70 <HID_Device_USBTask+0xe6>
    1f6e:	51 2c       	mov	r5, r1
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    1f70:	f7 01       	movw	r30, r14
    1f72:	40 85       	ldd	r20, Z+8	; 0x08
    1f74:	50 e0       	ldi	r21, 0x00	; 0
    1f76:	b6 01       	movw	r22, r12
    1f78:	c3 01       	movw	r24, r6
    1f7a:	5c d0       	rcall	.+184    	; 0x2034 <memcpy>
    1f7c:	01 c0       	rjmp	.+2      	; 0x1f80 <HID_Device_USBTask+0xf6>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    1f7e:	51 2c       	mov	r5, r1
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    1f80:	89 81       	ldd	r24, Y+1	; 0x01
    1f82:	9a 81       	ldd	r25, Y+2	; 0x02
    1f84:	89 2b       	or	r24, r25
    1f86:	f1 f0       	breq	.+60     	; 0x1fc4 <HID_Device_USBTask+0x13a>
    1f88:	41 10       	cpse	r4, r1
    1f8a:	04 c0       	rjmp	.+8      	; 0x1f94 <HID_Device_USBTask+0x10a>
    1f8c:	51 10       	cpse	r5, r1
    1f8e:	02 c0       	rjmp	.+4      	; 0x1f94 <HID_Device_USBTask+0x10a>
    1f90:	01 2b       	or	r16, r17
    1f92:	c1 f0       	breq	.+48     	; 0x1fc4 <HID_Device_USBTask+0x13a>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    1f94:	f7 01       	movw	r30, r14
    1f96:	84 85       	ldd	r24, Z+12	; 0x0c
    1f98:	95 85       	ldd	r25, Z+13	; 0x0d
    1f9a:	97 87       	std	Z+15, r25	; 0x0f
    1f9c:	86 87       	std	Z+14, r24	; 0x0e
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f9e:	81 81       	ldd	r24, Z+1	; 0x01
    1fa0:	8f 70       	andi	r24, 0x0F	; 15
    1fa2:	80 93 e9 00 	sts	0x00E9, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    1fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa8:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1faa:	80 93 f1 00 	sts	0x00F1, r24
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    1fae:	69 81       	ldd	r22, Y+1	; 0x01
    1fb0:	7a 81       	ldd	r23, Y+2	; 0x02
    1fb2:	40 e0       	ldi	r20, 0x00	; 0
    1fb4:	50 e0       	ldi	r21, 0x00	; 0
    1fb6:	c6 01       	movw	r24, r12
    1fb8:	87 d9       	rcall	.-3314   	; 0x12c8 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1fba:	80 91 e8 00 	lds	r24, 0x00E8
    1fbe:	8e 77       	andi	r24, 0x7E	; 126
    1fc0:	80 93 e8 00 	sts	0x00E8, r24
    1fc4:	80 91 e4 00 	lds	r24, 0x00E4
    1fc8:	90 91 e5 00 	lds	r25, 0x00E5

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    1fcc:	f7 01       	movw	r30, r14
    1fce:	93 87       	std	Z+11, r25	; 0x0b
    1fd0:	82 87       	std	Z+10, r24	; 0x0a
    1fd2:	0f b6       	in	r0, 0x3f	; 63
    1fd4:	f8 94       	cli
    1fd6:	9e be       	out	0x3e, r9	; 62
    1fd8:	0f be       	out	0x3f, r0	; 63
    1fda:	8d be       	out	0x3d, r8	; 61
	}
}
    1fdc:	0f b6       	in	r0, 0x3f	; 63
    1fde:	f8 94       	cli
    1fe0:	be be       	out	0x3e, r11	; 62
    1fe2:	0f be       	out	0x3f, r0	; 63
    1fe4:	ad be       	out	0x3d, r10	; 61
    1fe6:	0f 90       	pop	r0
    1fe8:	0f 90       	pop	r0
    1fea:	0f 90       	pop	r0
    1fec:	df 91       	pop	r29
    1fee:	cf 91       	pop	r28
    1ff0:	1f 91       	pop	r17
    1ff2:	0f 91       	pop	r16
    1ff4:	ff 90       	pop	r15
    1ff6:	ef 90       	pop	r14
    1ff8:	df 90       	pop	r13
    1ffa:	cf 90       	pop	r12
    1ffc:	bf 90       	pop	r11
    1ffe:	af 90       	pop	r10
    2000:	9f 90       	pop	r9
    2002:	8f 90       	pop	r8
    2004:	7f 90       	pop	r7
    2006:	6f 90       	pop	r6
    2008:	5f 90       	pop	r5
    200a:	4f 90       	pop	r4
    200c:	08 95       	ret

0000200e <__tablejump2__>:
    200e:	ee 0f       	add	r30, r30
    2010:	ff 1f       	adc	r31, r31
    2012:	05 90       	lpm	r0, Z+
    2014:	f4 91       	lpm	r31, Z
    2016:	e0 2d       	mov	r30, r0
    2018:	09 94       	ijmp

0000201a <memcmp>:
    201a:	fb 01       	movw	r30, r22
    201c:	dc 01       	movw	r26, r24
    201e:	04 c0       	rjmp	.+8      	; 0x2028 <memcmp+0xe>
    2020:	8d 91       	ld	r24, X+
    2022:	01 90       	ld	r0, Z+
    2024:	80 19       	sub	r24, r0
    2026:	21 f4       	brne	.+8      	; 0x2030 <memcmp+0x16>
    2028:	41 50       	subi	r20, 0x01	; 1
    202a:	50 40       	sbci	r21, 0x00	; 0
    202c:	c8 f7       	brcc	.-14     	; 0x2020 <memcmp+0x6>
    202e:	88 1b       	sub	r24, r24
    2030:	99 0b       	sbc	r25, r25
    2032:	08 95       	ret

00002034 <memcpy>:
    2034:	fb 01       	movw	r30, r22
    2036:	dc 01       	movw	r26, r24
    2038:	02 c0       	rjmp	.+4      	; 0x203e <memcpy+0xa>
    203a:	01 90       	ld	r0, Z+
    203c:	0d 92       	st	X+, r0
    203e:	41 50       	subi	r20, 0x01	; 1
    2040:	50 40       	sbci	r21, 0x00	; 0
    2042:	d8 f7       	brcc	.-10     	; 0x203a <memcpy+0x6>
    2044:	08 95       	ret

00002046 <memset>:
    2046:	dc 01       	movw	r26, r24
    2048:	01 c0       	rjmp	.+2      	; 0x204c <memset+0x6>
    204a:	6d 93       	st	X+, r22
    204c:	41 50       	subi	r20, 0x01	; 1
    204e:	50 40       	sbci	r21, 0x00	; 0
    2050:	e0 f7       	brcc	.-8      	; 0x204a <memset+0x4>
    2052:	08 95       	ret

00002054 <_exit>:
    2054:	f8 94       	cli

00002056 <__stop_program>:
    2056:	ff cf       	rjmp	.-2      	; 0x2056 <__stop_program>
